(()=>{var e={433:()=>{const e=document.querySelectorAll("details");for(let i=0;i<e.length;i++)e[i].addEventListener("toggle",t),e[i].addEventListener("toggle",s);function t(t){if(t.target.open)for(let s=0;s<e.length;s++)"DETAILS"==e[s].tagName&&e[s].hasAttribute("open")&&t.target!=e[s]&&e[s].removeAttribute("open")}function s(e){e.target.parentNode.querySelector(".information__box-arrow").classList.toggle("information__box-arrow-down")}}},t={};function s(i){var r=t[i];if(void 0!==r)return r.exports;var a=t[i]={exports:{}};return e[i](a,a.exports,s),a.exports}(()=>{"use strict";function e(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function t(s,i){void 0===s&&(s={}),void 0===i&&(i={}),Object.keys(i).forEach((r=>{void 0===s[r]?s[r]=i[r]:e(i[r])&&e(s[r])&&Object.keys(i[r]).length>0&&t(s[r],i[r])}))}const i={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function r(){const e="undefined"!=typeof document?document:{};return t(e,i),e}const a={document:i,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function n(){const e="undefined"!=typeof window?window:{};return t(e,a),e}function l(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function o(){return Date.now()}function d(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function c(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(null!=r&&(s=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],a=Object.getOwnPropertyDescriptor(r,i);void 0!==a&&a.enumerable&&(d(e[i])&&d(r[i])?r[i].__swiper__?e[i]=r[i]:c(e[i],r[i]):!d(e[i])&&d(r[i])?(e[i]={},r[i].__swiper__?e[i]=r[i]:c(e[i],r[i])):e[i]=r[i])}}}var s;return e}function p(e,t,s){e.style.setProperty(t,s)}function u(e){let{swiper:t,targetPosition:s,side:i}=e;const r=n(),a=-t.translate;let l,o=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const c=s>a?"next":"prev",p=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,u=()=>{l=(new Date).getTime(),null===o&&(o=l);const e=Math.max(Math.min((l-o)/d,1),0),n=.5-Math.cos(e*Math.PI)/2;let c=a+n*(s-a);if(p(c,s)&&(c=s),t.wrapperEl.scrollTo({[i]:c}),p(c,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:c})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(u)};u()}function m(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function h(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:[t]),s}function f(e,t){return n().getComputedStyle(e,null).getPropertyValue(t)}function v(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function g(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function w(e,t,s){const i=n();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let b,S,T;function y(){return b||(b=function(){const e=n(),t=r();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),b}var E={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const r=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][r](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function r(){i.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var s=arguments.length,a=new Array(s),n=0;n<s;n++)a[n]=arguments[n];t.apply(i,a)}return r.__emitterProxy=t,i.on(e,r,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,r)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(r,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var r=arguments.length,a=new Array(r),n=0;n<r;n++)a[n]=arguments[n];return"string"==typeof a[0]||Array.isArray(a[0])?(t=a[0],s=a.slice(1,a.length),i=e):(t=a[0].events,s=a[0].data,i=a[0].context||e),s.unshift(i),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const x=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},C=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},M=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=r,a=[s-t];return a.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{a.includes(t.column)&&C(e,s)}))}const a=r+i-1;if(e.params.rewind||e.params.loop)for(let i=r-t;i<=a+t;i+=1){const t=(i%s+s)%s;(t<r||t>a)&&C(e,t)}else for(let i=Math.max(r-t,0);i<=Math.min(a+t,s-1);i+=1)i!==r&&(i>a||i<r)&&C(e,i)};var L={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(f(i,"padding-left")||0,10)-parseInt(f(i,"padding-right")||0,10),s=s-parseInt(f(i,"padding-top")||0,10)-parseInt(f(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function s(e,s){return parseFloat(e.getPropertyValue(t(s))||0)}const i=e.params,{wrapperEl:r,slidesEl:a,size:n,rtlTranslate:l,wrongRTL:o}=e,d=e.virtual&&i.virtual.enabled,c=d?e.virtual.slides.length:e.slides.length,u=m(a,`.${e.params.slideClass}, swiper-slide`),h=d?e.virtual.slides.length:u.length;let v=[];const g=[],b=[];let S=i.slidesOffsetBefore;"function"==typeof S&&(S=i.slidesOffsetBefore.call(e));let T=i.slidesOffsetAfter;"function"==typeof T&&(T=i.slidesOffsetAfter.call(e));const y=e.snapGrid.length,E=e.slidesGrid.length;let x=i.spaceBetween,C=-S,M=0,L=0;if(void 0===n)return;"string"==typeof x&&x.indexOf("%")>=0?x=parseFloat(x.replace("%",""))/100*n:"string"==typeof x&&(x=parseFloat(x)),e.virtualSize=-x,u.forEach((e=>{l?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),i.centeredSlides&&i.cssMode&&(p(r,"--swiper-centered-offset-before",""),p(r,"--swiper-centered-offset-after",""));const P=i.grid&&i.grid.rows>1&&e.grid;let k;P&&e.grid.initSlides(h);const I="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter((e=>void 0!==i.breakpoints[e].slidesPerView)).length>0;for(let r=0;r<h;r+=1){let a;if(k=0,u[r]&&(a=u[r]),P&&e.grid.updateSlide(r,a,h,t),!u[r]||"none"!==f(a,"display")){if("auto"===i.slidesPerView){I&&(u[r].style[t("width")]="");const n=getComputedStyle(a),l=a.style.transform,o=a.style.webkitTransform;if(l&&(a.style.transform="none"),o&&(a.style.webkitTransform="none"),i.roundLengths)k=e.isHorizontal()?w(a,"width",!0):w(a,"height",!0);else{const e=s(n,"width"),t=s(n,"padding-left"),i=s(n,"padding-right"),r=s(n,"margin-left"),l=s(n,"margin-right"),o=n.getPropertyValue("box-sizing");if(o&&"border-box"===o)k=e+r+l;else{const{clientWidth:s,offsetWidth:n}=a;k=e+t+i+r+l+(n-s)}}l&&(a.style.transform=l),o&&(a.style.webkitTransform=o),i.roundLengths&&(k=Math.floor(k))}else k=(n-(i.slidesPerView-1)*x)/i.slidesPerView,i.roundLengths&&(k=Math.floor(k)),u[r]&&(u[r].style[t("width")]=`${k}px`);u[r]&&(u[r].swiperSlideSize=k),b.push(k),i.centeredSlides?(C=C+k/2+M/2+x,0===M&&0!==r&&(C=C-n/2-x),0===r&&(C=C-n/2-x),Math.abs(C)<.001&&(C=0),i.roundLengths&&(C=Math.floor(C)),L%i.slidesPerGroup==0&&v.push(C),g.push(C)):(i.roundLengths&&(C=Math.floor(C)),(L-Math.min(e.params.slidesPerGroupSkip,L))%e.params.slidesPerGroup==0&&v.push(C),g.push(C),C=C+k+x),e.virtualSize+=k+x,M=k,L+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+T,l&&o&&("slide"===i.effect||"coverflow"===i.effect)&&(r.style.width=`${e.virtualSize+x}px`),i.setWrapperSize&&(r.style[t("width")]=`${e.virtualSize+x}px`),P&&e.grid.updateWrapperSize(k,v,t),!i.centeredSlides){const t=[];for(let s=0;s<v.length;s+=1){let r=v[s];i.roundLengths&&(r=Math.floor(r)),v[s]<=e.virtualSize-n&&t.push(r)}v=t,Math.floor(e.virtualSize-n)-Math.floor(v[v.length-1])>1&&v.push(e.virtualSize-n)}if(d&&i.loop){const t=b[0]+x;if(i.slidesPerGroup>1){const s=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/i.slidesPerGroup),r=t*i.slidesPerGroup;for(let e=0;e<s;e+=1)v.push(v[v.length-1]+r)}for(let s=0;s<e.virtual.slidesBefore+e.virtual.slidesAfter;s+=1)1===i.slidesPerGroup&&v.push(v[v.length-1]+t),g.push(g[g.length-1]+t),e.virtualSize+=t}if(0===v.length&&(v=[0]),0!==x){const s=e.isHorizontal()&&l?"marginLeft":t("marginRight");u.filter(((e,t)=>!(i.cssMode&&!i.loop)||t!==u.length-1)).forEach((e=>{e.style[s]=`${x}px`}))}if(i.centeredSlides&&i.centeredSlidesBounds){let e=0;b.forEach((t=>{e+=t+(x||0)})),e-=x;const t=e-n;v=v.map((e=>e<=0?-S:e>t?t+T:e))}if(i.centerInsufficientSlides){let e=0;if(b.forEach((t=>{e+=t+(x||0)})),e-=x,e<n){const t=(n-e)/2;v.forEach(((e,s)=>{v[s]=e-t})),g.forEach(((e,s)=>{g[s]=e+t}))}}if(Object.assign(e,{slides:u,snapGrid:v,slidesGrid:g,slidesSizesGrid:b}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){p(r,"--swiper-centered-offset-before",-v[0]+"px"),p(r,"--swiper-centered-offset-after",e.size/2-b[b.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(h!==c&&e.emit("slidesLengthChange"),v.length!==y&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),g.length!==E&&e.emit("slidesGridLengthChange"),i.watchSlidesProgress&&e.updateSlidesOffset(),!(d||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const t=`${i.containerModifierClass}backface-hidden`,s=e.el.classList.contains(t);h<=i.maxBackfaceHiddenSlides?s||e.el.classList.add(t):s&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let r,a=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!i)break;s.push(n(e))}else s.push(n(t.activeIndex));for(r=0;r<s.length;r+=1)if(void 0!==s[r]){const e=s[r].offsetHeight;a=e>a?e:a}(a||0===a)&&(t.wrapperEl.style.height=`${a}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:r,snapGrid:a}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;r&&(n=e),i.forEach((e=>{e.classList.remove(s.slideVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<i.length;e+=1){const o=i[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=i[0].swiperSlideOffset);const c=(n+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),p=(n-a[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),u=-(n-d),m=u+t.slidesSizesGrid[e];(u>=0&&u<t.size-1||m>1&&m<=t.size||u<=0&&m>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e),i[e].classList.add(s.slideVisibleClass)),o.progress=r?-c:c,o.originalProgress=r?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:a,isEnd:n,progressLoop:l}=t;const o=a,d=n;if(0===i)r=0,a=!0,n=!0;else{r=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;a=s||r<=0,n=l||r>=1,s&&(r=0),l&&(r=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[s],a=t.slidesGrid[i],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=r?(o-r)/n:(o+n-a)/n,l>1&&(l-=1)}Object.assign(t,{progress:r,progressLoop:l,isBeginning:a,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),a&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!a||d&&!n)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:r}=e,a=e.virtual&&s.virtual.enabled,n=e=>m(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let l;if(t.forEach((e=>{e.classList.remove(s.slideActiveClass,s.slideNextClass,s.slidePrevClass)})),a)if(s.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=n(`[data-swiper-slide-index="${t}"]`)}else l=n(`[data-swiper-slide-index="${r}"]`);else l=t[r];if(l){l.classList.add(s.slideActiveClass);let e=function(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(l,`.${s.slideClass}, swiper-slide`)[0];s.loop&&!e&&(e=t[0]),e&&e.classList.add(s.slideNextClass);let i=function(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(l,`.${s.slideClass}, swiper-slide`)[0];s.loop&&0===!i&&(i=t[t.length-1]),i&&i.classList.add(s.slidePrevClass)}e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:r,activeIndex:a,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?r=e:i>=t[e]&&i<t[e+1]&&(r=e+1):i>=t[e]&&(r=e);return s.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),i.indexOf(s)>=0)o=i.indexOf(s);else{const e=Math.min(r.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/r.slidesPerGroup)}if(o>=i.length&&(o=i.length-1),d===a)return o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")),void(t.params.loop&&t.virtual&&t.params.virtual.enabled&&(t.realIndex=c(d)));let p;p=t.virtual&&r.virtual.enabled&&r.loop?c(d):t.slides[d]?parseInt(t.slides[d].getAttribute("data-swiper-slide-index")||d,10):d,Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:n,realIndex:p,previousIndex:a,activeIndex:d}),t.initialized&&M(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(n!==p&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let r=e.closest(`.${i.slideClass}, swiper-slide`);!r&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(r=e)}));let a,n=!1;if(r)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===r){n=!0,a=e;break}if(!r||!n)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=r,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=a,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};function P(e){let{swiper:t,runCallbacks:s,direction:i,step:r}=e;const{activeIndex:a,previousIndex:n}=t;let l=i;if(l||(l=a>n?"next":a<n?"prev":"reset"),t.emit(`transition${r}`),s&&a!==n){if("reset"===l)return void t.emit(`slideResetTransition${r}`);t.emit(`slideChangeTransition${r}`),"next"===l?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`)}}var k={slideTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const a=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:m,wrapperEl:h,enabled:f}=a;if(a.animating&&l.preventInteractionOnTransition||!f&&!i&&!r)return!1;const v=Math.min(a.params.slidesPerGroupSkip,n);let g=v+Math.floor((n-v)/a.params.slidesPerGroup);g>=o.length&&(g=o.length-1);const w=-o[g];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*w),s=Math.floor(100*d[e]),i=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<i-(i-s)/2?n=e:t>=s&&t<i&&(n=e+1):t>=s&&(n=e)}if(a.initialized&&n!==p){if(!a.allowSlideNext&&(m?w>a.translate&&w>a.minTranslate():w<a.translate&&w<a.minTranslate()))return!1;if(!a.allowSlidePrev&&w>a.translate&&w>a.maxTranslate()&&(p||0)!==n)return!1}let b;if(n!==(c||0)&&s&&a.emit("beforeSlideChangeStart"),a.updateProgress(w),b=n>p?"next":n<p?"prev":"reset",m&&-w===a.translate||!m&&w===a.translate)return a.updateActiveIndex(n),l.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==l.effect&&a.setTranslate(w),"reset"!==b&&(a.transitionStart(s,b),a.transitionEnd(s,b)),!1;if(l.cssMode){const e=a.isHorizontal(),s=m?w:-w;if(0===t){const t=a.virtual&&a.params.virtual.enabled;t&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),t&&!a._cssModeVirtualInitialSet&&a.params.initialSlide>0?(a._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{h[e?"scrollLeft":"scrollTop"]=s}))):h[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{a.wrapperEl.style.scrollSnapType="",a._immediateVirtual=!1}))}else{if(!a.support.smoothScroll)return u({swiper:a,targetPosition:s,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return a.setTransition(t),a.setTranslate(w),a.updateActiveIndex(n),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,i),a.transitionStart(s,b),0===t?a.transitionEnd(s,b):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(s,b))}),a.wrapperEl.addEventListener("transitionend",a.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const r=this;let a=e;return r.params.loop&&(r.virtual&&r.params.virtual.enabled?a+=r.virtual.slidesBefore:a=r.getSlideIndexByData(a)),r.slideTo(a,t,s,i)},slideNext:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{enabled:r,params:a,animating:n}=i;if(!r)return i;let l=a.slidesPerGroup;"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(l=Math.max(i.slidesPerViewDynamic("current",!0),1));const o=i.activeIndex<a.slidesPerGroupSkip?1:l,d=i.virtual&&a.virtual.enabled;if(a.loop){if(n&&!d&&a.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&a.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+o,e,t,s)})),!0}return a.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{params:r,snapGrid:a,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=i;if(!o)return i;const c=i.virtual&&r.virtual.enabled;if(r.loop){if(d&&!c&&r.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?i.translate:-i.translate),m=a.map((e=>p(e)));let h=a[m.indexOf(u)-1];if(void 0===h&&r.cssMode){let e;a.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(h=a[e>0?e-1:e])}let f=0;if(void 0!==h&&(f=n.indexOf(h),f<0&&(f=i.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(f=f-i.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),r.rewind&&i.isBeginning){const r=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(r,e,t,s)}return r.loop&&0===i.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{i.slideTo(f,e,t,s)})),!0):i.slideTo(f,e,t,s)},slideReset:function(e,t,s){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);const r=this;let a=r.activeIndex;const n=Math.min(r.params.slidesPerGroupSkip,a),l=n+Math.floor((a-n)/r.params.slidesPerGroup),o=r.rtlTranslate?r.translate:-r.translate;if(o>=r.snapGrid[l]){const e=r.snapGrid[l];o-e>(r.snapGrid[l+1]-e)*i&&(a+=r.params.slidesPerGroup)}else{const e=r.snapGrid[l-1];o-e<=(r.snapGrid[l]-e)*i&&(a-=r.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,r.slidesGrid.length-1),r.slideTo(a,e,t,s)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,a=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?a<e.loopedSlides-i/2||a>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),a=e.getSlideIndex(m(s,`${n}[data-swiper-slide-index="${r}"]`)[0]),l((()=>{e.slideTo(a)}))):e.slideTo(a):a>e.slides.length-i?(e.loopFix(),a=e.getSlideIndex(m(s,`${n}[data-swiper-slide-index="${r}"]`)[0]),l((()=>{e.slideTo(a)}))):e.slideTo(a)}else e.slideTo(a)}};function I(e){const t=this,s=r(),i=n(),a=t.touchEventsData;a.evCache.push(e);const{params:l,touches:d,enabled:c}=t;if(!c)return;if(!l.simulateTouch&&"mouse"===e.pointerType)return;if(t.animating&&l.preventInteractionOnTransition)return;!t.animating&&l.cssMode&&l.loop&&t.loopFix();let p=e;p.originalEvent&&(p=p.originalEvent);let u=p.target;if("wrapper"===l.touchEventsTarget&&!t.wrapperEl.contains(u))return;if("which"in p&&3===p.which)return;if("button"in p&&p.button>0)return;if(a.isTouched&&a.isMoved)return;const m=!!l.noSwipingClass&&""!==l.noSwipingClass,h=e.composedPath?e.composedPath():e.path;m&&p.target&&p.target.shadowRoot&&h&&(u=h[0]);const f=l.noSwipingSelector?l.noSwipingSelector:`.${l.noSwipingClass}`,v=!(!p.target||!p.target.shadowRoot);if(l.noSwiping&&(v?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===r()||s===n())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(f,u):u.closest(f)))return void(t.allowClick=!0);if(l.swipeHandler&&!u.closest(l.swipeHandler))return;d.currentX=p.pageX,d.currentY=p.pageY;const g=d.currentX,w=d.currentY,b=l.edgeSwipeDetection||l.iOSEdgeSwipeDetection,S=l.edgeSwipeThreshold||l.iOSEdgeSwipeThreshold;if(b&&(g<=S||g>=i.innerWidth-S)){if("prevent"!==b)return;e.preventDefault()}Object.assign(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),d.startX=g,d.startY=w,a.touchStartTime=o(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,l.threshold>0&&(a.allowThresholdMove=!1);let T=!0;u.matches(a.focusableElements)&&(T=!1,"SELECT"===u.nodeName&&(a.isTouched=!1)),s.activeElement&&s.activeElement.matches(a.focusableElements)&&s.activeElement!==u&&s.activeElement.blur();const y=T&&t.allowTouchMove&&l.touchStartPreventDefault;!l.touchStartForcePreventDefault&&!y||u.isContentEditable||p.preventDefault(),l.freeMode&&l.freeMode.enabled&&t.freeMode&&t.animating&&!l.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",p)}function A(e){const t=r(),s=this,i=s.touchEventsData,{params:a,touches:n,rtlTranslate:l,enabled:d}=s;if(!d)return;if(!a.simulateTouch&&"mouse"===e.pointerType)return;let c=e;if(c.originalEvent&&(c=c.originalEvent),!i.isTouched)return void(i.startMoving&&i.isScrolling&&s.emit("touchMoveOpposite",c));const p=i.evCache.findIndex((e=>e.pointerId===c.pointerId));p>=0&&(i.evCache[p]=c);const u=i.evCache.length>1?i.evCache[0]:c,m=u.pageX,h=u.pageY;if(c.preventedByNestedSwiper)return n.startX=m,void(n.startY=h);if(!s.allowTouchMove)return c.target.matches(i.focusableElements)||(s.allowClick=!1),void(i.isTouched&&(Object.assign(n,{startX:m,startY:h,prevX:s.touches.currentX,prevY:s.touches.currentY,currentX:m,currentY:h}),i.touchStartTime=o()));if(a.touchReleaseOnEdges&&!a.loop)if(s.isVertical()){if(h<n.startY&&s.translate<=s.maxTranslate()||h>n.startY&&s.translate>=s.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(m<n.startX&&s.translate<=s.maxTranslate()||m>n.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&c.target===t.activeElement&&c.target.matches(i.focusableElements))return i.isMoved=!0,void(s.allowClick=!1);if(i.allowTouchCallbacks&&s.emit("touchMove",c),c.targetTouches&&c.targetTouches.length>1)return;n.currentX=m,n.currentY=h;const f=n.currentX-n.startX,v=n.currentY-n.startY;if(s.params.threshold&&Math.sqrt(f**2+v**2)<s.params.threshold)return;if(void 0===i.isScrolling){let e;s.isHorizontal()&&n.currentY===n.startY||s.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:f*f+v*v>=25&&(e=180*Math.atan2(Math.abs(v),Math.abs(f))/Math.PI,i.isScrolling=s.isHorizontal()?e>a.touchAngle:90-e>a.touchAngle)}if(i.isScrolling&&s.emit("touchMoveOpposite",c),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling||s.zoom&&s.params.zoom&&s.params.zoom.enabled&&i.evCache.length>1)return void(i.isTouched=!1);if(!i.startMoving)return;s.allowClick=!1,!a.cssMode&&c.cancelable&&c.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&c.stopPropagation();let g=s.isHorizontal()?f:v,w=s.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;a.oneWayMovement&&(g=Math.abs(g)*(l?1:-1),w=Math.abs(w)*(l?1:-1)),n.diff=g,g*=a.touchRatio,l&&(g=-g,w=-w);const b=s.touchesDirection;s.swipeDirection=g>0?"prev":"next",s.touchesDirection=w>0?"prev":"next";const S=s.params.loop&&!a.cssMode,T="next"===s.swipeDirection&&s.allowSlideNext||"prev"===s.swipeDirection&&s.allowSlidePrev;if(!i.isMoved){if(S&&T&&s.loopFix({direction:s.swipeDirection}),i.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!a.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",c)}let y;i.isMoved&&b!==s.touchesDirection&&S&&T&&Math.abs(g)>=1&&(s.loopFix({direction:s.swipeDirection,setTranslate:!0}),y=!0),s.emit("sliderMove",c),i.isMoved=!0,i.currentTranslate=g+i.startTranslate;let E=!0,x=a.resistanceRatio;if(a.touchReleaseOnEdges&&(x=0),g>0?(S&&T&&!y&&i.currentTranslate>(a.centeredSlides?s.minTranslate()-s.size/2:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>s.minTranslate()&&(E=!1,a.resistance&&(i.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+i.startTranslate+g)**x))):g<0&&(S&&T&&!y&&i.currentTranslate<(a.centeredSlides?s.maxTranslate()+s.size/2:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===a.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(a.slidesPerView,10)))}),i.currentTranslate<s.maxTranslate()&&(E=!1,a.resistance&&(i.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-i.startTranslate-g)**x))),E&&(c.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.allowSlidePrev||s.allowSlideNext||(i.currentTranslate=i.startTranslate),a.threshold>0){if(!(Math.abs(g)>a.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=s.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}a.followFinger&&!a.cssMode&&((a.freeMode&&a.freeMode.enabled&&s.freeMode||a.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),a.freeMode&&a.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(i.currentTranslate),s.setTranslate(i.currentTranslate))}function O(e){const t=this,s=t.touchEventsData,i=s.evCache.findIndex((t=>t.pointerId===e.pointerId));if(i>=0&&s.evCache.splice(i,1),["pointercancel","pointerout","pointerleave","contextmenu"].includes(e.type)&&(!["pointercancel","contextmenu"].includes(e.type)||!t.browser.isSafari&&!t.browser.isWebView))return;const{params:r,touches:a,rtlTranslate:n,slidesGrid:d,enabled:c}=t;if(!c)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let p=e;if(p.originalEvent&&(p=p.originalEvent),s.allowTouchCallbacks&&t.emit("touchEnd",p),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&r.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);r.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const u=o(),m=u-s.touchStartTime;if(t.allowClick){const e=p.path||p.composedPath&&p.composedPath();t.updateClickedSlide(e&&e[0]||p.target,e),t.emit("tap click",p),m<300&&u-s.lastClickTime<300&&t.emit("doubleTap doubleClick",p)}if(s.lastClickTime=o(),l((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===a.diff||s.currentTranslate===s.startTranslate)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let h;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,h=r.followFinger?n?t.translate:-t.translate:-s.currentTranslate,r.cssMode)return;if(r.freeMode&&r.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:h});let f=0,v=t.slidesSizesGrid[0];for(let e=0;e<d.length;e+=e<r.slidesPerGroupSkip?1:r.slidesPerGroup){const t=e<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==d[e+t]?h>=d[e]&&h<d[e+t]&&(f=e,v=d[e+t]-d[e]):h>=d[e]&&(f=e,v=d[d.length-1]-d[d.length-2])}let g=null,w=null;r.rewind&&(t.isBeginning?w=r.virtual&&r.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(g=0));const b=(h-d[f])/v,S=f<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(m>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(b>=r.longSwipesRatio?t.slideTo(r.rewind&&t.isEnd?g:f+S):t.slideTo(f)),"prev"===t.swipeDirection&&(b>1-r.longSwipesRatio?t.slideTo(f+S):null!==w&&b<0&&Math.abs(b)>r.longSwipesRatio?t.slideTo(w):t.slideTo(f))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||p.target!==t.navigation.nextEl&&p.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==g?g:f+S),"prev"===t.swipeDirection&&t.slideTo(null!==w?w:f)):p.target===t.navigation.nextEl?t.slideTo(f+S):t.slideTo(f)}}function z(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:r,snapGrid:a}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=i,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function _(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function G(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();r=0===a?0:(e.translate-e.minTranslate())/a,r!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function D(e){const t=this;x(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}let $=!1;function B(){}const F=(e,t)=>{const s=r(),{params:i,el:a,wrapperEl:n,device:l}=e,o=!!i.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;a[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:o}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),s[d]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&a[d]("click",e.onClick,!0),i.cssMode&&n[d]("scroll",e.onScroll),i.updateOnWindowResize?e[c](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",z,!0):e[c]("observerUpdate",z,!0),a[d]("load",e.onLoad,{capture:!0})};const N=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var V={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopedSlides:null,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function H(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],r=s[i];"object"==typeof r&&null!==r?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in r?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),c(t,s)):c(t,s)):c(t,s)}}const q={eventsEmitter:E,update:L,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:r}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let a=function(e,t){void 0===t&&(t="x");const s=n();let i,r,a;const l=function(e){const t=n();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(r=l.transform||l.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),a=new s.WebKitCSSMatrix("none"===r?"":r)):(a=l.MozTransform||l.OTransform||l.MsTransform||l.msTransform||l.transform||l.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=a.toString().split(",")),"x"===t&&(r=s.WebKitCSSMatrix?a.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(r=s.WebKitCSSMatrix?a.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}(r,e);return a+=this.cssOverflowAdjustment(),s&&(a=-a),a||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:r,wrapperEl:a,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=i?-e:e:d=e,r.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,r.cssMode?a[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:r.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),a.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const a=this,{params:n,wrapperEl:l}=a;if(a.animating&&n.preventInteractionOnTransition)return!1;const o=a.minTranslate(),d=a.maxTranslate();let c;if(c=i&&e>o?o:i&&e<d?d:e,a.updateProgress(c),n.cssMode){const e=a.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!a.support.smoothScroll)return u({swiper:a,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(a.setTransition(0),a.setTranslate(c),s&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(c),s&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,s&&a.emit("transitionEnd"))}),a.wrapperEl.addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),P({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),P({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:k,loop:{loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;!s.loop||t.virtual&&t.params.virtual.enabled||(m(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)})),t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"}))},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:r,activeSlideIndex:a,byController:n,byMousewheel:l}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:u,params:m}=o;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&m.virtual.enabled)return s&&(m.centeredSlides||0!==o.snapIndex?m.centeredSlides&&o.snapIndex<m.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=c,o.allowSlideNext=p,void o.emit("loopFix");const h="auto"===m.slidesPerView?o.slidesPerViewDynamic():Math.ceil(parseFloat(m.slidesPerView,10));let f=m.loopedSlides||h;f%m.slidesPerGroup!=0&&(f+=m.slidesPerGroup-f%m.slidesPerGroup),o.loopedSlides=f;const v=[],g=[];let w=o.activeIndex;void 0===a?a=o.getSlideIndex(o.slides.filter((e=>e.classList.contains(m.slideActiveClass)))[0]):w=a;const b="next"===i||!i,S="prev"===i||!i;let T=0,y=0;if(a<f){T=Math.max(f-a,m.slidesPerGroup);for(let e=0;e<f-a;e+=1){const t=e-Math.floor(e/d.length)*d.length;v.push(d.length-t-1)}}else if(a>o.slides.length-2*f){y=Math.max(a-(o.slides.length-2*f),m.slidesPerGroup);for(let e=0;e<y;e+=1){const t=e-Math.floor(e/d.length)*d.length;g.push(t)}}if(S&&v.forEach((e=>{o.slides[e].swiperLoopMoveDOM=!0,u.prepend(o.slides[e]),o.slides[e].swiperLoopMoveDOM=!1})),b&&g.forEach((e=>{o.slides[e].swiperLoopMoveDOM=!0,u.append(o.slides[e]),o.slides[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===m.slidesPerView&&o.updateSlides(),m.watchSlidesProgress&&o.updateSlidesOffset(),s)if(v.length>0&&S)if(void 0===t){const e=o.slidesGrid[w],t=o.slidesGrid[w+T]-e;l?o.setTranslate(o.translate-t):(o.slideTo(w+T,0,!1,!0),r&&(o.touches[o.isHorizontal()?"startX":"startY"]+=t,o.touchEventsData.currentTranslate=o.translate))}else r&&(o.slideToLoop(t,0,!1,!0),o.touchEventsData.currentTranslate=o.translate);else if(g.length>0&&b)if(void 0===t){const e=o.slidesGrid[w],t=o.slidesGrid[w-y]-e;l?o.setTranslate(o.translate-t):(o.slideTo(w-y,0,!1,!0),r&&(o.touches[o.isHorizontal()?"startX":"startY"]+=t,o.touchEventsData.currentTranslate=o.translate))}else o.slideToLoop(t,0,!1,!0);if(o.allowSlidePrev=c,o.allowSlideNext=p,o.controller&&o.controller.control&&!n){const e={slideRealIndex:t,direction:i,setTranslate:r,activeSlideIndex:a,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===m.slidesPerView&&s})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===m.slidesPerView&&s})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}},grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,t=r(),{params:s}=e;e.onTouchStart=I.bind(e),e.onTouchMove=A.bind(e),e.onTouchEnd=O.bind(e),s.cssMode&&(e.onScroll=G.bind(e)),e.onClick=_.bind(e),e.onLoad=D.bind(e),$||(t.addEventListener("touchstart",B),$=!0),F(e,"on")},detachEvents:function(){F(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:r}=e,a=i.breakpoints;if(!a||a&&0===Object.keys(a).length)return;const n=e.getBreakpoint(a,e.params.breakpointsBase,e.el);if(!n||e.currentBreakpoint===n)return;const l=(n in a?a[n]:void 0)||e.originalParams,o=N(e,i),d=N(e,l),p=i.enabled;o&&!d?(r.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&d&&(r.classList.add(`${i.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===i.grid.fill)&&r.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===l[t])return;const s=i[t]&&i[t].enabled,r=l[t]&&l[t].enabled;s&&!r&&e[t].disable(),!s&&r&&e[t].enable()}));const u=l.direction&&l.direction!==i.direction,m=i.loop&&(l.slidesPerView!==i.slidesPerView||u),h=i.loop;u&&s&&e.changeDirection(),c(e.params,l);const f=e.params.enabled,v=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),p&&!f?e.disable():!p&&f&&e.enable(),e.currentBreakpoint=n,e.emit("_beforeBreakpoint",l),s&&(m?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!h&&v?(e.loopCreate(t),e.updateSlides()):h&&!v&&e.loopDestroy()),e.emit("breakpoint",l)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let i=!1;const r=n(),a="window"===t?r.innerHeight:s.clientHeight,l=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:a*t,point:e}}return{value:e,point:e}}));l.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<l.length;e+=1){const{point:a,value:n}=l[e];"window"===t?r.matchMedia(`(min-width: ${n}px)`).matches&&(i=a):n<=s.clientWidth&&(i=a)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:r,device:a}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:a.android},{ios:a.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},j={};class R{constructor(){let e,t;for(var s=arguments.length,i=new Array(s),a=0;a<s;a++)i[a]=arguments[a];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=c({},t),e&&!t.el&&(t.el=e);const l=r();if(t.el&&"string"==typeof t.el&&l.querySelectorAll(t.el).length>1){const e=[];return l.querySelectorAll(t.el).forEach((s=>{const i=c({},t,{el:s});e.push(new R(i))})),e}const o=this;var d;o.__swiper__=!0,o.support=y(),o.device=(void 0===(d={userAgent:t.userAgent})&&(d={}),S||(S=function(e){let{userAgent:t}=void 0===e?{}:e;const s=y(),i=n(),r=i.navigator.platform,a=t||i.navigator.userAgent,l={ios:!1,android:!1},o=i.screen.width,d=i.screen.height,c=a.match(/(Android);?[\s\/]+([\d.]+)?/);let p=a.match(/(iPad).*OS\s([\d_]+)/);const u=a.match(/(iPod)(.*OS\s([\d_]+))?/),m=!p&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===r;let f="MacIntel"===r;return!p&&f&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${d}`)>=0&&(p=a.match(/(Version)\/([\d.]+)/),p||(p=[0,1,"13_0_0"]),f=!1),c&&!h&&(l.os="android",l.android=!0),(p||m||u)&&(l.os="ios",l.ios=!0),l}(d)),S),o.browser=(T||(T=function(){const e=n();let t=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const s=String(e.navigator.userAgent);if(s.includes("Version/")){const[e,i]=s.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&i<2}}return{isSafari:t||s(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),T),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],t.modules&&Array.isArray(t.modules)&&o.modules.push(...t.modules);const p={};o.modules.forEach((e=>{e({params:t,swiper:o,extendParams:H(t,p),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})}));const u=c({},V,p);return o.params=c({},u,j,t),o.originalParams=c({},o.params),o.passedParams=c({},t),o.params&&o.params.on&&Object.keys(o.params.on).forEach((e=>{o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===o.params.direction,isVertical:()=>"vertical"===o.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,evCache:[]},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=v(m(t,`.${s.slideClass}, swiper-slide`)[0]);return v(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=m(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),r=(s.maxTranslate()-i)*e+i;s.translateTo(r,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:r,slidesSizesGrid:a,size:n,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[l]?i[l].swiperSlideSize:0;for(let s=l+1;s<i.length;s+=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<i.length;e+=1)(t?r[e]+a[e]-r[l]<n:r[e]-r[l]<n)&&(o+=1);else for(let e=l-1;e>=0;e-=1)r[l]-r[e]<n&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&x(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&"SWIPER-CONTAINER"===s.parentNode.host.nodeName&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=s&&s.shadowRoot&&s.shadowRoot.querySelector?s.shadowRoot.querySelector(i()):m(s,i())[0];return!r&&t.params.createElements&&(r=h("div",t.params.wrapperClass),s.append(r),m(s,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:s,wrapperEl:r,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:r,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===f(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===f(s,"direction")),wrongRTL:"-webkit-box"===f(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?x(t,e):e.addEventListener("load",(e=>{x(t,e.target)}))})),M(t),t.initialized=!0,M(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:r,wrapperEl:a,slides:n}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),r.removeAttribute("style"),a.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){c(j,e)}static get extendedDefaults(){return j}static get defaults(){return V}static installModule(e){R.prototype.__modules__||(R.prototype.__modules__=[]);const t=R.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>R.installModule(e))),R):(R.installModule(e),R)}}function W(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((r=>{if(!s[r]&&!0===s.auto){let a=m(e.el,`.${i[r]}`)[0];a||(a=h("div",i[r]),a.className=i[r],e.el.append(a)),s[r]=a,t[r]=a}})),s}function X(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}Object.keys(q).forEach((e=>{Object.keys(q[e]).forEach((t=>{R.prototype[t]=q[e][t]}))})),R.use([function(e){let{swiper:t,on:s,emit:i}=e;const r=n();let a=null,l=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(a=new ResizeObserver((e=>{l=r.requestAnimationFrame((()=>{const{width:s,height:i}=t;let r=s,a=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:n}=e;n&&n!==t.el||(r=i?i.width:(s[0]||s).inlineSize,a=i?i.height:(s[0]||s).blockSize)})),r===s&&a===i||o()}))})),a.observe(t.el)):(r.addEventListener("resize",o),r.addEventListener("orientationchange",d))})),s("destroy",(()=>{l&&r.cancelAnimationFrame(l),a&&a.unobserve&&t.el&&(a.unobserve(t.el),a=null),r.removeEventListener("resize",o),r.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const a=[],l=n(),o=function(e,s){void 0===s&&(s={});const i=new(l.MutationObserver||l.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void r("observerUpdate",e[0]);const s=function(){r("observerUpdate",e[0])};l.requestAnimationFrame?l.requestAnimationFrame(s):l.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),a.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=g(t.hostEl);for(let t=0;t<e.length;t+=1)o(e[t])}o(t.hostEl,{childList:t.params.observeSlideChildren}),o(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{a.forEach((e=>{e.disconnect()})),a.splice(0,a.length)}))}]),new R(".swiper",{roundLengths:!0,modules:[function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null};const a=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function n(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s.length>1&&1===t.el.querySelectorAll(e).length&&(s=t.el.querySelector(e))),e&&!s?e:s)}function l(e,s){const i=t.params.navigation;(e=a(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function o(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return l(s,!1),void l(e,!1);l(s,t.isBeginning&&!t.params.rewind),l(e,t.isEnd&&!t.params.rewind)}function d(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),r("navigationPrev"))}function c(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),r("navigationNext"))}function p(){const e=t.params.navigation;if(t.params.navigation=W(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=n(e.nextEl),i=n(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:i}),s=a(s),i=a(i);const r=(s,i)=>{s&&s.addEventListener("click","next"===i?c:d),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>r(e,"next"))),i.forEach((e=>r(e,"prev")))}function u(){let{nextEl:e,prevEl:s}=t.navigation;e=a(e),s=a(s);const i=(e,s)=>{e.removeEventListener("click","next"===s?c:d),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),s.forEach((e=>i(e,"prev")))}i("init",(()=>{!1===t.params.navigation.enabled?m():(p(),o())})),i("toEdge fromEdge lock unlock",(()=>{o()})),i("destroy",(()=>{u()})),i("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=a(e),s=a(s),t.enabled?o():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,s)=>{let{nextEl:i,prevEl:n}=t.navigation;i=a(i),n=a(n);const l=s.target;if(t.params.navigation.hideOnClick&&!n.includes(l)&&!i.includes(l)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===l||t.pagination.el.contains(l)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),r(!0===e?"navigationShow":"navigationHide"),[...i,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const m=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),u()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),p(),o()},disable:m,update:o,init:p,destroy:u})},function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const a="swiper-pagination";let n;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${a}-bullet`,bulletActiveClass:`${a}-bullet-active`,modifierClass:`${a}-`,currentClass:`${a}-current`,totalClass:`${a}-total`,hiddenClass:`${a}-hidden`,progressbarFillClass:`${a}-progressbar-fill`,progressbarOppositeClass:`${a}-progressbar-opposite`,clickableClass:`${a}-clickable`,lockClass:`${a}-lock`,horizontalClass:`${a}-horizontal`,verticalClass:`${a}-vertical`,paginationDisabledClass:`${a}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;const o=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function d(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function c(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function p(e){const s=e.target.closest(X(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=v(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;const e=t.realIndex,s=t.getSlideIndexByData(i),r=t.getSlideIndexByData(t.realIndex),a=i=>{const r=t.activeIndex;t.loopFix({direction:i,activeSlideIndex:s,slideTo:!1}),r===t.activeIndex&&t.slideToLoop(e,0,!1,!0)};if(s>t.slides.length-t.loopedSlides)a(s>r?"next":"prev");else if(t.params.centeredSlides){const e="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():Math.ceil(parseFloat(t.params.slidesPerView,10));s<Math.floor(e/2)&&a("prev")}t.slideToLoop(i)}else t.slideTo(i)}function u(){const e=t.rtl,s=t.params.pagination;if(d())return;let i,a,p=t.pagination.el;p=o(p);const u=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,m=t.params.loop?Math.ceil(u/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(a=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,a=t.previousSnapIndex):(a=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const r=t.pagination.bullets;let o,d,u;if(s.dynamicBullets&&(n=w(r[0],t.isHorizontal()?"width":"height",!0),p.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=n*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==a&&(l+=i-(a||0),l>s.dynamicMainBullets-1?l=s.dynamicMainBullets-1:l<0&&(l=0)),o=Math.max(i-l,0),d=o+(Math.min(r.length,s.dynamicMainBullets)-1),u=(d+o)/2),r.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),p.length>1)r.forEach((e=>{const r=v(e);r===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(r>=o&&r<=d&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),r===o&&c(e,"prev"),r===d&&c(e,"next"))}));else{const e=r[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&r.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=r[o],t=r[d];for(let e=o;e<=d;e+=1)r[e]&&r[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));c(e,"prev"),c(t,"next")}}if(s.dynamicBullets){const i=Math.min(r.length,s.dynamicMainBullets+4),a=(n*i-n)/2-u*n,l=e?"right":"left";r.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${a}px`}))}}p.forEach(((e,a)=>{if("fraction"===s.type&&(e.querySelectorAll(X(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll(X(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(m)}))),"progressbar"===s.type){let r;r=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const a=(i+1)/m;let n=1,l=1;"horizontal"===r?n=a:l=a,e.querySelectorAll(X(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,m),0===a&&r("paginationRender",e)):(0===a&&r("paginationRender",e),r("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function m(){const e=t.params.pagination;if(d())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length;let i=t.pagination.el;i=o(i);let a="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?a+=e.renderBullet.call(t,s,e.bulletClass):a+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(a=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(a=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=a||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(X(e.bulletClass)))})),"custom"!==e.type&&r("paginationRender",i[0])}function h(){t.params.pagination=W(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>g(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=o(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",p),t.enabled||s.classList.add(e.lockClass)})))}function f(){const e=t.params.pagination;if(d())return;let s=t.pagination.el;s&&(s=o(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",p))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=o(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?b():(h(),m(),u())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&u()})),i("snapIndexChange",(()=>{u()})),i("snapGridLengthChange",(()=>{m(),u()})),i("destroy",(()=>{f()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{u()})),i("click",((e,s)=>{const i=s.target,a=o(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&a&&a.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=a[0].classList.contains(t.params.pagination.hiddenClass);r(!0===e?"paginationShow":"paginationHide"),a.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const b=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),f()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),h(),m(),u()},disable:b,render:m,update:u,init:h,destroy:f})}],loop:!0,navigation:{nextEl:".bt-arrow_type_left",prevEl:".bt-arrow_type_right"},slidesPerView:1,spaceBetween:40,autoHeight:!0}),s(433);class Y{constructor(e){this._popup=document.querySelector(e),this._handleEscCloseBinded=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscCloseBinded)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscCloseBinded)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup_opened")||e.target.classList.contains("popup__close"))&&this.close()}))}}const U=document.querySelector(".header__burger-btn"),K=document.querySelector(".popup_type_feedback"),J=document.querySelector(".burger-popup-btn"),Q=document.querySelector(".burger-popup"),Z=document.querySelector(".header__feedback-btn"),ee=new class extends Y{constructor(e,t){super(e),this._handleFormSubmit=t,this._formElement=this._popup.querySelector(".form"),this._btnSave=this._formElement.querySelector(".form__bottom-submit")}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),alert("Спасибо за обращение!")}))}close(){super.close(),this._formElement.reset()}}(".popup_type_feedback");ee.setEventListeners(),Z.addEventListener("click",(()=>{ee.open()})),U.addEventListener("click",(()=>{Q.classList.toggle("open-burger")})),J.addEventListener("click",(()=>{K.classList.toggle("popup_opened")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoic0JBQUEsTUFBTUEsRUFBVUMsU0FBU0MsaUJBQWlCLFdBRTFDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJSCxFQUFRSSxPQUFRRCxJQUNsQ0gsRUFBUUcsR0FBR0UsaUJBQWlCLFNBQVVDLEdBQ3RDTixFQUFRRyxHQUFHRSxpQkFBaUIsU0FBVUUsR0FFeEMsU0FBU0QsRUFBVUUsR0FDakIsR0FBS0EsRUFBTUMsT0FBT0MsS0FDbEIsSUFBSyxJQUFJUCxFQUFJLEVBQUdBLEVBQUlILEVBQVFJLE9BQVFELElBRVYsV0FBdEJILEVBQVFHLEdBQUdRLFNBQ1ZYLEVBQVFHLEdBQUdTLGFBQWEsU0FDekJKLEVBQU1DLFFBQVVULEVBQVFHLElBSzFCSCxFQUFRRyxHQUFHVSxnQkFBZ0IsT0FFL0IsQ0FDQSxTQUFTTixFQUFtQkMsR0FDWkEsRUFBTUMsT0FBT0ssV0FBV0MsY0FDcEMsMkJBRUlDLFVBQVVDLE9BQU8sOEJBQ3pCLEMsR0N4QklDLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQkUsSUFBakJELEVBQ0gsT0FBT0EsRUFBYUUsUUFHckIsSUFBSUMsRUFBU04sRUFBeUJFLEdBQVksQ0FHakRHLFFBQVMsQ0FBQyxHQU9YLE9BSEFFLEVBQW9CTCxHQUFVSSxFQUFRQSxFQUFPRCxRQUFTSixHQUcvQ0ssRUFBT0QsT0FDZixDLG1CQ1ZBLFNBQVMsRUFBU0csR0FDaEIsT0FBZSxPQUFSQSxHQUErQixpQkFBUkEsR0FBb0IsZ0JBQWlCQSxHQUFPQSxFQUFJQyxjQUFnQkMsTUFDaEcsQ0FDQSxTQUFTQyxFQUFPcEIsRUFBUXFCLFFBQ1AsSUFBWHJCLElBQ0ZBLEVBQVMsQ0FBQyxRQUVBLElBQVJxQixJQUNGQSxFQUFNLENBQUMsR0FFVEYsT0FBT0csS0FBS0QsR0FBS0UsU0FBUUMsU0FDSSxJQUFoQnhCLEVBQU93QixHQUFzQnhCLEVBQU93QixHQUFPSCxFQUFJRyxHQUFjLEVBQVNILEVBQUlHLEtBQVMsRUFBU3hCLEVBQU93QixLQUFTTCxPQUFPRyxLQUFLRCxFQUFJRyxJQUFNN0IsT0FBUyxHQUNwSnlCLEVBQU9wQixFQUFPd0IsR0FBTUgsRUFBSUcsR0FDMUIsR0FFSixDQUNBLE1BQU1DLEVBQWMsQ0FDbEJDLEtBQU0sQ0FBQyxFQUNQLGdCQUFBOUIsR0FBb0IsRUFDcEIsbUJBQUErQixHQUF1QixFQUN2QkMsY0FBZSxDQUNiLElBQUFDLEdBQVEsRUFDUkMsU0FBVSxJQUVaeEIsY0FBYSxJQUNKLEtBRVRiLGlCQUFnQixJQUNQLEdBRVRzQyxlQUFjLElBQ0wsS0FFVEMsWUFBVyxLQUNGLENBQ0wsU0FBQUMsR0FBYSxJQUdqQkMsY0FBYSxLQUNKLENBQ0xDLFNBQVUsR0FDVkMsV0FBWSxHQUNaQyxNQUFPLENBQUMsRUFDUixZQUFBQyxHQUFnQixFQUNoQkMscUJBQW9CLElBQ1gsS0FJYkMsZ0JBQWUsS0FDTixDQUFDLEdBRVZDLFdBQVUsSUFDRCxLQUVUQyxTQUFVLENBQ1JDLEtBQU0sR0FDTkMsS0FBTSxHQUNOQyxTQUFVLEdBQ1ZDLEtBQU0sR0FDTkMsT0FBUSxHQUNSQyxTQUFVLEdBQ1ZDLFNBQVUsR0FDVkMsT0FBUSxLQUdaLFNBQVMsSUFDUCxNQUFNQyxFQUEwQixvQkFBYjNELFNBQTJCQSxTQUFXLENBQUMsRUFFMUQsT0FEQTRCLEVBQU8rQixFQUFLMUIsR0FDTDBCLENBQ1QsQ0FDQSxNQUFNQyxFQUFZLENBQ2hCNUQsU0FBVWlDLEVBQ1Y0QixVQUFXLENBQ1RDLFVBQVcsSUFFYlosU0FBVSxDQUNSQyxLQUFNLEdBQ05DLEtBQU0sR0FDTkMsU0FBVSxHQUNWQyxLQUFNLEdBQ05DLE9BQVEsR0FDUkMsU0FBVSxHQUNWQyxTQUFVLEdBQ1ZDLE9BQVEsSUFFVkssUUFBUyxDQUNQLFlBQUFDLEdBQWdCLEVBQ2hCLFNBQUFDLEdBQWEsRUFDYixFQUFBQyxHQUFNLEVBQ04sSUFBQUMsR0FBUSxHQUVWQyxZQUFhLFdBQ1gsT0FBT0MsSUFDVCxFQUNBLGdCQUFBakUsR0FBb0IsRUFDcEIsbUJBQUErQixHQUF1QixFQUN2Qm1DLGlCQUFnQixLQUNQLENBQ0xDLGlCQUFnQixJQUNQLEtBSWIsS0FBQUMsR0FBUyxFQUNULElBQUFDLEdBQVEsRUFDUkMsT0FBUSxDQUFDLEVBQ1QsVUFBQUMsR0FBYyxFQUNkLFlBQUFDLEdBQWdCLEVBQ2hCQyxXQUFVLEtBQ0QsQ0FBQyxHQUVWQyxzQkFBc0JDLEdBQ00sb0JBQWZKLFlBQ1RJLElBQ08sTUFFRkosV0FBV0ksRUFBVSxHQUU5QixvQkFBQUMsQ0FBcUJDLEdBQ08sb0JBQWZOLFlBR1hDLGFBQWFLLEVBQ2YsR0FFRixTQUFTLElBQ1AsTUFBTUMsRUFBd0Isb0JBQVhDLE9BQXlCQSxPQUFTLENBQUMsRUFFdEQsT0FEQXZELEVBQU9zRCxFQUFLdEIsR0FDTHNCLENBQ1QsQ0M3SEEsU0FBUyxFQUFTSCxFQUFVSyxHQUkxQixZQUhjLElBQVZBLElBQ0ZBLEVBQVEsR0FFSFQsV0FBV0ksRUFBVUssRUFDOUIsQ0FDQSxTQUFTLElBQ1AsT0FBT1gsS0FBS1ksS0FDZCxDQXNEQSxTQUFTLEVBQVNDLEdBQ2hCLE1BQW9CLGlCQUFOQSxHQUF3QixPQUFOQSxHQUFjQSxFQUFFNUQsYUFBa0UsV0FBbkRDLE9BQU80RCxVQUFVQyxTQUFTQyxLQUFLSCxHQUFHSSxNQUFNLEdBQUksRUFDN0csQ0FRQSxTQUFTLElBQ1AsTUFBTUMsRUFBS2hFLE9BQU9pRSxVQUFVekYsUUFBVSxPQUFJa0IsRUFBWXVFLFVBQVUsSUFDMURDLEVBQVcsQ0FBQyxZQUFhLGNBQWUsYUFDOUMsSUFBSyxJQUFJM0YsRUFBSSxFQUFHQSxFQUFJMEYsVUFBVXpGLE9BQVFELEdBQUssRUFBRyxDQUM1QyxNQUFNNEYsRUFBYTVGLEVBQUksR0FBSzBGLFVBQVV6RixRQUFVRCxPQUFJbUIsRUFBWXVFLFVBQVUxRixHQUMxRSxHQUFJNEYsVUFaUUMsRUFZbURELElBVjNDLG9CQUFYWCxhQUF3RCxJQUF2QkEsT0FBT2EsWUFDMUNELGFBQWdCQyxZQUVsQkQsSUFBMkIsSUFBbEJBLEVBQUtFLFVBQW9DLEtBQWxCRixFQUFLRSxZQU9rQyxDQUMxRSxNQUFNQyxFQUFZdkUsT0FBT0csS0FBS0gsT0FBT21FLElBQWFLLFFBQU9uRSxHQUFPNkQsRUFBU08sUUFBUXBFLEdBQU8sSUFDeEYsSUFBSyxJQUFJcUUsRUFBWSxFQUFHQyxFQUFNSixFQUFVL0YsT0FBUWtHLEVBQVlDLEVBQUtELEdBQWEsRUFBRyxDQUMvRSxNQUFNRSxFQUFVTCxFQUFVRyxHQUNwQkcsRUFBTzdFLE9BQU84RSx5QkFBeUJYLEVBQVlTLFFBQzVDbEYsSUFBVG1GLEdBQXNCQSxFQUFLRSxhQUN6QixFQUFTZixFQUFHWSxLQUFhLEVBQVNULEVBQVdTLElBQzNDVCxFQUFXUyxHQUFTSSxXQUN0QmhCLEVBQUdZLEdBQVdULEVBQVdTLEdBRXpCLEVBQU9aLEVBQUdZLEdBQVVULEVBQVdTLEtBRXZCLEVBQVNaLEVBQUdZLEtBQWEsRUFBU1QsRUFBV1MsS0FDdkRaLEVBQUdZLEdBQVcsQ0FBQyxFQUNYVCxFQUFXUyxHQUFTSSxXQUN0QmhCLEVBQUdZLEdBQVdULEVBQVdTLEdBRXpCLEVBQU9aLEVBQUdZLEdBQVVULEVBQVdTLEtBR2pDWixFQUFHWSxHQUFXVCxFQUFXUyxHQUcvQixDQUNGLENBQ0YsQ0FyQ0YsSUFBZ0JSLEVBc0NkLE9BQU9KLENBQ1QsQ0FDQSxTQUFTLEVBQWVpQixFQUFJQyxFQUFTQyxHQUNuQ0YsRUFBRy9ELE1BQU1rRSxZQUFZRixFQUFTQyxFQUNoQyxDQUNBLFNBQVNFLEVBQXFCQyxHQUM1QixJQUFJLE9BQ0ZDLEVBQU0sZUFDTkMsRUFBYyxLQUNkQyxHQUNFSCxFQUNKLE1BQU05QixFQUFTLElBQ1RrQyxHQUFpQkgsRUFBT0ksVUFDOUIsSUFDSUMsRUFEQUMsRUFBWSxLQUVoQixNQUFNQyxFQUFXUCxFQUFPUSxPQUFPQyxNQUMvQlQsRUFBT1UsVUFBVS9FLE1BQU1nRixlQUFpQixPQUN4QzFDLEVBQU9ILHFCQUFxQmtDLEVBQU9ZLGdCQUNuQyxNQUFNQyxFQUFNWixFQUFpQkUsRUFBZ0IsT0FBUyxPQUNoRFcsRUFBZSxDQUFDQyxFQUFTekgsSUFDZCxTQUFSdUgsR0FBa0JFLEdBQVd6SCxHQUFrQixTQUFSdUgsR0FBa0JFLEdBQVd6SCxFQUV2RTBILEVBQVUsS0FDZFgsR0FBTyxJQUFJOUMsTUFBTzBELFVBQ0EsT0FBZFgsSUFDRkEsRUFBWUQsR0FFZCxNQUFNYSxFQUFXQyxLQUFLQyxJQUFJRCxLQUFLRSxLQUFLaEIsRUFBT0MsR0FBYUMsRUFBVSxHQUFJLEdBQ2hFZSxFQUFlLEdBQU1ILEtBQUtJLElBQUlMLEVBQVdDLEtBQUtLLElBQU0sRUFDMUQsSUFBSUMsRUFBa0J0QixFQUFnQm1CLEdBQWdCckIsRUFBaUJFLEdBT3ZFLEdBTklXLEVBQWFXLEVBQWlCeEIsS0FDaEN3QixFQUFrQnhCLEdBRXBCRCxFQUFPVSxVQUFVZ0IsU0FBUyxDQUN4QixDQUFDeEIsR0FBT3VCLElBRU5YLEVBQWFXLEVBQWlCeEIsR0FVaEMsT0FUQUQsRUFBT1UsVUFBVS9FLE1BQU1nRyxTQUFXLFNBQ2xDM0IsRUFBT1UsVUFBVS9FLE1BQU1nRixlQUFpQixHQUN4Q2xELFlBQVcsS0FDVHVDLEVBQU9VLFVBQVUvRSxNQUFNZ0csU0FBVyxHQUNsQzNCLEVBQU9VLFVBQVVnQixTQUFTLENBQ3hCLENBQUN4QixHQUFPdUIsR0FDUixTQUVKeEQsRUFBT0gscUJBQXFCa0MsRUFBT1ksZ0JBR3JDWixFQUFPWSxlQUFpQjNDLEVBQU9MLHNCQUFzQm9ELEVBQVEsRUFFL0RBLEdBQ0YsQ0FJQSxTQUFTLEVBQWdCWSxFQUFTQyxHQUloQyxZQUhpQixJQUFiQSxJQUNGQSxFQUFXLElBRU4sSUFBSUQsRUFBUW5HLFVBQVV3RCxRQUFPUyxHQUFNQSxFQUFHb0MsUUFBUUQsSUFDdkQsQ0FDQSxTQUFTLEVBQWNFLEVBQUtDLFFBQ1YsSUFBWkEsSUFDRkEsRUFBVSxJQUVaLE1BQU10QyxFQUFLNUcsU0FBUzBDLGNBQWN1RyxHQUVsQyxPQURBckMsRUFBRzdGLFVBQVVvSSxPQUFRQyxNQUFNQyxRQUFRSCxHQUFXQSxFQUFVLENBQUNBLElBQ2xEdEMsQ0FDVCxDQXFDQSxTQUFTMEMsRUFBYTFDLEVBQUkyQyxHQUV4QixPQURlLElBQ0RqRixpQkFBaUJzQyxFQUFJLE1BQU1yQyxpQkFBaUJnRixFQUM1RCxDQUNBLFNBQVMsRUFBYTNDLEdBQ3BCLElBQ0kxRyxFQURBc0osRUFBUTVDLEVBRVosR0FBSTRDLEVBQU8sQ0FHVCxJQUZBdEosRUFBSSxFQUV1QyxRQUFuQ3NKLEVBQVFBLEVBQU1DLGtCQUNHLElBQW5CRCxFQUFNdkQsV0FBZ0IvRixHQUFLLEdBRWpDLE9BQU9BLENBQ1QsQ0FFRixDQUNBLFNBQVMsRUFBZTBHLEVBQUltQyxHQUMxQixNQUFNVyxFQUFVLEdBQ2hCLElBQUlDLEVBQVMvQyxFQUFHZ0QsY0FDaEIsS0FBT0QsR0FDRFosRUFDRVksRUFBT1gsUUFBUUQsSUFBV1csRUFBUUcsS0FBS0YsR0FFM0NELEVBQVFHLEtBQUtGLEdBRWZBLEVBQVNBLEVBQU9DLGNBRWxCLE9BQU9GLENBQ1QsQ0FXQSxTQUFTSSxFQUFpQmxELEVBQUltRCxFQUFNQyxHQUNsQyxNQUFNN0UsRUFBUyxJQUNmLE9BQUk2RSxFQUNLcEQsRUFBWSxVQUFUbUQsRUFBbUIsY0FBZ0IsZ0JBQWtCRSxXQUFXOUUsRUFBT2IsaUJBQWlCc0MsRUFBSSxNQUFNckMsaUJBQTBCLFVBQVR3RixFQUFtQixlQUFpQixlQUFpQkUsV0FBVzlFLEVBQU9iLGlCQUFpQnNDLEVBQUksTUFBTXJDLGlCQUEwQixVQUFUd0YsRUFBbUIsY0FBZ0Isa0JBRTlRbkQsRUFBR3NELFdBQ1osQ0M1UUEsSUFBSUMsRUFnQkFDLEVBcURBQyxFQTVESixTQUFTQyxJQUlQLE9BSEtILElBQ0hBLEVBVkosV0FDRSxNQUFNaEYsRUFBUyxJQUNUbkYsRUFBVyxJQUNqQixNQUFPLENBQ0x1SyxhQUFjdkssRUFBU3dLLGlCQUFtQnhLLEVBQVN3SyxnQkFBZ0IzSCxPQUFTLG1CQUFvQjdDLEVBQVN3SyxnQkFBZ0IzSCxNQUN6SDRILFNBQVUsaUJBQWtCdEYsR0FBVUEsRUFBT3VGLGVBQWlCMUssYUFBb0JtRixFQUFPdUYsZUFFN0YsQ0FHY0MsSUFFTFIsQ0FDVCxDQWtPQSxJQUFJUyxFQUFnQixDQUNsQixFQUFBQyxDQUFHQyxFQUFRQyxFQUFTQyxHQUNsQixNQUFNQyxFQUFPNUcsS0FDYixJQUFLNEcsRUFBS0MsaUJBQW1CRCxFQUFLRSxVQUFXLE9BQU9GLEVBQ3BELEdBQXVCLG1CQUFaRixFQUF3QixPQUFPRSxFQUMxQyxNQUFNRyxFQUFTSixFQUFXLFVBQVksT0FLdEMsT0FKQUYsRUFBT08sTUFBTSxLQUFLdEosU0FBUXhCLElBQ25CMEssRUFBS0MsZ0JBQWdCM0ssS0FBUTBLLEVBQUtDLGdCQUFnQjNLLEdBQVMsSUFDaEUwSyxFQUFLQyxnQkFBZ0IzSyxHQUFPNkssR0FBUUwsRUFBUSxJQUV2Q0UsQ0FDVCxFQUNBLElBQUFLLENBQUtSLEVBQVFDLEVBQVNDLEdBQ3BCLE1BQU1DLEVBQU81RyxLQUNiLElBQUs0RyxFQUFLQyxpQkFBbUJELEVBQUtFLFVBQVcsT0FBT0YsRUFDcEQsR0FBdUIsbUJBQVpGLEVBQXdCLE9BQU9FLEVBQzFDLFNBQVNNLElBQ1BOLEVBQUtPLElBQUlWLEVBQVFTLEdBQ2JBLEVBQVlFLHVCQUNQRixFQUFZRSxlQUVyQixJQUFLLElBQUlDLEVBQU85RixVQUFVekYsT0FBUXdMLEVBQU8sSUFBSXZDLE1BQU1zQyxHQUFPRSxFQUFPLEVBQUdBLEVBQU9GLEVBQU1FLElBQy9FRCxFQUFLQyxHQUFRaEcsVUFBVWdHLEdBRXpCYixFQUFRYyxNQUFNWixFQUFNVSxFQUN0QixDQUVBLE9BREFKLEVBQVlFLGVBQWlCVixFQUN0QkUsRUFBS0osR0FBR0MsRUFBUVMsRUFBYVAsRUFDdEMsRUFDQSxLQUFBYyxDQUFNZixFQUFTQyxHQUNiLE1BQU1DLEVBQU81RyxLQUNiLElBQUs0RyxFQUFLQyxpQkFBbUJELEVBQUtFLFVBQVcsT0FBT0YsRUFDcEQsR0FBdUIsbUJBQVpGLEVBQXdCLE9BQU9FLEVBQzFDLE1BQU1HLEVBQVNKLEVBQVcsVUFBWSxPQUl0QyxPQUhJQyxFQUFLYyxtQkFBbUIzRixRQUFRMkUsR0FBVyxHQUM3Q0UsRUFBS2MsbUJBQW1CWCxHQUFRTCxHQUUzQkUsQ0FDVCxFQUNBLE1BQUFlLENBQU9qQixHQUNMLE1BQU1FLEVBQU81RyxLQUNiLElBQUs0RyxFQUFLQyxpQkFBbUJELEVBQUtFLFVBQVcsT0FBT0YsRUFDcEQsSUFBS0EsRUFBS2MsbUJBQW9CLE9BQU9kLEVBQ3JDLE1BQU1nQixFQUFRaEIsRUFBS2MsbUJBQW1CM0YsUUFBUTJFLEdBSTlDLE9BSElrQixHQUFTLEdBQ1hoQixFQUFLYyxtQkFBbUJHLE9BQU9ELEVBQU8sR0FFakNoQixDQUNULEVBQ0EsR0FBQU8sQ0FBSVYsRUFBUUMsR0FDVixNQUFNRSxFQUFPNUcsS0FDYixPQUFLNEcsRUFBS0MsaUJBQW1CRCxFQUFLRSxVQUFrQkYsRUFDL0NBLEVBQUtDLGlCQUNWSixFQUFPTyxNQUFNLEtBQUt0SixTQUFReEIsU0FDRCxJQUFad0ssRUFDVEUsRUFBS0MsZ0JBQWdCM0ssR0FBUyxHQUNyQjBLLEVBQUtDLGdCQUFnQjNLLElBQzlCMEssRUFBS0MsZ0JBQWdCM0ssR0FBT3dCLFNBQVEsQ0FBQ29LLEVBQWNGLE1BQzdDRSxJQUFpQnBCLEdBQVdvQixFQUFhVixnQkFBa0JVLEVBQWFWLGlCQUFtQlYsSUFDN0ZFLEVBQUtDLGdCQUFnQjNLLEdBQU8yTCxPQUFPRCxFQUFPLEVBQzVDLEdBRUosSUFFS2hCLEdBWjJCQSxDQWFwQyxFQUNBLElBQUFtQixHQUNFLE1BQU1uQixFQUFPNUcsS0FDYixJQUFLNEcsRUFBS0MsaUJBQW1CRCxFQUFLRSxVQUFXLE9BQU9GLEVBQ3BELElBQUtBLEVBQUtDLGdCQUFpQixPQUFPRCxFQUNsQyxJQUFJSCxFQUNBdUIsRUFDQUMsRUFDSixJQUFLLElBQUlDLEVBQVEzRyxVQUFVekYsT0FBUXdMLEVBQU8sSUFBSXZDLE1BQU1tRCxHQUFRQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ3BGYixFQUFLYSxHQUFTNUcsVUFBVTRHLEdBeUIxQixNQXZCdUIsaUJBQVpiLEVBQUssSUFBbUJ2QyxNQUFNQyxRQUFRc0MsRUFBSyxLQUNwRGIsRUFBU2EsRUFBSyxHQUNkVSxFQUFPVixFQUFLakcsTUFBTSxFQUFHaUcsRUFBS3hMLFFBQzFCbU0sRUFBVXJCLElBRVZILEVBQVNhLEVBQUssR0FBR2IsT0FDakJ1QixFQUFPVixFQUFLLEdBQUdVLEtBQ2ZDLEVBQVVYLEVBQUssR0FBR1csU0FBV3JCLEdBRS9Cb0IsRUFBS0ksUUFBUUgsSUFDT2xELE1BQU1DLFFBQVF5QixHQUFVQSxFQUFTQSxFQUFPTyxNQUFNLE1BQ3REdEosU0FBUXhCLElBQ2QwSyxFQUFLYyxvQkFBc0JkLEVBQUtjLG1CQUFtQjVMLFFBQ3JEOEssRUFBS2MsbUJBQW1CaEssU0FBUW9LLElBQzlCQSxFQUFhTixNQUFNUyxFQUFTLENBQUMvTCxLQUFVOEwsR0FBTSxJQUc3Q3BCLEVBQUtDLGlCQUFtQkQsRUFBS0MsZ0JBQWdCM0ssSUFDL0MwSyxFQUFLQyxnQkFBZ0IzSyxHQUFPd0IsU0FBUW9LLElBQ2xDQSxFQUFhTixNQUFNUyxFQUFTRCxFQUFLLEdBRXJDLElBRUtwQixDQUNULEdBNmhCRixNQUFNeUIsRUFBdUIsQ0FBQ3hGLEVBQVF5RixLQUNwQyxJQUFLekYsR0FBVUEsRUFBT2lFLFlBQWNqRSxFQUFPUSxPQUFRLE9BQ25ELE1BQ01rRixFQUFVRCxFQUFRRSxRQURJM0YsRUFBTzRGLFVBQVksZUFBaUIsSUFBSTVGLEVBQU9RLE9BQU9xRixjQUVsRixHQUFJSCxFQUFTLENBQ1gsSUFBSUksRUFBU0osRUFBUTlMLGNBQWMsSUFBSW9HLEVBQU9RLE9BQU91Rix1QkFDaERELEdBQVU5RixFQUFPNEYsWUFDaEJGLEVBQVFNLFdBQ1ZGLEVBQVNKLEVBQVFNLFdBQVdwTSxjQUFjLElBQUlvRyxFQUFPUSxPQUFPdUYsc0JBRzVEbkksdUJBQXNCLEtBQ2hCOEgsRUFBUU0sYUFDVkYsRUFBU0osRUFBUU0sV0FBV3BNLGNBQWMsSUFBSW9HLEVBQU9RLE9BQU91RixzQkFDeERELEdBQVFBLEVBQU9HLFNBQ3JCLEtBSUZILEdBQVFBLEVBQU9HLFFBQ3JCLEdBRUlDLEVBQVMsQ0FBQ2xHLEVBQVErRSxLQUN0QixJQUFLL0UsRUFBT21HLE9BQU9wQixHQUFRLE9BQzNCLE1BQU1VLEVBQVV6RixFQUFPbUcsT0FBT3BCLEdBQU9uTCxjQUFjLG9CQUMvQzZMLEdBQVNBLEVBQVEvTCxnQkFBZ0IsVUFBVSxFQUUzQzBNLEVBQVVwRyxJQUNkLElBQUtBLEdBQVVBLEVBQU9pRSxZQUFjakUsRUFBT1EsT0FBUSxPQUNuRCxJQUFJNkYsRUFBU3JHLEVBQU9RLE9BQU84RixvQkFDM0IsTUFBTWxILEVBQU1ZLEVBQU9tRyxPQUFPbE4sT0FDMUIsSUFBS21HLElBQVFpSCxHQUFVQSxFQUFTLEVBQUcsT0FDbkNBLEVBQVNsRixLQUFLRSxJQUFJZ0YsRUFBUWpILEdBQzFCLE1BQU1tSCxFQUFnRCxTQUFoQ3ZHLEVBQU9RLE9BQU8rRixjQUEyQnZHLEVBQU93Ryx1QkFBeUJyRixLQUFLc0YsS0FBS3pHLEVBQU9RLE9BQU8rRixlQUNqSEcsRUFBYzFHLEVBQU8wRyxZQUMzQixHQUFJMUcsRUFBT1EsT0FBT21HLE1BQVEzRyxFQUFPUSxPQUFPbUcsS0FBS0MsS0FBTyxFQUFHLENBQ3JELE1BQU1DLEVBQWVILEVBQ2ZJLEVBQWlCLENBQUNELEVBQWVSLEdBU3ZDLE9BUkFTLEVBQWVuRSxRQUFRVCxNQUFNNkUsS0FBSyxDQUNoQzlOLE9BQVFvTixJQUNQVyxLQUFJLENBQUNDLEVBQUdqTyxJQUNGNk4sRUFBZU4sRUFBZ0J2TixVQUV4Q2dILEVBQU9tRyxPQUFPdEwsU0FBUSxDQUFDNkssRUFBUzFNLEtBQzFCOE4sRUFBZUksU0FBU3hCLEVBQVF5QixTQUFTakIsRUFBT2xHLEVBQVFoSCxFQUFFLEdBR2xFLENBQ0EsTUFBTW9PLEVBQXVCVixFQUFjSCxFQUFnQixFQUMzRCxHQUFJdkcsRUFBT1EsT0FBTzZHLFFBQVVySCxFQUFPUSxPQUFPOEcsS0FDeEMsSUFBSyxJQUFJdE8sRUFBSTBOLEVBQWNMLEVBQVFyTixHQUFLb08sRUFBdUJmLEVBQVFyTixHQUFLLEVBQUcsQ0FDN0UsTUFBTXVPLEdBQWF2TyxFQUFJb0csRUFBTUEsR0FBT0EsR0FDaENtSSxFQUFZYixHQUFlYSxFQUFZSCxJQUFzQmxCLEVBQU9sRyxFQUFRdUgsRUFDbEYsTUFFQSxJQUFLLElBQUl2TyxFQUFJbUksS0FBS0MsSUFBSXNGLEVBQWNMLEVBQVEsR0FBSXJOLEdBQUttSSxLQUFLRSxJQUFJK0YsRUFBdUJmLEVBQVFqSCxFQUFNLEdBQUlwRyxHQUFLLEVBQ3RHQSxJQUFNME4sSUFBZ0IxTixFQUFJb08sR0FBd0JwTyxFQUFJME4sSUFDeERSLEVBQU9sRyxFQUFRaEgsRUFHckIsRUEwSUYsSUFBSXdPLEVBQVMsQ0FDWEMsV0FqdUJGLFdBQ0UsTUFBTXpILEVBQVM3QyxLQUNmLElBQUl1SyxFQUNBQyxFQUNKLE1BQU1qSSxFQUFLTSxFQUFPTixHQUVoQmdJLE9BRGlDLElBQXhCMUgsRUFBT1EsT0FBT2tILE9BQWlELE9BQXhCMUgsRUFBT1EsT0FBT2tILE1BQ3REMUgsRUFBT1EsT0FBT2tILE1BRWRoSSxFQUFHa0ksWUFHWEQsT0FEa0MsSUFBekIzSCxFQUFPUSxPQUFPbUgsUUFBbUQsT0FBekIzSCxFQUFPUSxPQUFPbUgsT0FDdEQzSCxFQUFPUSxPQUFPbUgsT0FFZGpJLEVBQUdtSSxhQUVBLElBQVZILEdBQWUxSCxFQUFPOEgsZ0JBQTZCLElBQVhILEdBQWdCM0gsRUFBTytILGVBS25FTCxFQUFRQSxFQUFRTSxTQUFTNUYsRUFBYTFDLEVBQUksaUJBQW1CLEVBQUcsSUFBTXNJLFNBQVM1RixFQUFhMUMsRUFBSSxrQkFBb0IsRUFBRyxJQUN2SGlJLEVBQVNBLEVBQVNLLFNBQVM1RixFQUFhMUMsRUFBSSxnQkFBa0IsRUFBRyxJQUFNc0ksU0FBUzVGLEVBQWExQyxFQUFJLG1CQUFxQixFQUFHLElBQ3JIdUksT0FBT0MsTUFBTVIsS0FBUUEsRUFBUSxHQUM3Qk8sT0FBT0MsTUFBTVAsS0FBU0EsRUFBUyxHQUNuQ2xOLE9BQU8wTixPQUFPbkksRUFBUSxDQUNwQjBILFFBQ0FDLFNBQ0E5RSxLQUFNN0MsRUFBTzhILGVBQWlCSixFQUFRQyxJQUUxQyxFQXFzQkVTLGFBbnNCRixXQUNFLE1BQU1wSSxFQUFTN0MsS0FDZixTQUFTa0wsRUFBa0JDLEdBQ3pCLE9BQUl0SSxFQUFPOEgsZUFDRlEsRUFHRixDQUNMLE1BQVMsU0FDVCxhQUFjLGNBQ2QsaUJBQWtCLGVBQ2xCLGNBQWUsYUFDZixlQUFnQixnQkFDaEIsZUFBZ0IsY0FDaEIsZ0JBQWlCLGlCQUNqQixZQUFlLGdCQUNmQSxFQUNKLENBQ0EsU0FBU0MsRUFBMEIxSixFQUFNMkosR0FDdkMsT0FBT3pGLFdBQVdsRSxFQUFLeEIsaUJBQWlCZ0wsRUFBa0JHLEtBQVcsRUFDdkUsQ0FDQSxNQUFNaEksRUFBU1IsRUFBT1EsUUFDaEIsVUFDSkUsRUFBUyxTQUNUK0gsRUFDQTVGLEtBQU02RixFQUNOQyxhQUFjQyxFQUFHLFNBQ2pCQyxHQUNFN0ksRUFDRThJLEVBQVk5SSxFQUFPK0ksU0FBV3ZJLEVBQU91SSxRQUFRQyxRQUM3Q0MsRUFBdUJILEVBQVk5SSxFQUFPK0ksUUFBUTVDLE9BQU9sTixPQUFTK0csRUFBT21HLE9BQU9sTixPQUNoRmtOLEVBQVMsRUFBZ0JzQyxFQUFVLElBQUl6SSxFQUFPUSxPQUFPcUYsNEJBQ3JEcUQsRUFBZUosRUFBWTlJLEVBQU8rSSxRQUFRNUMsT0FBT2xOLE9BQVNrTixFQUFPbE4sT0FDdkUsSUFBSWtRLEVBQVcsR0FDZixNQUFNQyxFQUFhLEdBQ2JDLEVBQWtCLEdBQ3hCLElBQUlDLEVBQWU5SSxFQUFPK0ksbUJBQ0UsbUJBQWpCRCxJQUNUQSxFQUFlOUksRUFBTytJLG1CQUFtQmhMLEtBQUt5QixJQUVoRCxJQUFJd0osRUFBY2hKLEVBQU9pSixrQkFDRSxtQkFBaEJELElBQ1RBLEVBQWNoSixFQUFPaUosa0JBQWtCbEwsS0FBS3lCLElBRTlDLE1BQU0wSixFQUF5QjFKLEVBQU9tSixTQUFTbFEsT0FDekMwUSxFQUEyQjNKLEVBQU9vSixXQUFXblEsT0FDbkQsSUFBSTJRLEVBQWVwSixFQUFPb0osYUFDdEJDLEdBQWlCUCxFQUNqQlEsRUFBZ0IsRUFDaEIvRSxFQUFRLEVBQ1osUUFBMEIsSUFBZjJELEVBQ1QsT0FFMEIsaUJBQWpCa0IsR0FBNkJBLEVBQWExSyxRQUFRLE1BQVEsRUFDbkUwSyxFQUFlN0csV0FBVzZHLEVBQWFHLFFBQVEsSUFBSyxLQUFPLElBQU1yQixFQUNoQyxpQkFBakJrQixJQUNoQkEsRUFBZTdHLFdBQVc2RyxJQUU1QjVKLEVBQU9nSyxhQUFlSixFQUd0QnpELEVBQU90TCxTQUFRNkssSUFDVGtELEVBQ0ZsRCxFQUFRL0osTUFBTXNPLFdBQWEsR0FFM0J2RSxFQUFRL0osTUFBTXVPLFlBQWMsR0FFOUJ4RSxFQUFRL0osTUFBTXdPLGFBQWUsR0FDN0J6RSxFQUFRL0osTUFBTXlPLFVBQVksRUFBRSxJQUkxQjVKLEVBQU82SixnQkFBa0I3SixFQUFPOEosVUFDbEMsRUFBZTVKLEVBQVcsa0NBQW1DLElBQzdELEVBQWVBLEVBQVcsaUNBQWtDLEtBRTlELE1BQU02SixFQUFjL0osRUFBT21HLE1BQVFuRyxFQUFPbUcsS0FBS0MsS0FBTyxHQUFLNUcsRUFBTzJHLEtBTWxFLElBQUk2RCxFQUxBRCxHQUNGdkssRUFBTzJHLEtBQUs4RCxXQUFXdkIsR0FLekIsTUFBTXdCLEVBQWdELFNBQXpCbEssRUFBTytGLGVBQTRCL0YsRUFBT21LLGFBQWVsUSxPQUFPRyxLQUFLNEYsRUFBT21LLGFBQWExTCxRQUFPbkUsUUFDbkUsSUFBMUMwRixFQUFPbUssWUFBWTdQLEdBQUt5TCxnQkFDckN0TixPQUFTLEVBQ1osSUFBSyxJQUFJRCxFQUFJLEVBQUdBLEVBQUlrUSxFQUFjbFEsR0FBSyxFQUFHLENBRXhDLElBQUk0UixFQUtKLEdBTkFKLEVBQVksRUFFUnJFLEVBQU9uTixLQUFJNFIsRUFBUXpFLEVBQU9uTixJQUMxQnVSLEdBQ0Z2SyxFQUFPMkcsS0FBS2tFLFlBQVk3UixFQUFHNFIsRUFBTzFCLEVBQWNiLElBRTlDbEMsRUFBT25OLElBQXlDLFNBQW5Db0osRUFBYXdJLEVBQU8sV0FBckMsQ0FFQSxHQUE2QixTQUF6QnBLLEVBQU8rRixjQUEwQixDQUMvQm1FLElBQ0Z2RSxFQUFPbk4sR0FBRzJDLE1BQU0wTSxFQUFrQixVQUFZLElBRWhELE1BQU15QyxFQUFjMU4saUJBQWlCd04sR0FDL0JHLEVBQW1CSCxFQUFNalAsTUFBTXFQLFVBQy9CQyxFQUF5QkwsRUFBTWpQLE1BQU11UCxnQkFPM0MsR0FOSUgsSUFDRkgsRUFBTWpQLE1BQU1xUCxVQUFZLFFBRXRCQyxJQUNGTCxFQUFNalAsTUFBTXVQLGdCQUFrQixRQUU1QjFLLEVBQU8ySyxhQUNUWCxFQUFZeEssRUFBTzhILGVBQWlCbEYsRUFBaUJnSSxFQUFPLFNBQVMsR0FBUWhJLEVBQWlCZ0ksRUFBTyxVQUFVLE9BQzFHLENBRUwsTUFBTWxELEVBQVFhLEVBQTBCdUMsRUFBYSxTQUMvQ00sRUFBYzdDLEVBQTBCdUMsRUFBYSxnQkFDckRPLEVBQWU5QyxFQUEwQnVDLEVBQWEsaUJBQ3REYixFQUFhMUIsRUFBMEJ1QyxFQUFhLGVBQ3BEWixFQUFjM0IsRUFBMEJ1QyxFQUFhLGdCQUNyRFEsRUFBWVIsRUFBWXpOLGlCQUFpQixjQUMvQyxHQUFJaU8sR0FBMkIsZUFBZEEsRUFDZmQsRUFBWTlDLEVBQVF1QyxFQUFhQyxNQUM1QixDQUNMLE1BQU0sWUFDSnRDLEVBQVcsWUFDWDVFLEdBQ0U0SCxFQUNKSixFQUFZOUMsRUFBUTBELEVBQWNDLEVBQWVwQixFQUFhQyxHQUFlbEgsRUFBYzRFLEVBQzdGLENBQ0YsQ0FDSW1ELElBQ0ZILEVBQU1qUCxNQUFNcVAsVUFBWUQsR0FFdEJFLElBQ0ZMLEVBQU1qUCxNQUFNdVAsZ0JBQWtCRCxHQUU1QnpLLEVBQU8ySyxlQUFjWCxFQUFZckosS0FBS29LLE1BQU1mLEdBQ2xELE1BQ0VBLEdBQWE5QixHQUFjbEksRUFBTytGLGNBQWdCLEdBQUtxRCxHQUFnQnBKLEVBQU8rRixjQUMxRS9GLEVBQU8ySyxlQUFjWCxFQUFZckosS0FBS29LLE1BQU1mLElBQzVDckUsRUFBT25OLEtBQ1RtTixFQUFPbk4sR0FBRzJDLE1BQU0wTSxFQUFrQixVQUFZLEdBQUdtQyxPQUdqRHJFLEVBQU9uTixLQUNUbU4sRUFBT25OLEdBQUd3UyxnQkFBa0JoQixHQUU5Qm5CLEVBQWdCMUcsS0FBSzZILEdBQ2pCaEssRUFBTzZKLGdCQUNUUixFQUFnQkEsRUFBZ0JXLEVBQVksRUFBSVYsRUFBZ0IsRUFBSUYsRUFDOUMsSUFBbEJFLEdBQTZCLElBQU45USxJQUFTNlEsRUFBZ0JBLEVBQWdCbkIsRUFBYSxFQUFJa0IsR0FDM0UsSUFBTjVRLElBQVM2USxFQUFnQkEsRUFBZ0JuQixFQUFhLEVBQUlrQixHQUMxRHpJLEtBQUtzSyxJQUFJNUIsR0FBaUIsT0FBVUEsRUFBZ0IsR0FDcERySixFQUFPMkssZUFBY3RCLEVBQWdCMUksS0FBS29LLE1BQU0xQixJQUNoRDlFLEVBQVF2RSxFQUFPa0wsZ0JBQW1CLEdBQUd2QyxFQUFTeEcsS0FBS2tILEdBQ3ZEVCxFQUFXekcsS0FBS2tILEtBRVpySixFQUFPMkssZUFBY3RCLEVBQWdCMUksS0FBS29LLE1BQU0xQixLQUMvQzlFLEVBQVE1RCxLQUFLRSxJQUFJckIsRUFBT1EsT0FBT21MLG1CQUFvQjVHLElBQVUvRSxFQUFPUSxPQUFPa0wsZ0JBQW1CLEdBQUd2QyxFQUFTeEcsS0FBS2tILEdBQ3BIVCxFQUFXekcsS0FBS2tILEdBQ2hCQSxFQUFnQkEsRUFBZ0JXLEVBQVlaLEdBRTlDNUosRUFBT2dLLGFBQWVRLEVBQVlaLEVBQ2xDRSxFQUFnQlUsRUFDaEJ6RixHQUFTLENBckUyRCxDQXNFdEUsQ0FhQSxHQVpBL0UsRUFBT2dLLFlBQWM3SSxLQUFLQyxJQUFJcEIsRUFBT2dLLFlBQWF0QixHQUFjYyxFQUM1RFosR0FBT0MsSUFBK0IsVUFBbEJySSxFQUFPb0wsUUFBd0MsY0FBbEJwTCxFQUFPb0wsVUFDMURsTCxFQUFVL0UsTUFBTStMLE1BQVEsR0FBRzFILEVBQU9nSyxZQUFjSixPQUU5Q3BKLEVBQU9xTCxpQkFDVG5MLEVBQVUvRSxNQUFNME0sRUFBa0IsVUFBWSxHQUFHckksRUFBT2dLLFlBQWNKLE9BRXBFVyxHQUNGdkssRUFBTzJHLEtBQUttRixrQkFBa0J0QixFQUFXckIsRUFBVWQsSUFJaEQ3SCxFQUFPNkosZUFBZ0IsQ0FDMUIsTUFBTTBCLEVBQWdCLEdBQ3RCLElBQUssSUFBSS9TLEVBQUksRUFBR0EsRUFBSW1RLEVBQVNsUSxPQUFRRCxHQUFLLEVBQUcsQ0FDM0MsSUFBSWdULEVBQWlCN0MsRUFBU25RLEdBQzFCd0gsRUFBTzJLLGVBQWNhLEVBQWlCN0ssS0FBS29LLE1BQU1TLElBQ2pEN0MsRUFBU25RLElBQU1nSCxFQUFPZ0ssWUFBY3RCLEdBQ3RDcUQsRUFBY3BKLEtBQUtxSixFQUV2QixDQUNBN0MsRUFBVzRDLEVBQ1A1SyxLQUFLb0ssTUFBTXZMLEVBQU9nSyxZQUFjdEIsR0FBY3ZILEtBQUtvSyxNQUFNcEMsRUFBU0EsRUFBU2xRLE9BQVMsSUFBTSxHQUM1RmtRLEVBQVN4RyxLQUFLM0MsRUFBT2dLLFlBQWN0QixFQUV2QyxDQUNBLEdBQUlJLEdBQWF0SSxFQUFPOEcsS0FBTSxDQUM1QixNQUFNekUsRUFBT3dHLEVBQWdCLEdBQUtPLEVBQ2xDLEdBQUlwSixFQUFPa0wsZUFBaUIsRUFBRyxDQUM3QixNQUFNTyxFQUFTOUssS0FBS3NGLE1BQU16RyxFQUFPK0ksUUFBUW1ELGFBQWVsTSxFQUFPK0ksUUFBUW9ELGFBQWUzTCxFQUFPa0wsZ0JBQ3ZGVSxFQUFZdkosRUFBT3JDLEVBQU9rTCxlQUNoQyxJQUFLLElBQUkxUyxFQUFJLEVBQUdBLEVBQUlpVCxFQUFRalQsR0FBSyxFQUMvQm1RLEVBQVN4RyxLQUFLd0csRUFBU0EsRUFBU2xRLE9BQVMsR0FBS21ULEVBRWxELENBQ0EsSUFBSyxJQUFJcFQsRUFBSSxFQUFHQSxFQUFJZ0gsRUFBTytJLFFBQVFtRCxhQUFlbE0sRUFBTytJLFFBQVFvRCxZQUFhblQsR0FBSyxFQUNuRCxJQUExQndILEVBQU9rTCxnQkFDVHZDLEVBQVN4RyxLQUFLd0csRUFBU0EsRUFBU2xRLE9BQVMsR0FBSzRKLEdBRWhEdUcsRUFBV3pHLEtBQUt5RyxFQUFXQSxFQUFXblEsT0FBUyxHQUFLNEosR0FDcEQ3QyxFQUFPZ0ssYUFBZW5ILENBRTFCLENBRUEsR0FEd0IsSUFBcEJzRyxFQUFTbFEsU0FBY2tRLEVBQVcsQ0FBQyxJQUNsQixJQUFqQlMsRUFBb0IsQ0FDdEIsTUFBTTlPLEVBQU1rRixFQUFPOEgsZ0JBQWtCYyxFQUFNLGFBQWVQLEVBQWtCLGVBQzVFbEMsRUFBT2xILFFBQU8sQ0FBQ2dJLEVBQUdvRixNQUNYN0wsRUFBTzhKLFVBQVc5SixFQUFPOEcsT0FDMUIrRSxJQUFlbEcsRUFBT2xOLE9BQVMsSUFJbEM0QixTQUFRNkssSUFDVEEsRUFBUS9KLE1BQU1iLEdBQU8sR0FBRzhPLEtBQWdCLEdBRTVDLENBQ0EsR0FBSXBKLEVBQU82SixnQkFBa0I3SixFQUFPOEwscUJBQXNCLENBQ3hELElBQUlDLEVBQWdCLEVBQ3BCbEQsRUFBZ0J4TyxTQUFRMlIsSUFDdEJELEdBQWlCQyxHQUFrQjVDLEdBQWdCLEVBQUUsSUFFdkQyQyxHQUFpQjNDLEVBQ2pCLE1BQU02QyxFQUFVRixFQUFnQjdELEVBQ2hDUyxFQUFXQSxFQUFTbkMsS0FBSTBGLEdBQ2xCQSxHQUFRLEdBQVdwRCxFQUNuQm9ELEVBQU9ELEVBQWdCQSxFQUFVakQsRUFDOUJrRCxHQUVYLENBQ0EsR0FBSWxNLEVBQU9tTSx5QkFBMEIsQ0FDbkMsSUFBSUosRUFBZ0IsRUFLcEIsR0FKQWxELEVBQWdCeE8sU0FBUTJSLElBQ3RCRCxHQUFpQkMsR0FBa0I1QyxHQUFnQixFQUFFLElBRXZEMkMsR0FBaUIzQyxFQUNiMkMsRUFBZ0I3RCxFQUFZLENBQzlCLE1BQU1rRSxHQUFtQmxFLEVBQWE2RCxHQUFpQixFQUN2RHBELEVBQVN0TyxTQUFRLENBQUM2UixFQUFNRyxLQUN0QjFELEVBQVMwRCxHQUFhSCxFQUFPRSxDQUFlLElBRTlDeEQsRUFBV3ZPLFNBQVEsQ0FBQzZSLEVBQU1HLEtBQ3hCekQsRUFBV3lELEdBQWFILEVBQU9FLENBQWUsR0FFbEQsQ0FDRixDQU9BLEdBTkFuUyxPQUFPME4sT0FBT25JLEVBQVEsQ0FDcEJtRyxTQUNBZ0QsV0FDQUMsYUFDQUMsb0JBRUU3SSxFQUFPNkosZ0JBQWtCN0osRUFBTzhKLFVBQVk5SixFQUFPOEwscUJBQXNCLENBQzNFLEVBQWU1TCxFQUFXLG1DQUF1Q3lJLEVBQVMsR0FBYixNQUM3RCxFQUFlekksRUFBVyxpQ0FBcUNWLEVBQU82QyxLQUFPLEVBQUl3RyxFQUFnQkEsRUFBZ0JwUSxPQUFTLEdBQUssRUFBbkUsTUFDNUQsTUFBTTZULEdBQWlCOU0sRUFBT21KLFNBQVMsR0FDakM0RCxHQUFtQi9NLEVBQU9vSixXQUFXLEdBQzNDcEosRUFBT21KLFNBQVduSixFQUFPbUosU0FBU25DLEtBQUlnRyxHQUFLQSxFQUFJRixJQUMvQzlNLEVBQU9vSixXQUFhcEosRUFBT29KLFdBQVdwQyxLQUFJZ0csR0FBS0EsRUFBSUQsR0FDckQsQ0FjQSxHQWJJN0QsSUFBaUJELEdBQ25CakosRUFBT2tGLEtBQUssc0JBRVZpRSxFQUFTbFEsU0FBV3lRLElBQ2xCMUosRUFBT1EsT0FBT3lNLGVBQWVqTixFQUFPa04sZ0JBQ3hDbE4sRUFBT2tGLEtBQUsseUJBRVZrRSxFQUFXblEsU0FBVzBRLEdBQ3hCM0osRUFBT2tGLEtBQUssMEJBRVYxRSxFQUFPMk0scUJBQ1RuTixFQUFPb04sdUJBRUp0RSxHQUFjdEksRUFBTzhKLFNBQThCLFVBQWxCOUosRUFBT29MLFFBQXdDLFNBQWxCcEwsRUFBT29MLFFBQW9CLENBQzVGLE1BQU15QixFQUFzQixHQUFHN00sRUFBTzhNLHdDQUNoQ0MsRUFBNkJ2TixFQUFPTixHQUFHN0YsVUFBVTJULFNBQVNILEdBQzVEbkUsR0FBZ0IxSSxFQUFPaU4sd0JBQ3BCRixHQUE0QnZOLEVBQU9OLEdBQUc3RixVQUFVb0ksSUFBSW9MLEdBQ2hERSxHQUNUdk4sRUFBT04sR0FBRzdGLFVBQVVvTSxPQUFPb0gsRUFFL0IsQ0FDRixFQXVhRUssaUJBcmFGLFNBQTBCak4sR0FDeEIsTUFBTVQsRUFBUzdDLEtBQ1R3USxFQUFlLEdBQ2Y3RSxFQUFZOUksRUFBTytJLFNBQVcvSSxFQUFPUSxPQUFPdUksUUFBUUMsUUFDMUQsSUFDSWhRLEVBREE0VSxFQUFZLEVBRUssaUJBQVZuTixFQUNUVCxFQUFPNk4sY0FBY3BOLElBQ0YsSUFBVkEsR0FDVFQsRUFBTzZOLGNBQWM3TixFQUFPUSxPQUFPQyxPQUVyQyxNQUFNcU4sRUFBa0IvSSxHQUNsQitELEVBQ0s5SSxFQUFPbUcsT0FBT25HLEVBQU8rTixvQkFBb0JoSixJQUUzQy9FLEVBQU9tRyxPQUFPcEIsR0FHdkIsR0FBb0MsU0FBaEMvRSxFQUFPUSxPQUFPK0YsZUFBNEJ2RyxFQUFPUSxPQUFPK0YsY0FBZ0IsRUFDMUUsR0FBSXZHLEVBQU9RLE9BQU82SixnQkFDZnJLLEVBQU9nTyxlQUFpQixJQUFJblQsU0FBUStQLElBQ25DK0MsRUFBYWhMLEtBQUtpSSxFQUFNLFNBRzFCLElBQUs1UixFQUFJLEVBQUdBLEVBQUltSSxLQUFLc0YsS0FBS3pHLEVBQU9RLE9BQU8rRixlQUFnQnZOLEdBQUssRUFBRyxDQUM5RCxNQUFNK0wsRUFBUS9FLEVBQU8wRyxZQUFjMU4sRUFDbkMsR0FBSStMLEVBQVEvRSxFQUFPbUcsT0FBT2xOLFNBQVc2UCxFQUFXLE1BQ2hENkUsRUFBYWhMLEtBQUttTCxFQUFnQi9JLEdBQ3BDLE1BR0Y0SSxFQUFhaEwsS0FBS21MLEVBQWdCOU4sRUFBTzBHLGNBSTNDLElBQUsxTixFQUFJLEVBQUdBLEVBQUkyVSxFQUFhMVUsT0FBUUQsR0FBSyxFQUN4QyxRQUErQixJQUFwQjJVLEVBQWEzVSxHQUFvQixDQUMxQyxNQUFNMk8sRUFBU2dHLEVBQWEzVSxHQUFHaVYsYUFDL0JMLEVBQVlqRyxFQUFTaUcsRUFBWWpHLEVBQVNpRyxDQUM1QyxFQUlFQSxHQUEyQixJQUFkQSxLQUFpQjVOLEVBQU9VLFVBQVUvRSxNQUFNZ00sT0FBUyxHQUFHaUcsTUFDdkUsRUEwWEVSLG1CQXhYRixXQUNFLE1BQU1wTixFQUFTN0MsS0FDVGdKLEVBQVNuRyxFQUFPbUcsT0FFaEIrSCxFQUFjbE8sRUFBTzRGLFVBQVk1RixFQUFPOEgsZUFBaUI5SCxFQUFPVSxVQUFVeU4sV0FBYW5PLEVBQU9VLFVBQVUwTixVQUFZLEVBQzFILElBQUssSUFBSXBWLEVBQUksRUFBR0EsRUFBSW1OLEVBQU9sTixPQUFRRCxHQUFLLEVBQ3RDbU4sRUFBT25OLEdBQUdxVixtQkFBcUJyTyxFQUFPOEgsZUFBaUIzQixFQUFPbk4sR0FBR21WLFdBQWFoSSxFQUFPbk4sR0FBR29WLFdBQWFGLEVBQWNsTyxFQUFPc08sdUJBRTlILEVBaVhFQyxxQkEvV0YsU0FBOEJuTyxRQUNWLElBQWRBLElBQ0ZBLEVBQVlqRCxNQUFRQSxLQUFLaUQsV0FBYSxHQUV4QyxNQUFNSixFQUFTN0MsS0FDVHFELEVBQVNSLEVBQU9RLFFBQ2hCLE9BQ0oyRixFQUNBd0MsYUFBY0MsRUFBRyxTQUNqQk8sR0FDRW5KLEVBQ0osR0FBc0IsSUFBbEJtRyxFQUFPbE4sT0FBYyxZQUNrQixJQUFoQ2tOLEVBQU8sR0FBR2tJLG1CQUFtQ3JPLEVBQU9vTixxQkFDL0QsSUFBSW9CLEdBQWdCcE8sRUFDaEJ3SSxJQUFLNEYsRUFBZXBPLEdBR3hCK0YsRUFBT3RMLFNBQVE2SyxJQUNiQSxFQUFRN0wsVUFBVW9NLE9BQU96RixFQUFPaU8sa0JBQWtCLElBRXBEek8sRUFBTzBPLHFCQUF1QixHQUM5QjFPLEVBQU9nTyxjQUFnQixHQUN2QixJQUFJcEUsRUFBZXBKLEVBQU9vSixhQUNFLGlCQUFqQkEsR0FBNkJBLEVBQWExSyxRQUFRLE1BQVEsRUFDbkUwSyxFQUFlN0csV0FBVzZHLEVBQWFHLFFBQVEsSUFBSyxLQUFPLElBQU0vSixFQUFPNkMsS0FDdkMsaUJBQWpCK0csSUFDaEJBLEVBQWU3RyxXQUFXNkcsSUFFNUIsSUFBSyxJQUFJNVEsRUFBSSxFQUFHQSxFQUFJbU4sRUFBT2xOLE9BQVFELEdBQUssRUFBRyxDQUN6QyxNQUFNNFIsRUFBUXpFLEVBQU9uTixHQUNyQixJQUFJMlYsRUFBYy9ELEVBQU15RCxrQkFDcEI3TixFQUFPOEosU0FBVzlKLEVBQU82SixpQkFDM0JzRSxHQUFleEksRUFBTyxHQUFHa0ksbUJBRTNCLE1BQU1PLEdBQWlCSixHQUFnQmhPLEVBQU82SixlQUFpQnJLLEVBQU82TyxlQUFpQixHQUFLRixJQUFnQi9ELEVBQU1ZLGdCQUFrQjVCLEdBQzlIa0YsR0FBeUJOLEVBQWVyRixFQUFTLElBQU0zSSxFQUFPNkosZUFBaUJySyxFQUFPNk8sZUFBaUIsR0FBS0YsSUFBZ0IvRCxFQUFNWSxnQkFBa0I1QixHQUNwSm1GLElBQWdCUCxFQUFlRyxHQUMvQkssRUFBYUQsRUFBYy9PLEVBQU9xSixnQkFBZ0JyUSxJQUN0QytWLEdBQWUsR0FBS0EsRUFBYy9PLEVBQU82QyxLQUFPLEdBQUttTSxFQUFhLEdBQUtBLEdBQWNoUCxFQUFPNkMsTUFBUWtNLEdBQWUsR0FBS0MsR0FBY2hQLEVBQU82QyxRQUU3SjdDLEVBQU9nTyxjQUFjckwsS0FBS2lJLEdBQzFCNUssRUFBTzBPLHFCQUFxQi9MLEtBQUszSixHQUNqQ21OLEVBQU9uTixHQUFHYSxVQUFVb0ksSUFBSXpCLEVBQU9pTyxvQkFFakM3RCxFQUFNMUosU0FBVzBILEdBQU9nRyxFQUFnQkEsRUFDeENoRSxFQUFNcUUsaUJBQW1CckcsR0FBT2tHLEVBQXdCQSxDQUMxRCxDQUNGLEVBaVVFSSxlQS9URixTQUF3QjlPLEdBQ3RCLE1BQU1KLEVBQVM3QyxLQUNmLFFBQXlCLElBQWRpRCxFQUEyQixDQUNwQyxNQUFNK08sRUFBYW5QLEVBQU8ySSxjQUFnQixFQUFJLEVBRTlDdkksRUFBWUosR0FBVUEsRUFBT0ksV0FBYUosRUFBT0ksVUFBWStPLEdBQWMsQ0FDN0UsQ0FDQSxNQUFNM08sRUFBU1IsRUFBT1EsT0FDaEI0TyxFQUFpQnBQLEVBQU9xUCxlQUFpQnJQLEVBQU82TyxlQUN0RCxJQUFJLFNBQ0YzTixFQUFRLFlBQ1JvTyxFQUFXLE1BQ1hDLEVBQUssYUFDTEMsR0FDRXhQLEVBQ0osTUFBTXlQLEVBQWVILEVBQ2ZJLEVBQVNILEVBQ2YsR0FBdUIsSUFBbkJILEVBQ0ZsTyxFQUFXLEVBQ1hvTyxHQUFjLEVBQ2RDLEdBQVEsTUFDSCxDQUNMck8sR0FBWWQsRUFBWUosRUFBTzZPLGdCQUFrQk8sRUFDakQsTUFBTU8sRUFBcUJ4TyxLQUFLc0ssSUFBSXJMLEVBQVlKLEVBQU82TyxnQkFBa0IsRUFDbkVlLEVBQWV6TyxLQUFLc0ssSUFBSXJMLEVBQVlKLEVBQU9xUCxnQkFBa0IsRUFDbkVDLEVBQWNLLEdBQXNCek8sR0FBWSxFQUNoRHFPLEVBQVFLLEdBQWdCMU8sR0FBWSxFQUNoQ3lPLElBQW9Cek8sRUFBVyxHQUMvQjBPLElBQWMxTyxFQUFXLEVBQy9CLENBQ0EsR0FBSVYsRUFBTzhHLEtBQU0sQ0FDZixNQUFNdUksRUFBa0I3UCxFQUFPK04sb0JBQW9CLEdBQzdDK0IsRUFBaUI5UCxFQUFPK04sb0JBQW9CL04sRUFBT21HLE9BQU9sTixPQUFTLEdBQ25FOFcsRUFBc0IvUCxFQUFPb0osV0FBV3lHLEdBQ3hDRyxFQUFxQmhRLEVBQU9vSixXQUFXMEcsR0FDdkNHLEVBQWVqUSxFQUFPb0osV0FBV3BKLEVBQU9vSixXQUFXblEsT0FBUyxHQUM1RGlYLEVBQWUvTyxLQUFLc0ssSUFBSXJMLEdBRTVCb1AsRUFERVUsR0FBZ0JILEdBQ0ZHLEVBQWVILEdBQXVCRSxHQUV0Q0MsRUFBZUQsRUFBZUQsR0FBc0JDLEVBRWxFVCxFQUFlLElBQUdBLEdBQWdCLEVBQ3hDLENBQ0EvVSxPQUFPME4sT0FBT25JLEVBQVEsQ0FDcEJrQixXQUNBc08sZUFDQUYsY0FDQUMsV0FFRS9PLEVBQU8yTSxxQkFBdUIzTSxFQUFPNkosZ0JBQWtCN0osRUFBTzJQLGFBQVluUSxFQUFPdU8scUJBQXFCbk8sR0FDdEdrUCxJQUFnQkcsR0FDbEJ6UCxFQUFPa0YsS0FBSyx5QkFFVnFLLElBQVVHLEdBQ1oxUCxFQUFPa0YsS0FBSyxvQkFFVnVLLElBQWlCSCxHQUFlSSxJQUFXSCxJQUM3Q3ZQLEVBQU9rRixLQUFLLFlBRWRsRixFQUFPa0YsS0FBSyxXQUFZaEUsRUFDMUIsRUFtUUVrUCxvQkFqUUYsV0FDRSxNQUFNcFEsRUFBUzdDLE1BQ1QsT0FDSmdKLEVBQU0sT0FDTjNGLEVBQU0sU0FDTmlJLEVBQVEsWUFDUi9CLEdBQ0UxRyxFQUNFOEksRUFBWTlJLEVBQU8rSSxTQUFXdkksRUFBT3VJLFFBQVFDLFFBQzdDcUgsRUFBbUJ4TyxHQUNoQixFQUFnQjRHLEVBQVUsSUFBSWpJLEVBQU9xRixhQUFhaEUsa0JBQXlCQSxLQUFZLEdBS2hHLElBQUl5TyxFQUNKLEdBSkFuSyxFQUFPdEwsU0FBUTZLLElBQ2JBLEVBQVE3TCxVQUFVb00sT0FBT3pGLEVBQU8rUCxpQkFBa0IvUCxFQUFPZ1EsZUFBZ0JoUSxFQUFPaVEsZUFBZSxJQUc3RjNILEVBQ0YsR0FBSXRJLEVBQU84RyxLQUFNLENBQ2YsSUFBSStFLEVBQWEzRixFQUFjMUcsRUFBTytJLFFBQVFtRCxhQUMxQ0csRUFBYSxJQUFHQSxFQUFhck0sRUFBTytJLFFBQVE1QyxPQUFPbE4sT0FBU29ULEdBQzVEQSxHQUFjck0sRUFBTytJLFFBQVE1QyxPQUFPbE4sU0FBUW9ULEdBQWNyTSxFQUFPK0ksUUFBUTVDLE9BQU9sTixRQUNwRnFYLEVBQWNELEVBQWlCLDZCQUE2QmhFLE1BQzlELE1BQ0VpRSxFQUFjRCxFQUFpQiw2QkFBNkIzSixZQUc5RDRKLEVBQWNuSyxFQUFPTyxHQUV2QixHQUFJNEosRUFBYSxDQUVmQSxFQUFZelcsVUFBVW9JLElBQUl6QixFQUFPK1Asa0JBR2pDLElBQUlHLEVEM29CUixTQUF3QmhSLEVBQUltQyxHQUMxQixNQUFNOE8sRUFBVSxHQUNoQixLQUFPalIsRUFBR2tSLG9CQUFvQixDQUM1QixNQUFNQyxFQUFPblIsRUFBR2tSLG1CQUNaL08sRUFDRWdQLEVBQUsvTyxRQUFRRCxJQUFXOE8sRUFBUWhPLEtBQUtrTyxHQUNwQ0YsRUFBUWhPLEtBQUtrTyxHQUNwQm5SLEVBQUttUixDQUNQLENBQ0EsT0FBT0YsQ0FDVCxDQ2lvQm9CRyxDQUFlUixFQUFhLElBQUk5UCxFQUFPcUYsNEJBQTRCLEdBQy9FckYsRUFBTzhHLE9BQVNvSixJQUNsQkEsRUFBWXZLLEVBQU8sSUFFakJ1SyxHQUNGQSxFQUFVN1csVUFBVW9JLElBQUl6QixFQUFPZ1EsZ0JBR2pDLElBQUlPLEVEOXBCUixTQUF3QnJSLEVBQUltQyxHQUMxQixNQUFNbVAsRUFBVSxHQUNoQixLQUFPdFIsRUFBR3VSLHdCQUF3QixDQUNoQyxNQUFNQyxFQUFPeFIsRUFBR3VSLHVCQUNacFAsRUFDRXFQLEVBQUtwUCxRQUFRRCxJQUFXbVAsRUFBUXJPLEtBQUt1TyxHQUNwQ0YsRUFBUXJPLEtBQUt1TyxHQUNwQnhSLEVBQUt3UixDQUNQLENBQ0EsT0FBT0YsQ0FDVCxDQ29wQm9CRyxDQUFlYixFQUFhLElBQUk5UCxFQUFPcUYsNEJBQTRCLEdBQy9FckYsRUFBTzhHLE1BQXVCLEtBQWR5SixJQUNsQkEsRUFBWTVLLEVBQU9BLEVBQU9sTixPQUFTLElBRWpDOFgsR0FDRkEsRUFBVWxYLFVBQVVvSSxJQUFJekIsRUFBT2lRLGVBRW5DLENBQ0F6USxFQUFPb1IsbUJBQ1QsRUFnTkVDLGtCQXZIRixTQUEyQkMsR0FDekIsTUFBTXRSLEVBQVM3QyxLQUNUaUQsRUFBWUosRUFBTzJJLGFBQWUzSSxFQUFPSSxXQUFhSixFQUFPSSxXQUM3RCxTQUNKK0ksRUFBUSxPQUNSM0ksRUFDQWtHLFlBQWE2SyxFQUNiaEssVUFBV2lLLEVBQ1gzRSxVQUFXNEUsR0FDVHpSLEVBQ0osSUFDSTZNLEVBREFuRyxFQUFjNEssRUFFbEIsTUFBTUksRUFBc0JDLElBQzFCLElBQUlwSyxFQUFZb0ssRUFBUzNSLEVBQU8rSSxRQUFRbUQsYUFPeEMsT0FOSTNFLEVBQVksSUFDZEEsRUFBWXZILEVBQU8rSSxRQUFRNUMsT0FBT2xOLE9BQVNzTyxHQUV6Q0EsR0FBYXZILEVBQU8rSSxRQUFRNUMsT0FBT2xOLFNBQ3JDc08sR0FBYXZILEVBQU8rSSxRQUFRNUMsT0FBT2xOLFFBRTlCc08sQ0FBUyxFQUtsQixRQUgyQixJQUFoQmIsSUFDVEEsRUEvQ0osU0FBbUMxRyxHQUNqQyxNQUFNLFdBQ0pvSixFQUFVLE9BQ1Y1SSxHQUNFUixFQUNFSSxFQUFZSixFQUFPMkksYUFBZTNJLEVBQU9JLFdBQWFKLEVBQU9JLFVBQ25FLElBQUlzRyxFQUNKLElBQUssSUFBSTFOLEVBQUksRUFBR0EsRUFBSW9RLEVBQVduUSxPQUFRRCxHQUFLLE9BQ1QsSUFBdEJvUSxFQUFXcFEsRUFBSSxHQUNwQm9ILEdBQWFnSixFQUFXcFEsSUFBTW9ILEVBQVlnSixFQUFXcFEsRUFBSSxJQUFNb1EsRUFBV3BRLEVBQUksR0FBS29RLEVBQVdwUSxJQUFNLEVBQ3RHME4sRUFBYzFOLEVBQ0xvSCxHQUFhZ0osRUFBV3BRLElBQU1vSCxFQUFZZ0osRUFBV3BRLEVBQUksS0FDbEUwTixFQUFjMU4sRUFBSSxHQUVYb0gsR0FBYWdKLEVBQVdwUSxLQUNqQzBOLEVBQWMxTixHQU9sQixPQUhJd0gsRUFBT29SLHNCQUNMbEwsRUFBYyxRQUE0QixJQUFoQkEsS0FBNkJBLEVBQWMsR0FFcEVBLENBQ1QsQ0F3QmtCbUwsQ0FBMEI3UixJQUV0Q21KLEVBQVNqSyxRQUFRa0IsSUFBYyxFQUNqQ3lNLEVBQVkxRCxFQUFTakssUUFBUWtCLE9BQ3hCLENBQ0wsTUFBTTBSLEVBQU8zUSxLQUFLRSxJQUFJYixFQUFPbUwsbUJBQW9CakYsR0FDakRtRyxFQUFZaUYsRUFBTzNRLEtBQUtvSyxPQUFPN0UsRUFBY29MLEdBQVF0UixFQUFPa0wsZUFDOUQsQ0FFQSxHQURJbUIsR0FBYTFELEVBQVNsUSxTQUFRNFQsRUFBWTFELEVBQVNsUSxPQUFTLEdBQzVEeU4sSUFBZ0I2SyxFQVFsQixPQVBJMUUsSUFBYzRFLElBQ2hCelIsRUFBTzZNLFVBQVlBLEVBQ25CN00sRUFBT2tGLEtBQUsseUJBRVZsRixFQUFPUSxPQUFPOEcsTUFBUXRILEVBQU8rSSxTQUFXL0ksRUFBT1EsT0FBT3VJLFFBQVFDLFVBQ2hFaEosRUFBT3VILFVBQVltSyxFQUFvQmhMLEtBSzNDLElBQUlhLEVBRUZBLEVBREV2SCxFQUFPK0ksU0FBV3ZJLEVBQU91SSxRQUFRQyxTQUFXeEksRUFBTzhHLEtBQ3pDb0ssRUFBb0JoTCxHQUN2QjFHLEVBQU9tRyxPQUFPTyxHQUNYc0IsU0FBU2hJLEVBQU9tRyxPQUFPTyxHQUFhcUwsYUFBYSw0QkFBOEJyTCxFQUFhLElBRTVGQSxFQUVkak0sT0FBTzBOLE9BQU9uSSxFQUFRLENBQ3BCeVIsb0JBQ0E1RSxZQUNBMkUsb0JBQ0FqSyxZQUNBZ0ssZ0JBQ0E3SyxnQkFFRTFHLEVBQU9nUyxhQUNUNUwsRUFBUXBHLEdBRVZBLEVBQU9rRixLQUFLLHFCQUNabEYsRUFBT2tGLEtBQUssb0JBQ1JsRixFQUFPZ1MsYUFBZWhTLEVBQU9RLE9BQU95UixzQkFDbENULElBQXNCakssR0FDeEJ2SCxFQUFPa0YsS0FBSyxtQkFFZGxGLEVBQU9rRixLQUFLLGVBRWhCLEVBa0RFZ04sbUJBaERGLFNBQTRCeFMsRUFBSXlTLEdBQzlCLE1BQU1uUyxFQUFTN0MsS0FDVHFELEVBQVNSLEVBQU9RLE9BQ3RCLElBQUlvSyxFQUFRbEwsRUFBR2lHLFFBQVEsSUFBSW5GLEVBQU9xRiw2QkFDN0IrRSxHQUFTNUssRUFBTzRGLFdBQWF1TSxHQUFRQSxFQUFLbFosT0FBUyxHQUFLa1osRUFBS2pMLFNBQVN4SCxJQUN6RSxJQUFJeVMsRUFBSzNULE1BQU0yVCxFQUFLalQsUUFBUVEsR0FBTSxFQUFHeVMsRUFBS2xaLFNBQVM0QixTQUFRdVgsS0FDcER4SCxHQUFTd0gsRUFBT3RRLFNBQVdzUSxFQUFPdFEsUUFBUSxJQUFJdEIsRUFBT3FGLDhCQUN4RCtFLEVBQVF3SCxFQUNWLElBR0osSUFDSS9GLEVBREFnRyxHQUFhLEVBRWpCLEdBQUl6SCxFQUNGLElBQUssSUFBSTVSLEVBQUksRUFBR0EsRUFBSWdILEVBQU9tRyxPQUFPbE4sT0FBUUQsR0FBSyxFQUM3QyxHQUFJZ0gsRUFBT21HLE9BQU9uTixLQUFPNFIsRUFBTyxDQUM5QnlILEdBQWEsRUFDYmhHLEVBQWFyVCxFQUNiLEtBQ0YsQ0FHSixJQUFJNFIsSUFBU3lILEVBVVgsT0FGQXJTLEVBQU9zUyxrQkFBZW5ZLE9BQ3RCNkYsRUFBT3VTLGtCQUFlcFksR0FSdEI2RixFQUFPc1MsYUFBZTFILEVBQ2xCNUssRUFBTytJLFNBQVcvSSxFQUFPUSxPQUFPdUksUUFBUUMsUUFDMUNoSixFQUFPdVMsYUFBZXZLLFNBQVM0QyxFQUFNbUgsYUFBYSwyQkFBNEIsSUFFOUUvUixFQUFPdVMsYUFBZWxHLEVBT3RCN0wsRUFBT2dTLDBCQUErQ3JZLElBQXhCNkYsRUFBT3VTLGNBQThCdlMsRUFBT3VTLGVBQWlCdlMsRUFBTzBHLGFBQ3BHMUcsRUFBT3dTLHFCQUVYLEdBK0xBLFNBQVNDLEVBQWUxUyxHQUN0QixJQUFJLE9BQ0ZDLEVBQU0sYUFDTjBTLEVBQVksVUFDWkMsRUFBUyxLQUNUQyxHQUNFN1MsRUFDSixNQUFNLFlBQ0oyRyxFQUFXLGNBQ1g2SyxHQUNFdlIsRUFDSixJQUFJYSxFQUFNOFIsRUFLVixHQUpLOVIsSUFDOEJBLEVBQTdCNkYsRUFBYzZLLEVBQXFCLE9BQWdCN0ssRUFBYzZLLEVBQXFCLE9BQWtCLFNBRTlHdlIsRUFBT2tGLEtBQUssYUFBYTBOLEtBQ3JCRixHQUFnQmhNLElBQWdCNkssRUFBZSxDQUNqRCxHQUFZLFVBQVIxUSxFQUVGLFlBREFiLEVBQU9rRixLQUFLLHVCQUF1QjBOLEtBR3JDNVMsRUFBT2tGLEtBQUssd0JBQXdCME4sS0FDeEIsU0FBUi9SLEVBQ0ZiLEVBQU9rRixLQUFLLHNCQUFzQjBOLEtBRWxDNVMsRUFBT2tGLEtBQUssc0JBQXNCME4sSUFFdEMsQ0FDRixDQXlDQSxJQTRYSWhJLEVBQVEsQ0FDVmlJLFFBdlhGLFNBQWlCOU4sRUFBT3RFLEVBQU9pUyxFQUFjSSxFQUFVQyxRQUN2QyxJQUFWaE8sSUFDRkEsRUFBUSxRQUVJLElBQVZ0RSxJQUNGQSxFQUFRdEQsS0FBS3FELE9BQU9DLFlBRUQsSUFBakJpUyxJQUNGQSxHQUFlLEdBRUksaUJBQVYzTixJQUNUQSxFQUFRaUQsU0FBU2pELEVBQU8sS0FFMUIsTUFBTS9FLEVBQVM3QyxLQUNmLElBQUlrUCxFQUFhdEgsRUFDYnNILEVBQWEsSUFBR0EsRUFBYSxHQUNqQyxNQUFNLE9BQ0o3TCxFQUFNLFNBQ04ySSxFQUFRLFdBQ1JDLEVBQVUsY0FDVm1JLEVBQWEsWUFDYjdLLEVBQ0FpQyxhQUFjQyxFQUFHLFVBQ2pCbEksRUFBUyxRQUNUc0ksR0FDRWhKLEVBQ0osR0FBSUEsRUFBT2dULFdBQWF4UyxFQUFPeVMsaUNBQW1DakssSUFBWThKLElBQWFDLEVBQ3pGLE9BQU8sRUFFVCxNQUFNakIsRUFBTzNRLEtBQUtFLElBQUlyQixFQUFPUSxPQUFPbUwsbUJBQW9CVSxHQUN4RCxJQUFJUSxFQUFZaUYsRUFBTzNRLEtBQUtvSyxPQUFPYyxFQUFheUYsR0FBUTlSLEVBQU9RLE9BQU9rTCxnQkFDbEVtQixHQUFhMUQsRUFBU2xRLFNBQVE0VCxFQUFZMUQsRUFBU2xRLE9BQVMsR0FDaEUsTUFBTW1ILEdBQWErSSxFQUFTMEQsR0FFNUIsR0FBSXJNLEVBQU9vUixvQkFDVCxJQUFLLElBQUk1WSxFQUFJLEVBQUdBLEVBQUlvUSxFQUFXblEsT0FBUUQsR0FBSyxFQUFHLENBQzdDLE1BQU1rYSxHQUF1Qi9SLEtBQUtvSyxNQUFrQixJQUFabkwsR0FDbEMrUyxFQUFpQmhTLEtBQUtvSyxNQUFzQixJQUFoQm5DLEVBQVdwUSxJQUN2Q29hLEVBQXFCalMsS0FBS29LLE1BQTBCLElBQXBCbkMsRUFBV3BRLEVBQUksU0FDcEIsSUFBdEJvUSxFQUFXcFEsRUFBSSxHQUNwQmthLEdBQXVCQyxHQUFrQkQsRUFBc0JFLEdBQXNCQSxFQUFxQkQsR0FBa0IsRUFDOUg5RyxFQUFhclQsRUFDSmthLEdBQXVCQyxHQUFrQkQsRUFBc0JFLElBQ3hFL0csRUFBYXJULEVBQUksR0FFVmthLEdBQXVCQyxJQUNoQzlHLEVBQWFyVCxFQUVqQixDQUdGLEdBQUlnSCxFQUFPZ1MsYUFBZTNGLElBQWUzRixFQUFhLENBQ3BELElBQUsxRyxFQUFPcVQsaUJBQW1CekssRUFBTXhJLEVBQVlKLEVBQU9JLFdBQWFBLEVBQVlKLEVBQU82TyxlQUFpQnpPLEVBQVlKLEVBQU9JLFdBQWFBLEVBQVlKLEVBQU82TyxnQkFDMUosT0FBTyxFQUVULElBQUs3TyxFQUFPc1QsZ0JBQWtCbFQsRUFBWUosRUFBT0ksV0FBYUEsRUFBWUosRUFBT3FQLGlCQUMxRTNJLEdBQWUsS0FBTzJGLEVBQ3pCLE9BQU8sQ0FHYixDQU9BLElBQUlzRyxFQUlKLEdBVkl0RyxLQUFnQmtGLEdBQWlCLElBQU1tQixHQUN6QzFTLEVBQU9rRixLQUFLLDBCQUlkbEYsRUFBT2tQLGVBQWU5TyxHQUVRdVMsRUFBMUJ0RyxFQUFhM0YsRUFBeUIsT0FBZ0IyRixFQUFhM0YsRUFBeUIsT0FBd0IsUUFHcEhrQyxJQUFReEksSUFBY0osRUFBT0ksWUFBY3dJLEdBQU94SSxJQUFjSixFQUFPSSxVQWN6RSxPQWJBSixFQUFPcVIsa0JBQWtCaEYsR0FFckI3TCxFQUFPMlAsWUFDVG5RLEVBQU8wTixtQkFFVDFOLEVBQU9vUSxzQkFDZSxVQUFsQjVQLEVBQU9vTCxRQUNUNUwsRUFBT3VULGFBQWFuVCxHQUVKLFVBQWR1UyxJQUNGM1MsRUFBT3dULGdCQUFnQmQsRUFBY0MsR0FDckMzUyxFQUFPeVQsY0FBY2YsRUFBY0MsS0FFOUIsRUFFVCxHQUFJblMsRUFBTzhKLFFBQVMsQ0FDbEIsTUFBTW9KLEVBQU0xVCxFQUFPOEgsZUFDYjZMLEVBQUkvSyxFQUFNeEksR0FBYUEsRUFDN0IsR0FBYyxJQUFWSyxFQUFhLENBQ2YsTUFBTXFJLEVBQVk5SSxFQUFPK0ksU0FBVy9JLEVBQU9RLE9BQU91SSxRQUFRQyxRQUN0REYsSUFDRjlJLEVBQU9VLFVBQVUvRSxNQUFNZ0YsZUFBaUIsT0FDeENYLEVBQU80VCxtQkFBb0IsR0FFekI5SyxJQUFjOUksRUFBTzZULDJCQUE2QjdULEVBQU9RLE9BQU9zVCxhQUFlLEdBQ2pGOVQsRUFBTzZULDJCQUE0QixFQUNuQ2pXLHVCQUFzQixLQUNwQjhDLEVBQVVnVCxFQUFNLGFBQWUsYUFBZUMsQ0FBQyxLQUdqRGpULEVBQVVnVCxFQUFNLGFBQWUsYUFBZUMsRUFFNUM3SyxHQUNGbEwsdUJBQXNCLEtBQ3BCb0MsRUFBT1UsVUFBVS9FLE1BQU1nRixlQUFpQixHQUN4Q1gsRUFBTzRULG1CQUFvQixDQUFLLEdBR3RDLEtBQU8sQ0FDTCxJQUFLNVQsRUFBT2lELFFBQVFJLGFBTWxCLE9BTEF2RCxFQUFxQixDQUNuQkUsU0FDQUMsZUFBZ0IwVCxFQUNoQnpULEtBQU13VCxFQUFNLE9BQVMsU0FFaEIsRUFFVGhULEVBQVVnQixTQUFTLENBQ2pCLENBQUNnUyxFQUFNLE9BQVMsT0FBUUMsRUFDeEJJLFNBQVUsVUFFZCxDQUNBLE9BQU8sQ0FDVCxDQXVCQSxPQXRCQS9ULEVBQU82TixjQUFjcE4sR0FDckJULEVBQU91VCxhQUFhblQsR0FDcEJKLEVBQU9xUixrQkFBa0JoRixHQUN6QnJNLEVBQU9vUSxzQkFDUHBRLEVBQU9rRixLQUFLLHdCQUF5QnpFLEVBQU9xUyxHQUM1QzlTLEVBQU93VCxnQkFBZ0JkLEVBQWNDLEdBQ3ZCLElBQVZsUyxFQUNGVCxFQUFPeVQsY0FBY2YsRUFBY0MsR0FDekIzUyxFQUFPZ1QsWUFDakJoVCxFQUFPZ1QsV0FBWSxFQUNkaFQsRUFBT2dVLGdDQUNWaFUsRUFBT2dVLDhCQUFnQyxTQUF1QkMsR0FDdkRqVSxJQUFVQSxFQUFPaUUsV0FDbEJnUSxFQUFFM2EsU0FBVzZELE9BQ2pCNkMsRUFBT1UsVUFBVXpGLG9CQUFvQixnQkFBaUIrRSxFQUFPZ1UsK0JBQzdEaFUsRUFBT2dVLDhCQUFnQyxZQUNoQ2hVLEVBQU9nVSw4QkFDZGhVLEVBQU95VCxjQUFjZixFQUFjQyxHQUNyQyxHQUVGM1MsRUFBT1UsVUFBVXhILGlCQUFpQixnQkFBaUI4RyxFQUFPZ1UsaUNBRXJELENBQ1QsRUFtT0VFLFlBak9GLFNBQXFCblAsRUFBT3RFLEVBQU9pUyxFQUFjSSxRQUNqQyxJQUFWL04sSUFDRkEsRUFBUSxRQUVJLElBQVZ0RSxJQUNGQSxFQUFRdEQsS0FBS3FELE9BQU9DLFlBRUQsSUFBakJpUyxJQUNGQSxHQUFlLEdBRUksaUJBQVYzTixJQUVUQSxFQURzQmlELFNBQVNqRCxFQUFPLEtBR3hDLE1BQU0vRSxFQUFTN0MsS0FDZixJQUFJZ1gsRUFBV3BQLEVBU2YsT0FSSS9FLEVBQU9RLE9BQU84RyxPQUNadEgsRUFBTytJLFNBQVcvSSxFQUFPUSxPQUFPdUksUUFBUUMsUUFFMUNtTCxHQUFzQm5VLEVBQU8rSSxRQUFRbUQsYUFFckNpSSxFQUFXblUsRUFBTytOLG9CQUFvQm9HLElBR25DblUsRUFBTzZTLFFBQVFzQixFQUFVMVQsRUFBT2lTLEVBQWNJLEVBQ3ZELEVBeU1Fc0IsVUF0TUYsU0FBbUIzVCxFQUFPaVMsRUFBY0ksUUFDeEIsSUFBVnJTLElBQ0ZBLEVBQVF0RCxLQUFLcUQsT0FBT0MsWUFFRCxJQUFqQmlTLElBQ0ZBLEdBQWUsR0FFakIsTUFBTTFTLEVBQVM3QyxNQUNULFFBQ0o2TCxFQUFPLE9BQ1B4SSxFQUFNLFVBQ053UyxHQUNFaFQsRUFDSixJQUFLZ0osRUFBUyxPQUFPaEosRUFDckIsSUFBSXFVLEVBQVc3VCxFQUFPa0wsZUFDTyxTQUF6QmxMLEVBQU8rRixlQUFzRCxJQUExQi9GLEVBQU9rTCxnQkFBd0JsTCxFQUFPOFQscUJBQzNFRCxFQUFXbFQsS0FBS0MsSUFBSXBCLEVBQU93RyxxQkFBcUIsV0FBVyxHQUFPLElBRXBFLE1BQU0rTixFQUFZdlUsRUFBTzBHLFlBQWNsRyxFQUFPbUwsbUJBQXFCLEVBQUkwSSxFQUNqRXZMLEVBQVk5SSxFQUFPK0ksU0FBV3ZJLEVBQU91SSxRQUFRQyxRQUNuRCxHQUFJeEksRUFBTzhHLEtBQU0sQ0FDZixHQUFJMEwsSUFBY2xLLEdBQWF0SSxFQUFPZ1Usb0JBQXFCLE9BQU8sRUFNbEUsR0FMQXhVLEVBQU95VSxRQUFRLENBQ2I5QixVQUFXLFNBR2IzUyxFQUFPMFUsWUFBYzFVLEVBQU9VLFVBQVVpVSxXQUNsQzNVLEVBQU8wRyxjQUFnQjFHLEVBQU9tRyxPQUFPbE4sT0FBUyxHQUFLdUgsRUFBTzhKLFFBSTVELE9BSEExTSx1QkFBc0IsS0FDcEJvQyxFQUFPNlMsUUFBUTdTLEVBQU8wRyxZQUFjNk4sRUFBVzlULEVBQU9pUyxFQUFjSSxFQUFTLEtBRXhFLENBRVgsQ0FDQSxPQUFJdFMsRUFBTzZHLFFBQVVySCxFQUFPdVAsTUFDbkJ2UCxFQUFPNlMsUUFBUSxFQUFHcFMsRUFBT2lTLEVBQWNJLEdBRXpDOVMsRUFBTzZTLFFBQVE3UyxFQUFPMEcsWUFBYzZOLEVBQVc5VCxFQUFPaVMsRUFBY0ksRUFDN0UsRUFpS0U4QixVQTlKRixTQUFtQm5VLEVBQU9pUyxFQUFjSSxRQUN4QixJQUFWclMsSUFDRkEsRUFBUXRELEtBQUtxRCxPQUFPQyxZQUVELElBQWpCaVMsSUFDRkEsR0FBZSxHQUVqQixNQUFNMVMsRUFBUzdDLE1BQ1QsT0FDSnFELEVBQU0sU0FDTjJJLEVBQVEsV0FDUkMsRUFBVSxhQUNWVCxFQUFZLFFBQ1pLLEVBQU8sVUFDUGdLLEdBQ0VoVCxFQUNKLElBQUtnSixFQUFTLE9BQU9oSixFQUNyQixNQUFNOEksRUFBWTlJLEVBQU8rSSxTQUFXdkksRUFBT3VJLFFBQVFDLFFBQ25ELEdBQUl4SSxFQUFPOEcsS0FBTSxDQUNmLEdBQUkwTCxJQUFjbEssR0FBYXRJLEVBQU9nVSxvQkFBcUIsT0FBTyxFQUNsRXhVLEVBQU95VSxRQUFRLENBQ2I5QixVQUFXLFNBR2IzUyxFQUFPMFUsWUFBYzFVLEVBQU9VLFVBQVVpVSxVQUN4QyxDQUVBLFNBQVNFLEVBQVVDLEdBQ2pCLE9BQUlBLEVBQU0sR0FBVzNULEtBQUtvSyxNQUFNcEssS0FBS3NLLElBQUlxSixJQUNsQzNULEtBQUtvSyxNQUFNdUosRUFDcEIsQ0FDQSxNQUFNNUIsRUFBc0IyQixFQUxWbE0sRUFBZTNJLEVBQU9JLFdBQWFKLEVBQU9JLFdBTXREMlUsRUFBcUI1TCxFQUFTbkMsS0FBSThOLEdBQU9ELEVBQVVDLEtBQ3pELElBQUlFLEVBQVc3TCxFQUFTNEwsRUFBbUI3VixRQUFRZ1UsR0FBdUIsR0FDMUUsUUFBd0IsSUFBYjhCLEdBQTRCeFUsRUFBTzhKLFFBQVMsQ0FDckQsSUFBSTJLLEVBQ0o5TCxFQUFTdE8sU0FBUSxDQUFDNlIsRUFBTUcsS0FDbEJxRyxHQUF1QnhHLElBRXpCdUksRUFBZ0JwSSxFQUNsQixTQUUyQixJQUFsQm9JLElBQ1RELEVBQVc3TCxFQUFTOEwsRUFBZ0IsRUFBSUEsRUFBZ0IsRUFBSUEsR0FFaEUsQ0FDQSxJQUFJQyxFQUFZLEVBU2hCLFFBUndCLElBQWJGLElBQ1RFLEVBQVk5TCxFQUFXbEssUUFBUThWLEdBQzNCRSxFQUFZLElBQUdBLEVBQVlsVixFQUFPMEcsWUFBYyxHQUN2QixTQUF6QmxHLEVBQU8rRixlQUFzRCxJQUExQi9GLEVBQU9rTCxnQkFBd0JsTCxFQUFPOFQscUJBQzNFWSxFQUFZQSxFQUFZbFYsRUFBT3dHLHFCQUFxQixZQUFZLEdBQVEsRUFDeEUwTyxFQUFZL1QsS0FBS0MsSUFBSThULEVBQVcsS0FHaEMxVSxFQUFPNkcsUUFBVXJILEVBQU9zUCxZQUFhLENBQ3ZDLE1BQU02RixFQUFZblYsRUFBT1EsT0FBT3VJLFNBQVcvSSxFQUFPUSxPQUFPdUksUUFBUUMsU0FBV2hKLEVBQU8rSSxRQUFVL0ksRUFBTytJLFFBQVE1QyxPQUFPbE4sT0FBUyxFQUFJK0csRUFBT21HLE9BQU9sTixPQUFTLEVBQ3ZKLE9BQU8rRyxFQUFPNlMsUUFBUXNDLEVBQVcxVSxFQUFPaVMsRUFBY0ksRUFDeEQsQ0FBTyxPQUFJdFMsRUFBTzhHLE1BQStCLElBQXZCdEgsRUFBTzBHLGFBQXFCbEcsRUFBTzhKLFNBQzNEMU0sdUJBQXNCLEtBQ3BCb0MsRUFBTzZTLFFBQVFxQyxFQUFXelUsRUFBT2lTLEVBQWNJLEVBQVMsS0FFbkQsR0FFRjlTLEVBQU82UyxRQUFRcUMsRUFBV3pVLEVBQU9pUyxFQUFjSSxFQUN4RCxFQThGRXNDLFdBM0ZGLFNBQW9CM1UsRUFBT2lTLEVBQWNJLEdBUXZDLFlBUGMsSUFBVnJTLElBQ0ZBLEVBQVF0RCxLQUFLcUQsT0FBT0MsWUFFRCxJQUFqQmlTLElBQ0ZBLEdBQWUsR0FFRnZWLEtBQ0QwVixRQURDMVYsS0FDY3VKLFlBQWFqRyxFQUFPaVMsRUFBY0ksRUFDakUsRUFtRkV1QyxlQWhGRixTQUF3QjVVLEVBQU9pUyxFQUFjSSxFQUFVd0MsUUFDdkMsSUFBVjdVLElBQ0ZBLEVBQVF0RCxLQUFLcUQsT0FBT0MsWUFFRCxJQUFqQmlTLElBQ0ZBLEdBQWUsUUFFQyxJQUFkNEMsSUFDRkEsRUFBWSxJQUVkLE1BQU10VixFQUFTN0MsS0FDZixJQUFJNEgsRUFBUS9FLEVBQU8wRyxZQUNuQixNQUFNb0wsRUFBTzNRLEtBQUtFLElBQUlyQixFQUFPUSxPQUFPbUwsbUJBQW9CNUcsR0FDbEQ4SCxFQUFZaUYsRUFBTzNRLEtBQUtvSyxPQUFPeEcsRUFBUStNLEdBQVE5UixFQUFPUSxPQUFPa0wsZ0JBQzdEdEwsRUFBWUosRUFBTzJJLGFBQWUzSSxFQUFPSSxXQUFhSixFQUFPSSxVQUNuRSxHQUFJQSxHQUFhSixFQUFPbUosU0FBUzBELEdBQVksQ0FHM0MsTUFBTTBJLEVBQWN2VixFQUFPbUosU0FBUzBELEdBRWhDek0sRUFBWW1WLEdBREN2VixFQUFPbUosU0FBUzBELEVBQVksR0FDSDBJLEdBQWVELElBQ3ZEdlEsR0FBUy9FLEVBQU9RLE9BQU9rTCxlQUUzQixLQUFPLENBR0wsTUFBTXNKLEVBQVdoVixFQUFPbUosU0FBUzBELEVBQVksR0FFekN6TSxFQUFZNFUsSUFESWhWLEVBQU9tSixTQUFTMEQsR0FDT21JLEdBQVlNLElBQ3JEdlEsR0FBUy9FLEVBQU9RLE9BQU9rTCxlQUUzQixDQUdBLE9BRkEzRyxFQUFRNUQsS0FBS0MsSUFBSTJELEVBQU8sR0FDeEJBLEVBQVE1RCxLQUFLRSxJQUFJMEQsRUFBTy9FLEVBQU9vSixXQUFXblEsT0FBUyxHQUM1QytHLEVBQU82UyxRQUFROU4sRUFBT3RFLEVBQU9pUyxFQUFjSSxFQUNwRCxFQThDRU4sb0JBNUNGLFdBQ0UsTUFBTXhTLEVBQVM3QyxNQUNULE9BQ0pxRCxFQUFNLFNBQ05pSSxHQUNFekksRUFDRXVHLEVBQXlDLFNBQXpCL0YsRUFBTytGLGNBQTJCdkcsRUFBT3dHLHVCQUF5QmhHLEVBQU8rRixjQUMvRixJQUNJZ0IsRUFEQWlPLEVBQWV4VixFQUFPdVMsYUFFMUIsTUFBTWtELEVBQWdCelYsRUFBTzRGLFVBQVksZUFBaUIsSUFBSXBGLEVBQU9xRixhQUNyRSxHQUFJckYsRUFBTzhHLEtBQU0sQ0FDZixHQUFJdEgsRUFBT2dULFVBQVcsT0FDdEJ6TCxFQUFZUyxTQUFTaEksRUFBT3NTLGFBQWFQLGFBQWEsMkJBQTRCLElBQzlFdlIsRUFBTzZKLGVBQ0xtTCxFQUFleFYsRUFBTzBWLGFBQWVuUCxFQUFnQixHQUFLaVAsRUFBZXhWLEVBQU9tRyxPQUFPbE4sT0FBUytHLEVBQU8wVixhQUFlblAsRUFBZ0IsR0FDeEl2RyxFQUFPeVUsVUFDUGUsRUFBZXhWLEVBQU8yVixjQUFjLEVBQWdCbE4sRUFBVSxHQUFHZ04sOEJBQTBDbE8sT0FBZSxJQUMxSCxHQUFTLEtBQ1B2SCxFQUFPNlMsUUFBUTJDLEVBQWEsS0FHOUJ4VixFQUFPNlMsUUFBUTJDLEdBRVJBLEVBQWV4VixFQUFPbUcsT0FBT2xOLE9BQVNzTixHQUMvQ3ZHLEVBQU95VSxVQUNQZSxFQUFleFYsRUFBTzJWLGNBQWMsRUFBZ0JsTixFQUFVLEdBQUdnTiw4QkFBMENsTyxPQUFlLElBQzFILEdBQVMsS0FDUHZILEVBQU82UyxRQUFRMkMsRUFBYSxLQUc5QnhWLEVBQU82UyxRQUFRMkMsRUFFbkIsTUFDRXhWLEVBQU82UyxRQUFRMkMsRUFFbkIsR0E0UUEsU0FBU0ksRUFBYXZjLEdBQ3BCLE1BQU0yRyxFQUFTN0MsS0FDVHJFLEVBQVcsSUFDWG1GLEVBQVMsSUFDVGtILEVBQU9uRixFQUFPNlYsZ0JBQ3BCMVEsRUFBSzJRLFFBQVFuVCxLQUFLdEosR0FDbEIsTUFBTSxPQUNKbUgsRUFBTSxRQUNOdVYsRUFBTyxRQUNQL00sR0FDRWhKLEVBQ0osSUFBS2dKLEVBQVMsT0FDZCxJQUFLeEksRUFBT3dWLGVBQXVDLFVBQXRCM2MsRUFBTTRjLFlBQXlCLE9BQzVELEdBQUlqVyxFQUFPZ1QsV0FBYXhTLEVBQU95UywrQkFDN0IsUUFFR2pULEVBQU9nVCxXQUFheFMsRUFBTzhKLFNBQVc5SixFQUFPOEcsTUFDaER0SCxFQUFPeVUsVUFFVCxJQUFJUixFQUFJNWEsRUFDSjRhLEVBQUVpQyxnQkFBZWpDLEVBQUlBLEVBQUVpQyxlQUMzQixJQUFJQyxFQUFXbEMsRUFBRTNhLE9BQ2pCLEdBQWlDLFlBQTdCa0gsRUFBTzRWLG9CQUNKcFcsRUFBT1UsVUFBVThNLFNBQVMySSxHQUFXLE9BRTVDLEdBQUksVUFBV2xDLEdBQWlCLElBQVpBLEVBQUVvQyxNQUFhLE9BQ25DLEdBQUksV0FBWXBDLEdBQUtBLEVBQUVxQyxPQUFTLEVBQUcsT0FDbkMsR0FBSW5SLEVBQUtvUixXQUFhcFIsRUFBS3FSLFFBQVMsT0FHcEMsTUFBTUMsSUFBeUJqVyxFQUFPa1csZ0JBQTRDLEtBQTFCbFcsRUFBT2tXLGVBRXpEQyxFQUFZdGQsRUFBTXVkLGFBQWV2ZCxFQUFNdWQsZUFBaUJ2ZCxFQUFNOFksS0FDaEVzRSxHQUF3QnhDLEVBQUUzYSxRQUFVMmEsRUFBRTNhLE9BQU8wTSxZQUFjMlEsSUFDN0RSLEVBQVdRLEVBQVUsSUFFdkIsTUFBTUUsRUFBb0JyVyxFQUFPcVcsa0JBQW9CclcsRUFBT3FXLGtCQUFvQixJQUFJclcsRUFBT2tXLGlCQUNyRkksS0FBb0I3QyxFQUFFM2EsU0FBVTJhLEVBQUUzYSxPQUFPME0sWUFHL0MsR0FBSXhGLEVBQU91VyxZQUFjRCxFQXZEM0IsU0FBd0JqVixFQUFVbVYsR0FhaEMsWUFaYSxJQUFUQSxJQUNGQSxFQUFPN1osTUFFVCxTQUFTOFosRUFBY3ZYLEdBQ3JCLElBQUtBLEdBQU1BLElBQU8sS0FBaUJBLElBQU8sSUFBYSxPQUFPLEtBQzFEQSxFQUFHd1gsZUFBY3hYLEVBQUtBLEVBQUd3WCxjQUM3QixNQUFNQyxFQUFRelgsRUFBR2lHLFFBQVE5RCxHQUN6QixPQUFLc1YsR0FBVXpYLEVBQUcwWCxZQUdYRCxHQUFTRixFQUFjdlgsRUFBRzBYLGNBQWNsYixNQUZ0QyxJQUdYLENBQ08rYSxDQUFjRCxFQUN2QixDQXlDNENLLENBQWVSLEVBQW1CVixHQUFZQSxFQUFTeFEsUUFBUWtSLElBRXZHLFlBREE3VyxFQUFPc1gsWUFBYSxHQUd0QixHQUFJOVcsRUFBTytXLGVBQ0pwQixFQUFTeFEsUUFBUW5GLEVBQU8rVyxjQUFlLE9BRTlDeEIsRUFBUXlCLFNBQVd2RCxFQUFFd0QsTUFDckIxQixFQUFRMkIsU0FBV3pELEVBQUUwRCxNQUNyQixNQUFNQyxFQUFTN0IsRUFBUXlCLFNBQ2pCSyxFQUFTOUIsRUFBUTJCLFNBSWpCSSxFQUFxQnRYLEVBQU9zWCxvQkFBc0J0WCxFQUFPdVgsc0JBQ3pEQyxFQUFxQnhYLEVBQU93WCxvQkFBc0J4WCxFQUFPeVgsc0JBQy9ELEdBQUlILElBQXVCRixHQUFVSSxHQUFzQkosR0FBVTNaLEVBQU9pYSxXQUFhRixHQUFxQixDQUM1RyxHQUEyQixZQUF2QkYsRUFHRixPQUZBemUsRUFBTThlLGdCQUlWLENBQ0ExZCxPQUFPME4sT0FBT2hELEVBQU0sQ0FDbEJvUixXQUFXLEVBQ1hDLFNBQVMsRUFDVDRCLHFCQUFxQixFQUNyQkMsaUJBQWFsZSxFQUNibWUsaUJBQWFuZSxJQUVmNGIsRUFBUTZCLE9BQVNBLEVBQ2pCN0IsRUFBUThCLE9BQVNBLEVBQ2pCMVMsRUFBS29ULGVBQWlCLElBQ3RCdlksRUFBT3NYLFlBQWEsRUFDcEJ0WCxFQUFPeUgsYUFDUHpILEVBQU93WSxvQkFBaUJyZSxFQUNwQnFHLEVBQU84VSxVQUFZLElBQUduUSxFQUFLc1Qsb0JBQXFCLEdBQ3BELElBQUlOLEdBQWlCLEVBQ2pCaEMsRUFBU3JVLFFBQVFxRCxFQUFLdVQscUJBQ3hCUCxHQUFpQixFQUNTLFdBQXRCaEMsRUFBUy9hLFdBQ1grSixFQUFLb1IsV0FBWSxJQUdqQnpkLEVBQVNvQyxlQUFpQnBDLEVBQVNvQyxjQUFjNEcsUUFBUXFELEVBQUt1VCxvQkFBc0I1ZixFQUFTb0MsZ0JBQWtCaWIsR0FDakhyZCxFQUFTb0MsY0FBY0MsT0FFekIsTUFBTXdkLEVBQXVCUixHQUFrQm5ZLEVBQU80WSxnQkFBa0JwWSxFQUFPcVksMEJBQzFFclksRUFBT3NZLGdDQUFpQ0gsR0FBMEJ4QyxFQUFTNEMsbUJBQzlFOUUsRUFBRWtFLGlCQUVBM1gsRUFBT3dZLFVBQVl4WSxFQUFPd1ksU0FBU2hRLFNBQVdoSixFQUFPZ1osVUFBWWhaLEVBQU9nVCxZQUFjeFMsRUFBTzhKLFNBQy9GdEssRUFBT2daLFNBQVNwRCxlQUVsQjVWLEVBQU9rRixLQUFLLGFBQWMrTyxFQUM1QixDQUVBLFNBQVNnRixFQUFZNWYsR0FDbkIsTUFBTVAsRUFBVyxJQUNYa0gsRUFBUzdDLEtBQ1RnSSxFQUFPbkYsRUFBTzZWLGlCQUNkLE9BQ0pyVixFQUFNLFFBQ051VixFQUNBcE4sYUFBY0MsRUFBRyxRQUNqQkksR0FDRWhKLEVBQ0osSUFBS2dKLEVBQVMsT0FDZCxJQUFLeEksRUFBT3dWLGVBQXVDLFVBQXRCM2MsRUFBTTRjLFlBQXlCLE9BQzVELElBQUloQyxFQUFJNWEsRUFFUixHQURJNGEsRUFBRWlDLGdCQUFlakMsRUFBSUEsRUFBRWlDLGdCQUN0Qi9RLEVBQUtvUixVQUlSLFlBSElwUixFQUFLbVQsYUFBZW5ULEVBQUtrVCxhQUMzQnJZLEVBQU9rRixLQUFLLG9CQUFxQitPLElBSXJDLE1BQU1pRixFQUFlL1QsRUFBSzJRLFFBQVFxRCxXQUFVQyxHQUFZQSxFQUFTQyxZQUFjcEYsRUFBRW9GLFlBQzdFSCxHQUFnQixJQUFHL1QsRUFBSzJRLFFBQVFvRCxHQUFnQmpGLEdBQ3BELE1BQU1xRixFQUFjblUsRUFBSzJRLFFBQVE3YyxPQUFTLEVBQUlrTSxFQUFLMlEsUUFBUSxHQUFLN0IsRUFDMUR3RCxFQUFRNkIsRUFBWTdCLE1BQ3BCRSxFQUFRMkIsRUFBWTNCLE1BQzFCLEdBQUkxRCxFQUFFc0Ysd0JBR0osT0FGQXhELEVBQVE2QixPQUFTSCxPQUNqQjFCLEVBQVE4QixPQUFTRixHQUduQixJQUFLM1gsRUFBTzRZLGVBZVYsT0FkSzNFLEVBQUUzYSxPQUFPd0ksUUFBUXFELEVBQUt1VCxxQkFDekIxWSxFQUFPc1gsWUFBYSxRQUVsQm5TLEVBQUtvUixZQUNQOWIsT0FBTzBOLE9BQU80TixFQUFTLENBQ3JCNkIsT0FBUUgsRUFDUkksT0FBUUYsRUFDUjZCLE1BQU94WixFQUFPK1YsUUFBUXlCLFNBQ3RCaUMsTUFBT3paLEVBQU8rVixRQUFRMkIsU0FDdEJGLFNBQVVDLEVBQ1ZDLFNBQVVDLElBRVp4UyxFQUFLb1QsZUFBaUIsTUFJMUIsR0FBSS9YLEVBQU9rWixzQkFBd0JsWixFQUFPOEcsS0FDeEMsR0FBSXRILEVBQU8rSCxjQUVULEdBQUk0UCxFQUFRNUIsRUFBUThCLFFBQVU3WCxFQUFPSSxXQUFhSixFQUFPcVAsZ0JBQWtCc0ksRUFBUTVCLEVBQVE4QixRQUFVN1gsRUFBT0ksV0FBYUosRUFBTzZPLGVBRzlILE9BRkExSixFQUFLb1IsV0FBWSxPQUNqQnBSLEVBQUtxUixTQUFVLFFBR1osR0FBSWlCLEVBQVExQixFQUFRNkIsUUFBVTVYLEVBQU9JLFdBQWFKLEVBQU9xUCxnQkFBa0JvSSxFQUFRMUIsRUFBUTZCLFFBQVU1WCxFQUFPSSxXQUFhSixFQUFPNk8sZUFDckksT0FHSixHQUFJL1YsRUFBU29DLGVBQ1ArWSxFQUFFM2EsU0FBV1IsRUFBU29DLGVBQWlCK1ksRUFBRTNhLE9BQU93SSxRQUFRcUQsRUFBS3VULG1CQUcvRCxPQUZBdlQsRUFBS3FSLFNBQVUsT0FDZnhXLEVBQU9zWCxZQUFhLEdBT3hCLEdBSEluUyxFQUFLaVQscUJBQ1BwWSxFQUFPa0YsS0FBSyxZQUFhK08sR0FFdkJBLEVBQUUwRixlQUFpQjFGLEVBQUUwRixjQUFjMWdCLE9BQVMsRUFBRyxPQUNuRDhjLEVBQVF5QixTQUFXQyxFQUNuQjFCLEVBQVEyQixTQUFXQyxFQUNuQixNQUFNaUMsRUFBUTdELEVBQVF5QixTQUFXekIsRUFBUTZCLE9BQ25DaUMsRUFBUTlELEVBQVEyQixTQUFXM0IsRUFBUThCLE9BQ3pDLEdBQUk3WCxFQUFPUSxPQUFPOFUsV0FBYW5VLEtBQUsyWSxLQUFLRixHQUFTLEVBQUlDLEdBQVMsR0FBSzdaLEVBQU9RLE9BQU84VSxVQUFXLE9BQzdGLFFBQWdDLElBQXJCblEsRUFBS2tULFlBQTZCLENBQzNDLElBQUkwQixFQUNBL1osRUFBTzhILGdCQUFrQmlPLEVBQVEyQixXQUFhM0IsRUFBUThCLFFBQVU3WCxFQUFPK0gsY0FBZ0JnTyxFQUFReUIsV0FBYXpCLEVBQVE2QixPQUN0SHpTLEVBQUtrVCxhQUFjLEVBR2Z1QixFQUFRQSxFQUFRQyxFQUFRQSxHQUFTLEtBQ25DRSxFQUE0RCxJQUEvQzVZLEtBQUs2WSxNQUFNN1ksS0FBS3NLLElBQUlvTyxHQUFRMVksS0FBS3NLLElBQUltTyxJQUFnQnpZLEtBQUtLLEdBQ3ZFMkQsRUFBS2tULFlBQWNyWSxFQUFPOEgsZUFBaUJpUyxFQUFhdlosRUFBT3VaLFdBQWEsR0FBS0EsRUFBYXZaLEVBQU91WixXQUczRyxDQVNBLEdBUkk1VSxFQUFLa1QsYUFDUHJZLEVBQU9rRixLQUFLLG9CQUFxQitPLFFBRUgsSUFBckI5TyxFQUFLbVQsY0FDVnZDLEVBQVF5QixXQUFhekIsRUFBUTZCLFFBQVU3QixFQUFRMkIsV0FBYTNCLEVBQVE4QixTQUN0RTFTLEVBQUttVCxhQUFjLElBR25CblQsRUFBS2tULGFBQWVyWSxFQUFPaWEsTUFBUWphLEVBQU9RLE9BQU95WixNQUFRamEsRUFBT1EsT0FBT3laLEtBQUtqUixTQUFXN0QsRUFBSzJRLFFBQVE3YyxPQUFTLEVBRS9HLFlBREFrTSxFQUFLb1IsV0FBWSxHQUduQixJQUFLcFIsRUFBS21ULFlBQ1IsT0FFRnRZLEVBQU9zWCxZQUFhLEdBQ2Y5VyxFQUFPOEosU0FBVzJKLEVBQUVpRyxZQUN2QmpHLEVBQUVrRSxpQkFFQTNYLEVBQU8yWiwyQkFBNkIzWixFQUFPNFosUUFDN0NuRyxFQUFFb0csa0JBRUosSUFBSUMsRUFBT3RhLEVBQU84SCxlQUFpQjhSLEVBQVFDLEVBQ3ZDVSxFQUFjdmEsRUFBTzhILGVBQWlCaU8sRUFBUXlCLFNBQVd6QixFQUFReUUsVUFBWXpFLEVBQVEyQixTQUFXM0IsRUFBUTBFLFVBQ3hHamEsRUFBT2thLGlCQUNUSixFQUFPblosS0FBS3NLLElBQUk2TyxJQUFTMVIsRUFBTSxHQUFLLEdBQ3BDMlIsRUFBY3BaLEtBQUtzSyxJQUFJOE8sSUFBZ0IzUixFQUFNLEdBQUssSUFFcERtTixFQUFRdUUsS0FBT0EsRUFDZkEsR0FBUTlaLEVBQU9tYSxXQUNYL1IsSUFDRjBSLEdBQVFBLEVBQ1JDLEdBQWVBLEdBRWpCLE1BQU1LLEVBQXVCNWEsRUFBTzZhLGlCQUNwQzdhLEVBQU93WSxlQUFpQjhCLEVBQU8sRUFBSSxPQUFTLE9BQzVDdGEsRUFBTzZhLGlCQUFtQk4sRUFBYyxFQUFJLE9BQVMsT0FDckQsTUFBTU8sRUFBUzlhLEVBQU9RLE9BQU84RyxPQUFTOUcsRUFBTzhKLFFBQ3ZDeVEsRUFBeUMsU0FBMUIvYSxFQUFPd1ksZ0JBQTZCeFksRUFBT3FULGdCQUE0QyxTQUExQnJULEVBQU93WSxnQkFBNkJ4WSxFQUFPc1QsZUFDN0gsSUFBS25PLEVBQUtxUixRQUFTLENBUWpCLEdBUElzRSxHQUFVQyxHQUNaL2EsRUFBT3lVLFFBQVEsQ0FDYjlCLFVBQVczUyxFQUFPd1ksaUJBR3RCclQsRUFBSzZWLGVBQWlCaGIsRUFBT2liLGVBQzdCamIsRUFBTzZOLGNBQWMsR0FDakI3TixFQUFPZ1QsVUFBVyxDQUNwQixNQUFNa0ksRUFBTSxJQUFJamQsT0FBT2YsWUFBWSxnQkFBaUIsQ0FDbERpZSxTQUFTLEVBQ1RqQixZQUFZLElBRWRsYSxFQUFPVSxVQUFVMGEsY0FBY0YsRUFDakMsQ0FDQS9WLEVBQUtrVyxxQkFBc0IsR0FFdkI3YSxFQUFPOGEsYUFBeUMsSUFBMUJ0YixFQUFPcVQsaUJBQXFELElBQTFCclQsRUFBT3NULGdCQUNqRXRULEVBQU91YixlQUFjLEdBRXZCdmIsRUFBT2tGLEtBQUssa0JBQW1CK08sRUFDakMsQ0FDQSxJQUFJdUgsRUFDQXJXLEVBQUtxUixTQUFXb0UsSUFBeUI1YSxFQUFPNmEsa0JBQW9CQyxHQUFVQyxHQUFnQjVaLEtBQUtzSyxJQUFJNk8sSUFBUyxJQUVsSHRhLEVBQU95VSxRQUFRLENBQ2I5QixVQUFXM1MsRUFBT3dZLGVBQ2xCakYsY0FBYyxJQUVoQmlJLEdBQVksR0FFZHhiLEVBQU9rRixLQUFLLGFBQWMrTyxHQUMxQjlPLEVBQUtxUixTQUFVLEVBQ2ZyUixFQUFLc1csaUJBQW1CbkIsRUFBT25WLEVBQUs2VixlQUNwQyxJQUFJVSxHQUFzQixFQUN0QkMsRUFBa0JuYixFQUFPbWIsZ0JBaUQ3QixHQWhESW5iLEVBQU9rWixzQkFDVGlDLEVBQWtCLEdBRWhCckIsRUFBTyxHQUNMUSxHQUFVQyxJQUFpQlMsR0FBYXJXLEVBQUtzVyxrQkFBb0JqYixFQUFPNkosZUFBaUJySyxFQUFPNk8sZUFBaUI3TyxFQUFPNkMsS0FBTyxFQUFJN0MsRUFBTzZPLGlCQUM1STdPLEVBQU95VSxRQUFRLENBQ2I5QixVQUFXLE9BQ1hZLGNBQWMsRUFDZHFJLGlCQUFrQixJQUdsQnpXLEVBQUtzVyxpQkFBbUJ6YixFQUFPNk8saUJBQ2pDNk0sR0FBc0IsRUFDbEJsYixFQUFPcWIsYUFDVDFXLEVBQUtzVyxpQkFBbUJ6YixFQUFPNk8sZUFBaUIsSUFBTTdPLEVBQU82TyxlQUFpQjFKLEVBQUs2VixlQUFpQlYsSUFBU3FCLEtBR3hHckIsRUFBTyxJQUNaUSxHQUFVQyxJQUFpQlMsR0FBYXJXLEVBQUtzVyxrQkFBb0JqYixFQUFPNkosZUFBaUJySyxFQUFPcVAsZUFBaUJyUCxFQUFPNkMsS0FBTyxFQUFJN0MsRUFBT3FQLGlCQUM1SXJQLEVBQU95VSxRQUFRLENBQ2I5QixVQUFXLE9BQ1hZLGNBQWMsRUFDZHFJLGlCQUFrQjViLEVBQU9tRyxPQUFPbE4sUUFBbUMsU0FBekJ1SCxFQUFPK0YsY0FBMkJ2RyxFQUFPd0csdUJBQXlCckYsS0FBS3NGLEtBQUsxRCxXQUFXdkMsRUFBTytGLGNBQWUsUUFHdkpwQixFQUFLc1csaUJBQW1CemIsRUFBT3FQLGlCQUNqQ3FNLEdBQXNCLEVBQ2xCbGIsRUFBT3FiLGFBQ1QxVyxFQUFLc1csaUJBQW1CemIsRUFBT3FQLGVBQWlCLEdBQUtyUCxFQUFPcVAsZUFBaUJsSyxFQUFLNlYsZUFBaUJWLElBQVNxQixLQUk5R0QsSUFDRnpILEVBQUVzRix5QkFBMEIsSUFJekJ2WixFQUFPcVQsZ0JBQTRDLFNBQTFCclQsRUFBT3dZLGdCQUE2QnJULEVBQUtzVyxpQkFBbUJ0VyxFQUFLNlYsaUJBQzdGN1YsRUFBS3NXLGlCQUFtQnRXLEVBQUs2VixpQkFFMUJoYixFQUFPc1QsZ0JBQTRDLFNBQTFCdFQsRUFBT3dZLGdCQUE2QnJULEVBQUtzVyxpQkFBbUJ0VyxFQUFLNlYsaUJBQzdGN1YsRUFBS3NXLGlCQUFtQnRXLEVBQUs2VixnQkFFMUJoYixFQUFPc1QsZ0JBQW1CdFQsRUFBT3FULGlCQUNwQ2xPLEVBQUtzVyxpQkFBbUJ0VyxFQUFLNlYsZ0JBSTNCeGEsRUFBTzhVLFVBQVksRUFBRyxDQUN4QixLQUFJblUsS0FBS3NLLElBQUk2TyxHQUFROVosRUFBTzhVLFdBQWFuUSxFQUFLc1Qsb0JBVzVDLFlBREF0VCxFQUFLc1csaUJBQW1CdFcsRUFBSzZWLGdCQVQ3QixJQUFLN1YsRUFBS3NULG1CQU1SLE9BTEF0VCxFQUFLc1Qsb0JBQXFCLEVBQzFCMUMsRUFBUTZCLE9BQVM3QixFQUFReUIsU0FDekJ6QixFQUFROEIsT0FBUzlCLEVBQVEyQixTQUN6QnZTLEVBQUtzVyxpQkFBbUJ0VyxFQUFLNlYsb0JBQzdCakYsRUFBUXVFLEtBQU90YSxFQUFPOEgsZUFBaUJpTyxFQUFReUIsU0FBV3pCLEVBQVE2QixPQUFTN0IsRUFBUTJCLFNBQVczQixFQUFROEIsT0FPNUcsQ0FDS3JYLEVBQU9zYixlQUFnQnRiLEVBQU84SixXQUcvQjlKLEVBQU93WSxVQUFZeFksRUFBT3dZLFNBQVNoUSxTQUFXaEosRUFBT2daLFVBQVl4WSxFQUFPMk0sdUJBQzFFbk4sRUFBT3FSLG9CQUNQclIsRUFBT29RLHVCQUVMNVAsRUFBT3dZLFVBQVl4WSxFQUFPd1ksU0FBU2hRLFNBQVdoSixFQUFPZ1osVUFDdkRoWixFQUFPZ1osU0FBU0MsY0FHbEJqWixFQUFPa1AsZUFBZS9KLEVBQUtzVyxrQkFFM0J6YixFQUFPdVQsYUFBYXBPLEVBQUtzVyxrQkFDM0IsQ0FFQSxTQUFTTSxFQUFXMWlCLEdBQ2xCLE1BQU0yRyxFQUFTN0MsS0FDVGdJLEVBQU9uRixFQUFPNlYsZ0JBQ2RxRCxFQUFlL1QsRUFBSzJRLFFBQVFxRCxXQUFVQyxHQUFZQSxFQUFTQyxZQUFjaGdCLEVBQU1nZ0IsWUFJckYsR0FISUgsR0FBZ0IsR0FDbEIvVCxFQUFLMlEsUUFBUTlRLE9BQU9rVSxFQUFjLEdBRWhDLENBQUMsZ0JBQWlCLGFBQWMsZUFBZ0IsZUFBZWhTLFNBQVM3TixFQUFNMmlCLFNBQ2hFLENBQUMsZ0JBQWlCLGVBQWU5VSxTQUFTN04sRUFBTTJpQixRQUFVaGMsRUFBT21ELFFBQVE4WSxXQUFZamMsRUFBT21ELFFBQVErWSxXQUVsSCxPQUdKLE1BQU0sT0FDSjFiLEVBQU0sUUFDTnVWLEVBQ0FwTixhQUFjQyxFQUFHLFdBQ2pCUSxFQUFVLFFBQ1ZKLEdBQ0VoSixFQUNKLElBQUtnSixFQUFTLE9BQ2QsSUFBS3hJLEVBQU93VixlQUF1QyxVQUF0QjNjLEVBQU00YyxZQUF5QixPQUM1RCxJQUFJaEMsRUFBSTVhLEVBTVIsR0FMSTRhLEVBQUVpQyxnQkFBZWpDLEVBQUlBLEVBQUVpQyxlQUN2Qi9RLEVBQUtpVCxxQkFDUHBZLEVBQU9rRixLQUFLLFdBQVkrTyxHQUUxQjlPLEVBQUtpVCxxQkFBc0IsR0FDdEJqVCxFQUFLb1IsVUFNUixPQUxJcFIsRUFBS3FSLFNBQVdoVyxFQUFPOGEsWUFDekJ0YixFQUFPdWIsZUFBYyxHQUV2QnBXLEVBQUtxUixTQUFVLE9BQ2ZyUixFQUFLbVQsYUFBYyxHQUlqQjlYLEVBQU84YSxZQUFjblcsRUFBS3FSLFNBQVdyUixFQUFLb1IsYUFBd0MsSUFBMUJ2VyxFQUFPcVQsaUJBQXFELElBQTFCclQsRUFBT3NULGlCQUNuR3RULEVBQU91YixlQUFjLEdBSXZCLE1BQU1ZLEVBQWUsSUFDZkMsRUFBV0QsRUFBZWhYLEVBQUtvVCxlQUdyQyxHQUFJdlksRUFBT3NYLFdBQVksQ0FDckIsTUFBTStFLEVBQVdwSSxFQUFFOUIsTUFBUThCLEVBQUUyQyxjQUFnQjNDLEVBQUUyQyxlQUMvQzVXLEVBQU9rUyxtQkFBbUJtSyxHQUFZQSxFQUFTLElBQU1wSSxFQUFFM2EsT0FBUStpQixHQUMvRHJjLEVBQU9rRixLQUFLLFlBQWErTyxHQUNyQm1JLEVBQVcsS0FBT0QsRUFBZWhYLEVBQUttWCxjQUFnQixLQUN4RHRjLEVBQU9rRixLQUFLLHdCQUF5QitPLEVBRXpDLENBS0EsR0FKQTlPLEVBQUttWCxjQUFnQixJQUNyQixHQUFTLEtBQ0Z0YyxFQUFPaUUsWUFBV2pFLEVBQU9zWCxZQUFhLEVBQUksS0FFNUNuUyxFQUFLb1IsWUFBY3BSLEVBQUtxUixVQUFZeFcsRUFBT3dZLGdCQUFtQyxJQUFqQnpDLEVBQVF1RSxNQUFjblYsRUFBS3NXLG1CQUFxQnRXLEVBQUs2VixlQUlySCxPQUhBN1YsRUFBS29SLFdBQVksRUFDakJwUixFQUFLcVIsU0FBVSxPQUNmclIsRUFBS21ULGFBQWMsR0FNckIsSUFBSWlFLEVBTUosR0FUQXBYLEVBQUtvUixXQUFZLEVBQ2pCcFIsRUFBS3FSLFNBQVUsRUFDZnJSLEVBQUttVCxhQUFjLEVBR2pCaUUsRUFERS9iLEVBQU9zYixhQUNJbFQsRUFBTTVJLEVBQU9JLFdBQWFKLEVBQU9JLFdBRWhDK0UsRUFBS3NXLGlCQUVqQmpiLEVBQU84SixRQUNULE9BRUYsR0FBSTlKLEVBQU93WSxVQUFZeFksRUFBT3dZLFNBQVNoUSxRQUlyQyxZQUhBaEosRUFBT2daLFNBQVMrQyxXQUFXLENBQ3pCUSxlQU1KLElBQUlDLEVBQVksRUFDWnBRLEVBQVlwTSxFQUFPcUosZ0JBQWdCLEdBQ3ZDLElBQUssSUFBSXJRLEVBQUksRUFBR0EsRUFBSW9RLEVBQVduUSxPQUFRRCxHQUFLQSxFQUFJd0gsRUFBT21MLG1CQUFxQixFQUFJbkwsRUFBT2tMLGVBQWdCLENBQ3JHLE1BQU02SSxFQUFZdmIsRUFBSXdILEVBQU9tTCxtQkFBcUIsRUFBSSxFQUFJbkwsRUFBT2tMLG9CQUN4QixJQUE5QnRDLEVBQVdwUSxFQUFJdWIsR0FDcEJnSSxHQUFjblQsRUFBV3BRLElBQU11akIsRUFBYW5ULEVBQVdwUSxFQUFJdWIsS0FDN0RpSSxFQUFZeGpCLEVBQ1pvVCxFQUFZaEQsRUFBV3BRLEVBQUl1YixHQUFhbkwsRUFBV3BRLElBRTVDdWpCLEdBQWNuVCxFQUFXcFEsS0FDbEN3akIsRUFBWXhqQixFQUNab1QsRUFBWWhELEVBQVdBLEVBQVduUSxPQUFTLEdBQUttUSxFQUFXQSxFQUFXblEsT0FBUyxHQUVuRixDQUNBLElBQUl3akIsRUFBbUIsS0FDbkJDLEVBQWtCLEtBQ2xCbGMsRUFBTzZHLFNBQ0xySCxFQUFPc1AsWUFDVG9OLEVBQWtCbGMsRUFBT3VJLFNBQVd2SSxFQUFPdUksUUFBUUMsU0FBV2hKLEVBQU8rSSxRQUFVL0ksRUFBTytJLFFBQVE1QyxPQUFPbE4sT0FBUyxFQUFJK0csRUFBT21HLE9BQU9sTixPQUFTLEVBQ2hJK0csRUFBT3VQLFFBQ2hCa04sRUFBbUIsSUFJdkIsTUFBTUUsR0FBU0osRUFBYW5ULEVBQVdvVCxJQUFjcFEsRUFDL0NtSSxFQUFZaUksRUFBWWhjLEVBQU9tTCxtQkFBcUIsRUFBSSxFQUFJbkwsRUFBT2tMLGVBQ3pFLEdBQUkwUSxFQUFXNWIsRUFBT29jLGFBQWMsQ0FFbEMsSUFBS3BjLEVBQU9xYyxXQUVWLFlBREE3YyxFQUFPNlMsUUFBUTdTLEVBQU8wRyxhQUdNLFNBQTFCMUcsRUFBT3dZLGlCQUNMbUUsR0FBU25jLEVBQU9zYyxnQkFBaUI5YyxFQUFPNlMsUUFBUXJTLEVBQU82RyxRQUFVckgsRUFBT3VQLE1BQVFrTixFQUFtQkQsRUFBWWpJLEdBQWdCdlUsRUFBTzZTLFFBQVEySixJQUV0SCxTQUExQnhjLEVBQU93WSxpQkFDTG1FLEVBQVEsRUFBSW5jLEVBQU9zYyxnQkFDckI5YyxFQUFPNlMsUUFBUTJKLEVBQVlqSSxHQUNFLE9BQXBCbUksR0FBNEJDLEVBQVEsR0FBS3hiLEtBQUtzSyxJQUFJa1IsR0FBU25jLEVBQU9zYyxnQkFDM0U5YyxFQUFPNlMsUUFBUTZKLEdBRWYxYyxFQUFPNlMsUUFBUTJKLEdBR3JCLEtBQU8sQ0FFTCxJQUFLaGMsRUFBT3VjLFlBRVYsWUFEQS9jLEVBQU82UyxRQUFRN1MsRUFBTzBHLGNBR0UxRyxFQUFPZ2QsWUFBZS9JLEVBQUUzYSxTQUFXMEcsRUFBT2dkLFdBQVdDLFFBQVVoSixFQUFFM2EsU0FBVzBHLEVBQU9nZCxXQUFXRSxRQUV4RixTQUExQmxkLEVBQU93WSxnQkFDVHhZLEVBQU82UyxRQUE2QixPQUFyQjRKLEVBQTRCQSxFQUFtQkQsRUFBWWpJLEdBRTlDLFNBQTFCdlUsRUFBT3dZLGdCQUNUeFksRUFBTzZTLFFBQTRCLE9BQXBCNkosRUFBMkJBLEVBQWtCRixJQUVyRHZJLEVBQUUzYSxTQUFXMEcsRUFBT2dkLFdBQVdDLE9BQ3hDamQsRUFBTzZTLFFBQVEySixFQUFZakksR0FFM0J2VSxFQUFPNlMsUUFBUTJKLEVBRW5CLENBQ0YsQ0FFQSxTQUFTVyxJQUNQLE1BQU1uZCxFQUFTN0MsTUFDVCxPQUNKcUQsRUFBTSxHQUNOZCxHQUNFTSxFQUNKLEdBQUlOLEdBQXlCLElBQW5CQSxFQUFHc0QsWUFBbUIsT0FHNUJ4QyxFQUFPbUssYUFDVDNLLEVBQU9vZCxnQkFJVCxNQUFNLGVBQ0ovSixFQUFjLGVBQ2RDLEVBQWMsU0FDZG5LLEdBQ0VuSixFQUNFOEksRUFBWTlJLEVBQU8rSSxTQUFXL0ksRUFBT1EsT0FBT3VJLFFBQVFDLFFBRzFEaEosRUFBT3FULGdCQUFpQixFQUN4QnJULEVBQU9zVCxnQkFBaUIsRUFDeEJ0VCxFQUFPeUgsYUFDUHpILEVBQU9vSSxlQUNQcEksRUFBT29RLHNCQUNQLE1BQU1pTixFQUFnQnZVLEdBQWF0SSxFQUFPOEcsT0FDWixTQUF6QjlHLEVBQU8rRixlQUE0Qi9GLEVBQU8rRixjQUFnQixLQUFNdkcsRUFBT3VQLE9BQVV2UCxFQUFPc1AsYUFBZ0J0UCxFQUFPUSxPQUFPNkosZ0JBQW1CZ1QsRUFHeElyZCxFQUFPUSxPQUFPOEcsT0FBU3dCLEVBQ3pCOUksRUFBT2tVLFlBQVlsVSxFQUFPdUgsVUFBVyxHQUFHLEdBQU8sR0FFL0N2SCxFQUFPNlMsUUFBUTdTLEVBQU8wRyxZQUFhLEdBQUcsR0FBTyxHQUwvQzFHLEVBQU82UyxRQUFRN1MsRUFBT21HLE9BQU9sTixPQUFTLEVBQUcsR0FBRyxHQUFPLEdBUWpEK0csRUFBT3NkLFVBQVl0ZCxFQUFPc2QsU0FBU0MsU0FBV3ZkLEVBQU9zZCxTQUFTRSxTQUNoRTlmLGFBQWFzQyxFQUFPc2QsU0FBU0csZUFDN0J6ZCxFQUFPc2QsU0FBU0csY0FBZ0JoZ0IsWUFBVyxLQUNyQ3VDLEVBQU9zZCxVQUFZdGQsRUFBT3NkLFNBQVNDLFNBQVd2ZCxFQUFPc2QsU0FBU0UsUUFDaEV4ZCxFQUFPc2QsU0FBU0ksUUFDbEIsR0FDQyxNQUdMMWQsRUFBT3NULGVBQWlCQSxFQUN4QnRULEVBQU9xVCxlQUFpQkEsRUFDcEJyVCxFQUFPUSxPQUFPeU0sZUFBaUI5RCxJQUFhbkosRUFBT21KLFVBQ3JEbkosRUFBT2tOLGVBRVgsQ0FFQSxTQUFTeVEsRUFBUTFKLEdBQ2YsTUFBTWpVLEVBQVM3QyxLQUNWNkMsRUFBT2dKLFVBQ1BoSixFQUFPc1gsYUFDTnRYLEVBQU9RLE9BQU9vZCxlQUFlM0osRUFBRWtFLGlCQUMvQm5ZLEVBQU9RLE9BQU9xZCwwQkFBNEI3ZCxFQUFPZ1QsWUFDbkRpQixFQUFFb0csa0JBQ0ZwRyxFQUFFNkosNkJBR1IsQ0FFQSxTQUFTQyxJQUNQLE1BQU0vZCxFQUFTN0MsTUFDVCxVQUNKdUQsRUFBUyxhQUNUaUksRUFBWSxRQUNaSyxHQUNFaEosRUFDSixJQUFLZ0osRUFBUyxPQVdkLElBQUlnVixFQVZKaGUsRUFBT2llLGtCQUFvQmplLEVBQU9JLFVBQzlCSixFQUFPOEgsZUFDVDlILEVBQU9JLFdBQWFNLEVBQVV3ZCxXQUU5QmxlLEVBQU9JLFdBQWFNLEVBQVV5ZCxVQUdQLElBQXJCbmUsRUFBT0ksWUFBaUJKLEVBQU9JLFVBQVksR0FDL0NKLEVBQU9xUixvQkFDUHJSLEVBQU9vUSxzQkFFUCxNQUFNaEIsRUFBaUJwUCxFQUFPcVAsZUFBaUJyUCxFQUFPNk8sZUFFcERtUCxFQURxQixJQUFuQjVPLEVBQ1ksR0FFQ3BQLEVBQU9JLFVBQVlKLEVBQU82TyxnQkFBa0JPLEVBRXpENE8sSUFBZ0JoZSxFQUFPa0IsVUFDekJsQixFQUFPa1AsZUFBZXZHLEdBQWdCM0ksRUFBT0ksVUFBWUosRUFBT0ksV0FFbEVKLEVBQU9rRixLQUFLLGVBQWdCbEYsRUFBT0ksV0FBVyxFQUNoRCxDQUVBLFNBQVNnZSxFQUFPbkssR0FDZCxNQUFNalUsRUFBUzdDLEtBQ2ZxSSxFQUFxQnhGLEVBQVFpVSxFQUFFM2EsUUFDM0IwRyxFQUFPUSxPQUFPOEosU0FBMkMsU0FBaEN0SyxFQUFPUSxPQUFPK0YsZ0JBQTZCdkcsRUFBT1EsT0FBTzJQLFlBR3RGblEsRUFBT3dILFFBQ1QsQ0FFQSxJQUFJNlcsR0FBcUIsRUFDekIsU0FBU0MsSUFBc0IsQ0FDL0IsTUFBTTFhLEVBQVMsQ0FBQzVELEVBQVFrRSxLQUN0QixNQUFNcEwsRUFBVyxLQUNYLE9BQ0owSCxFQUFNLEdBQ05kLEVBQUUsVUFDRmdCLEVBQVMsT0FDVDZkLEdBQ0V2ZSxFQUNFd2UsSUFBWWhlLEVBQU80WixPQUNuQnFFLEVBQXVCLE9BQVh2YSxFQUFrQixtQkFBcUIsc0JBQ25Ed2EsRUFBZXhhLEVBR3JCeEUsRUFBRytlLEdBQVcsY0FBZXplLEVBQU80VixhQUFjLENBQ2hEK0ksU0FBUyxJQUVYN2xCLEVBQVMybEIsR0FBVyxjQUFlemUsRUFBT2laLFlBQWEsQ0FDckQwRixTQUFTLEVBQ1RILFlBRUYxbEIsRUFBUzJsQixHQUFXLFlBQWF6ZSxFQUFPK2IsV0FBWSxDQUNsRDRDLFNBQVMsSUFFWDdsQixFQUFTMmxCLEdBQVcsZ0JBQWlCemUsRUFBTytiLFdBQVksQ0FDdEQ0QyxTQUFTLElBRVg3bEIsRUFBUzJsQixHQUFXLGFBQWN6ZSxFQUFPK2IsV0FBWSxDQUNuRDRDLFNBQVMsSUFFWDdsQixFQUFTMmxCLEdBQVcsZUFBZ0J6ZSxFQUFPK2IsV0FBWSxDQUNyRDRDLFNBQVMsSUFFWDdsQixFQUFTMmxCLEdBQVcsY0FBZXplLEVBQU8rYixXQUFZLENBQ3BENEMsU0FBUyxLQUlQbmUsRUFBT29kLGVBQWlCcGQsRUFBT3FkLDJCQUNqQ25lLEVBQUcrZSxHQUFXLFFBQVN6ZSxFQUFPMmQsU0FBUyxHQUVyQ25kLEVBQU84SixTQUNUNUosRUFBVStkLEdBQVcsU0FBVXplLEVBQU8rZCxVQUlwQ3ZkLEVBQU9vZSxxQkFDVDVlLEVBQU8wZSxHQUFjSCxFQUFPTSxLQUFPTixFQUFPTyxRQUFVLDBDQUE0Qyx3QkFBeUIzQixHQUFVLEdBRW5JbmQsRUFBTzBlLEdBQWMsaUJBQWtCdkIsR0FBVSxHQUluRHpkLEVBQUcrZSxHQUFXLE9BQVF6ZSxFQUFPb2UsT0FBUSxDQUNuQ0ksU0FBUyxHQUNULEVBK0JKLE1BQU1PLEVBQWdCLENBQUMvZSxFQUFRUSxJQUN0QlIsRUFBTzJHLE1BQVFuRyxFQUFPbUcsTUFBUW5HLEVBQU9tRyxLQUFLQyxLQUFPLEVBdUgxRCxJQXdHSW9ZLEVBQVcsQ0FDYkMsTUFBTSxFQUNOdE0sVUFBVyxhQUNYK0gsZ0JBQWdCLEVBQ2hCdEUsa0JBQW1CLFVBQ25CdEMsYUFBYyxFQUNkclQsTUFBTyxJQUNQNkosU0FBUyxFQUNUc1Usc0JBQXNCLEVBQ3RCTSxnQkFBZ0IsRUFDaEI5RSxRQUFRLEVBQ1IrRSxnQkFBZ0IsRUFDaEJuVyxTQUFTLEVBQ1QwUCxrQkFBbUIsd0RBRW5CaFIsTUFBTyxLQUNQQyxPQUFRLEtBRVJzTCxnQ0FBZ0MsRUFFaENyVyxVQUFXLEtBQ1h3aUIsSUFBSyxLQUVMdEgsb0JBQW9CLEVBQ3BCRSxtQkFBb0IsR0FFcEI3SCxZQUFZLEVBRVp0RSxnQkFBZ0IsRUFFaEJ3VCxrQkFBa0IsRUFFbEJ6VCxPQUFRLFFBSVJqQixpQkFBYXhRLEVBQ2JtbEIsZ0JBQWlCLFNBRWpCMVYsYUFBYyxFQUNkckQsY0FBZSxFQUNmbUYsZUFBZ0IsRUFDaEJDLG1CQUFvQixFQUNwQjJJLG9CQUFvQixFQUNwQmpLLGdCQUFnQixFQUNoQmlDLHNCQUFzQixFQUN0Qi9DLG1CQUFvQixFQUVwQkUsa0JBQW1CLEVBRW5CbUkscUJBQXFCLEVBQ3JCakYsMEJBQTBCLEVBRTFCTSxlQUFlLEVBRWY5QixjQUFjLEVBRWR3UCxXQUFZLEVBQ1paLFdBQVksR0FDWi9ELGVBQWUsRUFDZitHLGFBQWEsRUFDYkYsWUFBWSxFQUNaQyxnQkFBaUIsR0FDakJGLGFBQWMsSUFDZGQsY0FBYyxFQUNkbEQsZ0JBQWdCLEVBQ2hCdEQsVUFBVyxFQUNYNkUsMEJBQTBCLEVBQzFCdEIsMEJBQTBCLEVBQzFCQywrQkFBK0IsRUFDL0JZLHFCQUFxQixFQUVyQjZGLG1CQUFtQixFQUVuQjFELFlBQVksRUFDWkYsZ0JBQWlCLElBRWpCeE8scUJBQXFCLEVBRXJCbU8sWUFBWSxFQUVac0MsZUFBZSxFQUNmQywwQkFBMEIsRUFDMUJyTCxxQkFBcUIsRUFFckJsTCxNQUFNLEVBQ05vTyxhQUFjLEtBQ2RsQixxQkFBcUIsRUFFckJuTixRQUFRLEVBRVJpTSxnQkFBZ0IsRUFDaEJELGdCQUFnQixFQUNoQmtFLGFBQWMsS0FFZFIsV0FBVyxFQUNYTCxlQUFnQixvQkFDaEJHLGtCQUFtQixLQUVuQjJJLGtCQUFrQixFQUNsQi9SLHdCQUF5QixHQUV6QkgsdUJBQXdCLFVBRXhCekgsV0FBWSxlQUNaMEssaUJBQWtCLHNCQUNsQjlCLGtCQUFtQix1QkFDbkIrQixlQUFnQixvQkFDaEJDLGVBQWdCLG9CQUNoQmdQLGFBQWMsaUJBQ2QxWixtQkFBb0Isd0JBQ3BCTyxvQkFBcUIsRUFFckIyTCxvQkFBb0IsRUFFcEJ5TixjQUFjLEdBR2hCLFNBQVNDLEVBQW1CbmYsRUFBUW9mLEdBQ2xDLE9BQU8sU0FBc0JybEIsUUFDZixJQUFSQSxJQUNGQSxFQUFNLENBQUMsR0FFVCxNQUFNc2xCLEVBQWtCcGxCLE9BQU9HLEtBQUtMLEdBQUssR0FDbkN1bEIsRUFBZXZsQixFQUFJc2xCLEdBQ0csaUJBQWpCQyxHQUE4QyxPQUFqQkEsSUFJUixJQUE1QnRmLEVBQU9xZixLQUNUcmYsRUFBT3FmLEdBQW1CLENBQ3hCN1csU0FBUyxJQUdXLGVBQXBCNlcsR0FBb0NyZixFQUFPcWYsSUFBb0JyZixFQUFPcWYsR0FBaUI3VyxVQUFZeEksRUFBT3FmLEdBQWlCM0MsU0FBVzFjLEVBQU9xZixHQUFpQjVDLFNBQ2hLemMsRUFBT3FmLEdBQWlCRSxNQUFPLEdBRTdCLENBQUMsYUFBYyxhQUFhN2dCLFFBQVEyZ0IsSUFBb0IsR0FBS3JmLEVBQU9xZixJQUFvQnJmLEVBQU9xZixHQUFpQjdXLFVBQVl4SSxFQUFPcWYsR0FBaUJuZ0IsS0FDdEpjLEVBQU9xZixHQUFpQkUsTUFBTyxHQUUzQkYsS0FBbUJyZixHQUFVLFlBQWFzZixHQUlULGlCQUE1QnRmLEVBQU9xZixJQUFtQyxZQUFhcmYsRUFBT3FmLEtBQ3ZFcmYsRUFBT3FmLEdBQWlCN1csU0FBVSxHQUUvQnhJLEVBQU9xZixLQUFrQnJmLEVBQU9xZixHQUFtQixDQUN0RDdXLFNBQVMsSUFFWCxFQUFPNFcsRUFBa0JybEIsSUFUdkIsRUFBT3FsQixFQUFrQnJsQixJQWZ6QixFQUFPcWxCLEVBQWtCcmxCLEVBeUI3QixDQUNGLENBR0EsTUFBTXlsQixFQUFhLENBQ2pCdGMsZ0JBQ0E4RCxTQUNBcEgsVUFsd0RjLENBQ2Q2YSxhQWpLRixTQUE0QmdGLFFBQ2IsSUFBVEEsSUFDRkEsRUFBTzlpQixLQUFLMkssZUFBaUIsSUFBTSxLQUVyQyxNQUNNLE9BQ0p0SCxFQUNBbUksYUFBY0MsRUFBRyxVQUNqQnhJLEVBQVMsVUFDVE0sR0FMYXZELEtBT2YsR0FBSXFELEVBQU82ZSxpQkFDVCxPQUFPelcsR0FBT3hJLEVBQVlBLEVBRTVCLEdBQUlJLEVBQU84SixRQUNULE9BQU9sSyxFQUVULElBQUlxYixFRC9pQ04sU0FBc0IvYixFQUFJdWdCLFFBQ1gsSUFBVEEsSUFDRkEsRUFBTyxLQUVULE1BQU1oaUIsRUFBUyxJQUNmLElBQUlpaUIsRUFDQUMsRUFDQUMsRUFDSixNQUFNQyxFQXRCUixTQUEwQjNnQixHQUN4QixNQUFNekIsRUFBUyxJQUNmLElBQUl0QyxFQVVKLE9BVElzQyxFQUFPYixtQkFDVHpCLEVBQVFzQyxFQUFPYixpQkFBaUJzQyxFQUFJLFFBRWpDL0QsR0FBUytELEVBQUc0Z0IsZUFDZjNrQixFQUFRK0QsRUFBRzRnQixjQUVSM2tCLElBQ0hBLEVBQVErRCxFQUFHL0QsT0FFTkEsQ0FDVCxDQVNtQixDQUFpQitELEdBNkJsQyxPQTVCSXpCLEVBQU9zaUIsaUJBQ1RKLEVBQWVFLEVBQVNyVixXQUFhcVYsRUFBU25WLGdCQUMxQ2lWLEVBQWFoYyxNQUFNLEtBQUtsTCxPQUFTLElBQ25Da25CLEVBQWVBLEVBQWFoYyxNQUFNLE1BQU02QyxLQUFJd1osR0FBS0EsRUFBRXpXLFFBQVEsSUFBSyxPQUFNMFcsS0FBSyxPQUk3RUwsRUFBa0IsSUFBSW5pQixFQUFPc2lCLGdCQUFpQyxTQUFqQkosRUFBMEIsR0FBS0EsS0FFNUVDLEVBQWtCQyxFQUFTSyxjQUFnQkwsRUFBU00sWUFBY04sRUFBU08sYUFBZVAsRUFBU1EsYUFBZVIsRUFBU3JWLFdBQWFxVixFQUFTaGpCLGlCQUFpQixhQUFhME0sUUFBUSxhQUFjLHNCQUNyTW1XLEVBQVNFLEVBQWdCOWhCLFdBQVc2RixNQUFNLE1BRS9CLE1BQVQ4YixJQUUwQkUsRUFBeEJsaUIsRUFBT3NpQixnQkFBZ0NILEVBQWdCVSxJQUVoQyxLQUFsQlosRUFBT2puQixPQUE4QjhKLFdBQVdtZCxFQUFPLEtBRTVDbmQsV0FBV21kLEVBQU8sS0FFM0IsTUFBVEQsSUFFMEJFLEVBQXhCbGlCLEVBQU9zaUIsZ0JBQWdDSCxFQUFnQlcsSUFFaEMsS0FBbEJiLEVBQU9qbkIsT0FBOEI4SixXQUFXbWQsRUFBTyxLQUU1Q25kLFdBQVdtZCxFQUFPLEtBRWpDQyxHQUFnQixDQUN6QixDQ3lnQ3lCLENBQWF6ZixFQUFXdWYsR0FHL0MsT0FGQXhFLEdBZGV0ZSxLQWNZbVIsd0JBQ3ZCMUYsSUFBSzZTLEdBQW9CQSxHQUN0QkEsR0FBb0IsQ0FDN0IsRUE2SUVsSSxhQTNJRixTQUFzQm5ULEVBQVc0Z0IsR0FDL0IsTUFBTWhoQixFQUFTN0MsTUFFYndMLGFBQWNDLEVBQUcsT0FDakJwSSxFQUFNLFVBQ05FLEVBQVMsU0FDVFEsR0FDRWxCLEVBQ0osSUEwQklnZSxFQTFCQWlELEVBQUksRUFDSkMsRUFBSSxFQUVKbGhCLEVBQU84SCxlQUNUbVosRUFBSXJZLEdBQU94SSxFQUFZQSxFQUV2QjhnQixFQUFJOWdCLEVBRUZJLEVBQU8ySyxlQUNUOFYsRUFBSTlmLEtBQUtvSyxNQUFNMFYsR0FDZkMsRUFBSS9mLEtBQUtvSyxNQUFNMlYsSUFFakJsaEIsRUFBT2llLGtCQUFvQmplLEVBQU9JLFVBQ2xDSixFQUFPSSxVQUFZSixFQUFPOEgsZUFBaUJtWixFQUFJQyxFQUMzQzFnQixFQUFPOEosUUFDVDVKLEVBQVVWLEVBQU84SCxlQUFpQixhQUFlLGFBQWU5SCxFQUFPOEgsZ0JBQWtCbVosR0FBS0MsRUFDcEYxZ0IsRUFBTzZlLG1CQUNicmYsRUFBTzhILGVBQ1RtWixHQUFLamhCLEVBQU9zTyx3QkFFWjRTLEdBQUtsaEIsRUFBT3NPLHdCQUVkNU4sRUFBVS9FLE1BQU1xUCxVQUFZLGVBQWVpVyxRQUFRQyxhQUtyRCxNQUFNOVIsRUFBaUJwUCxFQUFPcVAsZUFBaUJyUCxFQUFPNk8sZUFFcERtUCxFQURxQixJQUFuQjVPLEVBQ1ksR0FFQ2hQLEVBQVlKLEVBQU82TyxnQkFBa0JPLEVBRWxENE8sSUFBZ0I5YyxHQUNsQmxCLEVBQU9rUCxlQUFlOU8sR0FFeEJKLEVBQU9rRixLQUFLLGVBQWdCbEYsRUFBT0ksVUFBVzRnQixFQUNoRCxFQStGRW5TLGFBN0ZGLFdBQ0UsT0FBUTFSLEtBQUtnTSxTQUFTLEVBQ3hCLEVBNEZFa0csYUExRkYsV0FDRSxPQUFRbFMsS0FBS2dNLFNBQVNoTSxLQUFLZ00sU0FBU2xRLE9BQVMsRUFDL0MsRUF5RkVrb0IsWUF2RkYsU0FBcUIvZ0IsRUFBV0ssRUFBT2lTLEVBQWMwTyxFQUFpQnRPLFFBQ2xELElBQWQxUyxJQUNGQSxFQUFZLFFBRUEsSUFBVkssSUFDRkEsRUFBUXRELEtBQUtxRCxPQUFPQyxZQUVELElBQWpCaVMsSUFDRkEsR0FBZSxRQUVPLElBQXBCME8sSUFDRkEsR0FBa0IsR0FFcEIsTUFBTXBoQixFQUFTN0MsTUFDVCxPQUNKcUQsRUFBTSxVQUNORSxHQUNFVixFQUNKLEdBQUlBLEVBQU9nVCxXQUFheFMsRUFBT3lTLCtCQUM3QixPQUFPLEVBRVQsTUFBTXBFLEVBQWU3TyxFQUFPNk8sZUFDdEJRLEVBQWVyUCxFQUFPcVAsZUFDNUIsSUFBSWdTLEVBS0osR0FKaURBLEVBQTdDRCxHQUFtQmhoQixFQUFZeU8sRUFBNkJBLEVBQXNCdVMsR0FBbUJoaEIsRUFBWWlQLEVBQTZCQSxFQUFpQ2pQLEVBR25MSixFQUFPa1AsZUFBZW1TLEdBQ2xCN2dCLEVBQU84SixRQUFTLENBQ2xCLE1BQU1vSixFQUFNMVQsRUFBTzhILGVBQ25CLEdBQWMsSUFBVnJILEVBQ0ZDLEVBQVVnVCxFQUFNLGFBQWUsY0FBZ0IyTixNQUMxQyxDQUNMLElBQUtyaEIsRUFBT2lELFFBQVFJLGFBTWxCLE9BTEF2RCxFQUFxQixDQUNuQkUsU0FDQUMsZ0JBQWlCb2hCLEVBQ2pCbmhCLEtBQU13VCxFQUFNLE9BQVMsU0FFaEIsRUFFVGhULEVBQVVnQixTQUFTLENBQ2pCLENBQUNnUyxFQUFNLE9BQVMsUUFBUzJOLEVBQ3pCdE4sU0FBVSxVQUVkLENBQ0EsT0FBTyxDQUNULENBZ0NBLE9BL0JjLElBQVZ0VCxHQUNGVCxFQUFPNk4sY0FBYyxHQUNyQjdOLEVBQU91VCxhQUFhOE4sR0FDaEIzTyxJQUNGMVMsRUFBT2tGLEtBQUssd0JBQXlCekUsRUFBT3FTLEdBQzVDOVMsRUFBT2tGLEtBQUssb0JBR2RsRixFQUFPNk4sY0FBY3BOLEdBQ3JCVCxFQUFPdVQsYUFBYThOLEdBQ2hCM08sSUFDRjFTLEVBQU9rRixLQUFLLHdCQUF5QnpFLEVBQU9xUyxHQUM1QzlTLEVBQU9rRixLQUFLLG9CQUVUbEYsRUFBT2dULFlBQ1ZoVCxFQUFPZ1QsV0FBWSxFQUNkaFQsRUFBT3NoQixvQ0FDVnRoQixFQUFPc2hCLGtDQUFvQyxTQUF1QnJOLEdBQzNEalUsSUFBVUEsRUFBT2lFLFdBQ2xCZ1EsRUFBRTNhLFNBQVc2RCxPQUNqQjZDLEVBQU9VLFVBQVV6RixvQkFBb0IsZ0JBQWlCK0UsRUFBT3NoQixtQ0FDN0R0aEIsRUFBT3NoQixrQ0FBb0MsWUFDcEN0aEIsRUFBT3NoQixrQ0FDVjVPLEdBQ0YxUyxFQUFPa0YsS0FBSyxpQkFFaEIsR0FFRmxGLEVBQU9VLFVBQVV4SCxpQkFBaUIsZ0JBQWlCOEcsRUFBT3NoQixzQ0FHdkQsQ0FDVCxHQXF3REVDLFdBN3FEZSxDQUNmMVQsY0EvRUYsU0FBdUJ0TixFQUFVeWdCLEdBQy9CLE1BQU1oaEIsRUFBUzdDLEtBQ1Y2QyxFQUFPUSxPQUFPOEosVUFDakJ0SyxFQUFPVSxVQUFVL0UsTUFBTTZsQixtQkFBcUIsR0FBR2poQixNQUMvQ1AsRUFBT1UsVUFBVS9FLE1BQU04bEIsZ0JBQStCLElBQWJsaEIsRUFBaUIsTUFBUSxJQUVwRVAsRUFBT2tGLEtBQUssZ0JBQWlCM0UsRUFBVXlnQixFQUN6QyxFQXlFRXhOLGdCQXpDRixTQUF5QmQsRUFBY0MsUUFDaEIsSUFBakJELElBQ0ZBLEdBQWUsR0FFakIsTUFBTTFTLEVBQVM3QyxNQUNULE9BQ0pxRCxHQUNFUixFQUNBUSxFQUFPOEosVUFDUDlKLEVBQU8yUCxZQUNUblEsRUFBTzBOLG1CQUVUK0UsRUFBZSxDQUNielMsU0FDQTBTLGVBQ0FDLFlBQ0FDLEtBQU0sVUFFVixFQXdCRWEsY0F0QkYsU0FBdUJmLEVBQWNDLFFBQ2QsSUFBakJELElBQ0ZBLEdBQWUsR0FFakIsTUFBTTFTLEVBQVM3QyxNQUNULE9BQ0pxRCxHQUNFUixFQUNKQSxFQUFPZ1QsV0FBWSxFQUNmeFMsRUFBTzhKLFVBQ1h0SyxFQUFPNk4sY0FBYyxHQUNyQjRFLEVBQWUsQ0FDYnpTLFNBQ0EwUyxlQUNBQyxZQUNBQyxLQUFNLFFBRVYsR0FnckRFaEksUUFDQXRELEtBcG1DUyxDQUNUb2EsV0F0TUYsU0FBb0JDLEdBQ2xCLE1BQU0zaEIsRUFBUzdDLE1BQ1QsT0FDSnFELEVBQU0sU0FDTmlJLEdBQ0V6SSxHQUNDUSxFQUFPOEcsTUFBUXRILEVBQU8rSSxTQUFXL0ksRUFBT1EsT0FBT3VJLFFBQVFDLFVBQzdDLEVBQWdCUCxFQUFVLElBQUlqSSxFQUFPcUYsNEJBQzdDaEwsU0FBUSxDQUFDNkUsRUFBSXFGLEtBQ2xCckYsRUFBRzlELGFBQWEsMEJBQTJCbUosRUFBTSxJQUVuRC9FLEVBQU95VSxRQUFRLENBQ2JrTixpQkFDQWhQLFVBQVduUyxFQUFPNkosb0JBQWlCbFEsRUFBWSxTQUVuRCxFQXdMRXNhLFFBdExGLFNBQWlCbU4sR0FDZixJQUFJLGVBQ0ZELEVBQWMsUUFDZDlPLEdBQVUsRUFBSSxVQUNkRixFQUFTLGFBQ1RZLEVBQVksaUJBQ1pxSSxFQUFnQixhQUNoQm9GLEVBQVksYUFDWmEsUUFDWSxJQUFWRCxFQUFtQixDQUFDLEVBQUlBLEVBQzVCLE1BQU01aEIsRUFBUzdDLEtBQ2YsSUFBSzZDLEVBQU9RLE9BQU84RyxLQUFNLE9BQ3pCdEgsRUFBT2tGLEtBQUssaUJBQ1osTUFBTSxPQUNKaUIsRUFBTSxlQUNObU4sRUFBYyxlQUNkRCxFQUFjLFNBQ2Q1SyxFQUFRLE9BQ1JqSSxHQUNFUixFQUdKLEdBRkFBLEVBQU9zVCxnQkFBaUIsRUFDeEJ0VCxFQUFPcVQsZ0JBQWlCLEVBQ3BCclQsRUFBTytJLFNBQVd2SSxFQUFPdUksUUFBUUMsUUFhbkMsT0FaSTZKLElBQ0dyUyxFQUFPNkosZ0JBQXVDLElBQXJCckssRUFBTzZNLFVBRTFCck0sRUFBTzZKLGdCQUFrQnJLLEVBQU82TSxVQUFZck0sRUFBTytGLGNBQzVEdkcsRUFBTzZTLFFBQVE3UyxFQUFPK0ksUUFBUTVDLE9BQU9sTixPQUFTK0csRUFBTzZNLFVBQVcsR0FBRyxHQUFPLEdBQ2pFN00sRUFBTzZNLFlBQWM3TSxFQUFPbUosU0FBU2xRLE9BQVMsR0FDdkQrRyxFQUFPNlMsUUFBUTdTLEVBQU8rSSxRQUFRbUQsYUFBYyxHQUFHLEdBQU8sR0FKdERsTSxFQUFPNlMsUUFBUTdTLEVBQU8rSSxRQUFRNUMsT0FBT2xOLE9BQVEsR0FBRyxHQUFPLElBTzNEK0csRUFBT3NULGVBQWlCQSxFQUN4QnRULEVBQU9xVCxlQUFpQkEsT0FDeEJyVCxFQUFPa0YsS0FBSyxXQUdkLE1BQU1xQixFQUF5QyxTQUF6Qi9GLEVBQU8rRixjQUEyQnZHLEVBQU93Ryx1QkFBeUJyRixLQUFLc0YsS0FBSzFELFdBQVd2QyxFQUFPK0YsY0FBZSxLQUNuSSxJQUFJbVAsRUFBZWxWLEVBQU9rVixjQUFnQm5QLEVBQ3RDbVAsRUFBZWxWLEVBQU9rTCxnQkFBbUIsSUFDM0NnSyxHQUFnQmxWLEVBQU9rTCxlQUFpQmdLLEVBQWVsVixFQUFPa0wsZ0JBRWhFMUwsRUFBTzBWLGFBQWVBLEVBQ3RCLE1BQU1vTSxFQUF1QixHQUN2QkMsRUFBc0IsR0FDNUIsSUFBSXJiLEVBQWMxRyxFQUFPMEcsaUJBQ08sSUFBckJrVixFQUNUQSxFQUFtQjViLEVBQU8yVixjQUFjM1YsRUFBT21HLE9BQU9sSCxRQUFPUyxHQUFNQSxFQUFHN0YsVUFBVTJULFNBQVNoTixFQUFPK1Asb0JBQW1CLElBRW5IN0osRUFBY2tWLEVBRWhCLE1BQU1vRyxFQUF1QixTQUFkclAsSUFBeUJBLEVBQ2xDc1AsRUFBdUIsU0FBZHRQLElBQXlCQSxFQUN4QyxJQUFJdVAsRUFBa0IsRUFDbEJDLEVBQWlCLEVBRXJCLEdBQUl2RyxFQUFtQmxHLEVBQWMsQ0FDbkN3TSxFQUFrQi9nQixLQUFLQyxJQUFJc1UsRUFBZWtHLEVBQWtCcGIsRUFBT2tMLGdCQUNuRSxJQUFLLElBQUkxUyxFQUFJLEVBQUdBLEVBQUkwYyxFQUFla0csRUFBa0I1aUIsR0FBSyxFQUFHLENBQzNELE1BQU0rTCxFQUFRL0wsRUFBSW1JLEtBQUtvSyxNQUFNdlMsRUFBSW1OLEVBQU9sTixRQUFVa04sRUFBT2xOLE9BQ3pENm9CLEVBQXFCbmYsS0FBS3dELEVBQU9sTixPQUFTOEwsRUFBUSxFQUNwRCxDQUNGLE1BQU8sR0FBSTZXLEVBQXlDNWIsRUFBT21HLE9BQU9sTixPQUF3QixFQUFmeWMsRUFBa0IsQ0FDM0Z5TSxFQUFpQmhoQixLQUFLQyxJQUFJd2EsR0FBb0I1YixFQUFPbUcsT0FBT2xOLE9BQXdCLEVBQWZ5YyxHQUFtQmxWLEVBQU9rTCxnQkFDL0YsSUFBSyxJQUFJMVMsRUFBSSxFQUFHQSxFQUFJbXBCLEVBQWdCbnBCLEdBQUssRUFBRyxDQUMxQyxNQUFNK0wsRUFBUS9MLEVBQUltSSxLQUFLb0ssTUFBTXZTLEVBQUltTixFQUFPbE4sUUFBVWtOLEVBQU9sTixPQUN6RDhvQixFQUFvQnBmLEtBQUtvQyxFQUMzQixDQUNGLENBc0JBLEdBckJJa2QsR0FDRkgsRUFBcUJqbkIsU0FBUWtLLElBQzNCL0UsRUFBT21HLE9BQU9wQixHQUFPcWQsbUJBQW9CLEVBQ3pDM1osRUFBUzRaLFFBQVFyaUIsRUFBT21HLE9BQU9wQixJQUMvQi9FLEVBQU9tRyxPQUFPcEIsR0FBT3FkLG1CQUFvQixDQUFLLElBRzlDSixHQUNGRCxFQUFvQmxuQixTQUFRa0ssSUFDMUIvRSxFQUFPbUcsT0FBT3BCLEdBQU9xZCxtQkFBb0IsRUFDekMzWixFQUFTNlosT0FBT3RpQixFQUFPbUcsT0FBT3BCLElBQzlCL0UsRUFBT21HLE9BQU9wQixHQUFPcWQsbUJBQW9CLENBQUssSUFHbERwaUIsRUFBT3VpQixlQUNzQixTQUF6Qi9oQixFQUFPK0YsZUFDVHZHLEVBQU9vSSxlQUVMNUgsRUFBTzJNLHFCQUNUbk4sRUFBT29OLHFCQUVMeUYsRUFDRixHQUFJaVAsRUFBcUI3b0IsT0FBUyxHQUFLZ3BCLEVBQ3JDLFFBQThCLElBQW5CTixFQUFnQyxDQUN6QyxNQUFNYSxFQUF3QnhpQixFQUFPb0osV0FBVzFDLEdBRTFDNFQsRUFEb0J0YSxFQUFPb0osV0FBVzFDLEVBQWN3YixHQUN6Qk0sRUFDN0JYLEVBQ0Y3aEIsRUFBT3VULGFBQWF2VCxFQUFPSSxVQUFZa2EsSUFFdkN0YSxFQUFPNlMsUUFBUW5NLEVBQWN3YixFQUFpQixHQUFHLEdBQU8sR0FDcEQzTyxJQUNGdlQsRUFBTytWLFFBQVEvVixFQUFPOEgsZUFBaUIsU0FBVyxXQUFhd1MsRUFDL0R0YSxFQUFPNlYsZ0JBQWdCNEYsaUJBQW1CemIsRUFBT0ksV0FHdkQsTUFDTW1ULElBQ0Z2VCxFQUFPa1UsWUFBWXlOLEVBQWdCLEdBQUcsR0FBTyxHQUM3QzNoQixFQUFPNlYsZ0JBQWdCNEYsaUJBQW1CemIsRUFBT0ksZ0JBR2hELEdBQUkyaEIsRUFBb0I5b0IsT0FBUyxHQUFLK29CLEVBQzNDLFFBQThCLElBQW5CTCxFQUFnQyxDQUN6QyxNQUFNYSxFQUF3QnhpQixFQUFPb0osV0FBVzFDLEdBRTFDNFQsRUFEb0J0YSxFQUFPb0osV0FBVzFDLEVBQWN5YixHQUN6QkssRUFDN0JYLEVBQ0Y3aEIsRUFBT3VULGFBQWF2VCxFQUFPSSxVQUFZa2EsSUFFdkN0YSxFQUFPNlMsUUFBUW5NLEVBQWN5YixFQUFnQixHQUFHLEdBQU8sR0FDbkQ1TyxJQUNGdlQsRUFBTytWLFFBQVEvVixFQUFPOEgsZUFBaUIsU0FBVyxXQUFhd1MsRUFDL0R0YSxFQUFPNlYsZ0JBQWdCNEYsaUJBQW1CemIsRUFBT0ksV0FHdkQsTUFDRUosRUFBT2tVLFlBQVl5TixFQUFnQixHQUFHLEdBQU8sR0FNbkQsR0FGQTNoQixFQUFPc1QsZUFBaUJBLEVBQ3hCdFQsRUFBT3FULGVBQWlCQSxFQUNwQnJULEVBQU95aUIsWUFBY3ppQixFQUFPeWlCLFdBQVdDLFVBQVkxQixFQUFjLENBQ25FLE1BQU0yQixFQUFhLENBQ2pCaEIsaUJBQ0FoUCxZQUNBWSxlQUNBcUksbUJBQ0FvRixjQUFjLEdBRVo5ZSxNQUFNQyxRQUFRbkMsRUFBT3lpQixXQUFXQyxTQUNsQzFpQixFQUFPeWlCLFdBQVdDLFFBQVE3bkIsU0FBUStuQixLQUMzQkEsRUFBRTNlLFdBQWEyZSxFQUFFcGlCLE9BQU84RyxNQUFNc2IsRUFBRW5PLFFBQVEsSUFDeENrTyxFQUNIOVAsUUFBUytQLEVBQUVwaUIsT0FBTytGLGdCQUFrQi9GLEVBQU8rRixlQUFnQnNNLEdBQzNELElBRUs3UyxFQUFPeWlCLFdBQVdDLG1CQUFtQjFpQixFQUFPeEYsYUFBZXdGLEVBQU95aUIsV0FBV0MsUUFBUWxpQixPQUFPOEcsTUFDckd0SCxFQUFPeWlCLFdBQVdDLFFBQVFqTyxRQUFRLElBQzdCa08sRUFDSDlQLFFBQVM3UyxFQUFPeWlCLFdBQVdDLFFBQVFsaUIsT0FBTytGLGdCQUFrQi9GLEVBQU8rRixlQUFnQnNNLEdBR3pGLENBQ0E3UyxFQUFPa0YsS0FBSyxVQUNkLEVBNEJFMmQsWUExQkYsV0FDRSxNQUFNN2lCLEVBQVM3QyxNQUNULE9BQ0pxRCxFQUFNLFNBQ05pSSxHQUNFekksRUFDSixJQUFLUSxFQUFPOEcsTUFBUXRILEVBQU8rSSxTQUFXL0ksRUFBT1EsT0FBT3VJLFFBQVFDLFFBQVMsT0FDckVoSixFQUFPdWlCLGVBQ1AsTUFBTU8sRUFBaUIsR0FDdkI5aUIsRUFBT21HLE9BQU90TCxTQUFRNkssSUFDcEIsTUFBTVgsT0FBNEMsSUFBN0JXLEVBQVFxZCxpQkFBcUYsRUFBbERyZCxFQUFRcU0sYUFBYSwyQkFBaUNyTSxFQUFRcWQsaUJBQzlIRCxFQUFlL2QsR0FBU1csQ0FBTyxJQUVqQzFGLEVBQU9tRyxPQUFPdEwsU0FBUTZLLElBQ3BCQSxFQUFRaE0sZ0JBQWdCLDBCQUEwQixJQUVwRG9wQixFQUFlam9CLFNBQVE2SyxJQUNyQitDLEVBQVM2WixPQUFPNWMsRUFBUSxJQUUxQjFGLEVBQU91aUIsZUFDUHZpQixFQUFPNlMsUUFBUTdTLEVBQU91SCxVQUFXLEVBQ25DLEdBdW1DRStULFdBL2pDZSxDQUNmQyxjQWpDRixTQUF1QnlILEdBQ3JCLE1BQU1oakIsRUFBUzdDLEtBQ2YsSUFBSzZDLEVBQU9RLE9BQU93VixlQUFpQmhXLEVBQU9RLE9BQU95TSxlQUFpQmpOLEVBQU9pakIsVUFBWWpqQixFQUFPUSxPQUFPOEosUUFBUyxPQUM3RyxNQUFNNUssRUFBeUMsY0FBcENNLEVBQU9RLE9BQU80VixrQkFBb0NwVyxFQUFPTixHQUFLTSxFQUFPVSxVQUM1RVYsRUFBTzRGLFlBQ1Q1RixFQUFPa2pCLHFCQUFzQixHQUUvQnhqQixFQUFHL0QsTUFBTXduQixPQUFTLE9BQ2xCempCLEVBQUcvRCxNQUFNd25CLE9BQVNILEVBQVMsV0FBYSxPQUNwQ2hqQixFQUFPNEYsV0FDVGhJLHVCQUFzQixLQUNwQm9DLEVBQU9rakIscUJBQXNCLENBQUssR0FHeEMsRUFvQkVFLGdCQWxCRixXQUNFLE1BQU1wakIsRUFBUzdDLEtBQ1g2QyxFQUFPUSxPQUFPeU0sZUFBaUJqTixFQUFPaWpCLFVBQVlqakIsRUFBT1EsT0FBTzhKLFVBR2hFdEssRUFBTzRGLFlBQ1Q1RixFQUFPa2pCLHFCQUFzQixHQUUvQmxqQixFQUEyQyxjQUFwQ0EsRUFBT1EsT0FBTzRWLGtCQUFvQyxLQUFPLGFBQWF6YSxNQUFNd25CLE9BQVMsR0FDeEZuakIsRUFBTzRGLFdBQ1RoSSx1QkFBc0IsS0FDcEJvQyxFQUFPa2pCLHFCQUFzQixDQUFLLElBR3hDLEdBa2tDRXRmLE9BeFlhLENBQ2J5ZixhQXpCRixXQUNFLE1BQU1yakIsRUFBUzdDLEtBQ1RyRSxFQUFXLEtBQ1gsT0FDSjBILEdBQ0VSLEVBQ0pBLEVBQU80VixhQUFlQSxFQUFhME4sS0FBS3RqQixHQUN4Q0EsRUFBT2laLFlBQWNBLEVBQVlxSyxLQUFLdGpCLEdBQ3RDQSxFQUFPK2IsV0FBYUEsRUFBV3VILEtBQUt0akIsR0FDaENRLEVBQU84SixVQUNUdEssRUFBTytkLFNBQVdBLEVBQVN1RixLQUFLdGpCLElBRWxDQSxFQUFPMmQsUUFBVUEsRUFBUTJGLEtBQUt0akIsR0FDOUJBLEVBQU9vZSxPQUFTQSxFQUFPa0YsS0FBS3RqQixHQUN2QnFlLElBQ0h2bEIsRUFBU0ksaUJBQWlCLGFBQWNvbEIsR0FDeENELEdBQXFCLEdBRXZCemEsRUFBTzVELEVBQVEsS0FDakIsRUFPRXVqQixhQU5GLFdBRUUzZixFQURlekcsS0FDQSxNQUNqQixHQTBZRXdOLFlBNVFnQixDQUNoQnlTLGNBdEhGLFdBQ0UsTUFBTXBkLEVBQVM3QyxNQUNULFVBQ0pvSyxFQUFTLFlBQ1R5SyxFQUFXLE9BQ1h4UixFQUFNLEdBQ05kLEdBQ0VNLEVBQ0UySyxFQUFjbkssRUFBT21LLFlBQzNCLElBQUtBLEdBQWVBLEdBQW1ELElBQXBDbFEsT0FBT0csS0FBSytQLEdBQWExUixPQUFjLE9BRzFFLE1BQU11cUIsRUFBYXhqQixFQUFPeWpCLGNBQWM5WSxFQUFhM0ssRUFBT1EsT0FBTzhlLGdCQUFpQnRmLEVBQU9OLElBQzNGLElBQUs4akIsR0FBY3hqQixFQUFPMGpCLG9CQUFzQkYsRUFBWSxPQUM1RCxNQUNNRyxHQUR1QkgsS0FBYzdZLEVBQWNBLEVBQVk2WSxRQUFjcnBCLElBQ2xDNkYsRUFBTzRqQixlQUNsREMsRUFBYzlFLEVBQWMvZSxFQUFRUSxHQUNwQ3NqQixFQUFhL0UsRUFBYy9lLEVBQVEyakIsR0FDbkNJLEVBQWF2akIsRUFBT3dJLFFBQ3RCNmEsSUFBZ0JDLEdBQ2xCcGtCLEVBQUc3RixVQUFVb00sT0FBTyxHQUFHekYsRUFBTzhNLDZCQUE4QixHQUFHOU0sRUFBTzhNLHFDQUN0RXROLEVBQU9na0IseUJBQ0dILEdBQWVDLElBQ3pCcGtCLEVBQUc3RixVQUFVb0ksSUFBSSxHQUFHekIsRUFBTzhNLCtCQUN2QnFXLEVBQWlCaGQsS0FBS3NkLE1BQXVDLFdBQS9CTixFQUFpQmhkLEtBQUtzZCxPQUFzQk4sRUFBaUJoZCxLQUFLc2QsTUFBNkIsV0FBckJ6akIsRUFBT21HLEtBQUtzZCxPQUN0SHZrQixFQUFHN0YsVUFBVW9JLElBQUksR0FBR3pCLEVBQU84TSxxQ0FFN0J0TixFQUFPZ2tCLHdCQUlULENBQUMsYUFBYyxhQUFjLGFBQWFucEIsU0FBUXdILElBQ2hELFFBQXNDLElBQTNCc2hCLEVBQWlCdGhCLEdBQXVCLE9BQ25ELE1BQU02aEIsRUFBbUIxakIsRUFBTzZCLElBQVM3QixFQUFPNkIsR0FBTTJHLFFBQ2hEbWIsRUFBa0JSLEVBQWlCdGhCLElBQVNzaEIsRUFBaUJ0aEIsR0FBTTJHLFFBQ3JFa2IsSUFBcUJDLEdBQ3ZCbmtCLEVBQU9xQyxHQUFNK2hCLFdBRVZGLEdBQW9CQyxHQUN2Qm5rQixFQUFPcUMsR0FBTWdpQixRQUNmLElBRUYsTUFBTUMsRUFBbUJYLEVBQWlCaFIsV0FBYWdSLEVBQWlCaFIsWUFBY25TLEVBQU9tUyxVQUN2RjRSLEVBQWMvakIsRUFBTzhHLE9BQVNxYyxFQUFpQnBkLGdCQUFrQi9GLEVBQU8rRixlQUFpQitkLEdBQ3pGRSxFQUFVaGtCLEVBQU84RyxLQUNuQmdkLEdBQW9CdFMsR0FDdEJoUyxFQUFPeWtCLGtCQUVULEVBQU96a0IsRUFBT1EsT0FBUW1qQixHQUN0QixNQUFNZSxFQUFZMWtCLEVBQU9RLE9BQU93SSxRQUMxQjJiLEVBQVUza0IsRUFBT1EsT0FBTzhHLEtBQzlCN00sT0FBTzBOLE9BQU9uSSxFQUFRLENBQ3BCNFksZUFBZ0I1WSxFQUFPUSxPQUFPb1ksZUFDOUJ2RixlQUFnQnJULEVBQU9RLE9BQU82UyxlQUM5QkMsZUFBZ0J0VCxFQUFPUSxPQUFPOFMsaUJBRTVCeVEsSUFBZVcsRUFDakIxa0IsRUFBT29rQixXQUNHTCxHQUFjVyxHQUN4QjFrQixFQUFPcWtCLFNBRVRya0IsRUFBTzBqQixrQkFBb0JGLEVBQzNCeGpCLEVBQU9rRixLQUFLLG9CQUFxQnllLEdBQzdCM1IsSUFDRXVTLEdBQ0Z2a0IsRUFBTzZpQixjQUNQN2lCLEVBQU8waEIsV0FBV25hLEdBQ2xCdkgsRUFBT29JLGlCQUNHb2MsR0FBV0csR0FDckIza0IsRUFBTzBoQixXQUFXbmEsR0FDbEJ2SCxFQUFPb0ksZ0JBQ0VvYyxJQUFZRyxHQUNyQjNrQixFQUFPNmlCLGVBR1g3aUIsRUFBT2tGLEtBQUssYUFBY3llLEVBQzVCLEVBMkNFRixjQXpDRixTQUF1QjlZLEVBQWFxTSxFQUFNNE4sR0FJeEMsUUFIYSxJQUFUNU4sSUFDRkEsRUFBTyxXQUVKck0sR0FBd0IsY0FBVHFNLElBQXlCNE4sRUFBYSxPQUMxRCxJQUFJcEIsR0FBYSxFQUNqQixNQUFNdmxCLEVBQVMsSUFDVDRtQixFQUF5QixXQUFUN04sRUFBb0IvWSxFQUFPNm1CLFlBQWNGLEVBQVkvYyxhQUNyRWtkLEVBQVN0cUIsT0FBT0csS0FBSytQLEdBQWEzRCxLQUFJZ2UsSUFDMUMsR0FBcUIsaUJBQVZBLEdBQTZDLElBQXZCQSxFQUFNOWxCLFFBQVEsS0FBWSxDQUN6RCxNQUFNK2xCLEVBQVdsaUIsV0FBV2lpQixFQUFNRSxPQUFPLElBRXpDLE1BQU8sQ0FDTEMsTUFGWU4sRUFBZ0JJLEVBRzVCRCxRQUVKLENBQ0EsTUFBTyxDQUNMRyxNQUFPSCxFQUNQQSxRQUNELElBRUhELEVBQU9LLE1BQUssQ0FBQzVFLEVBQUc2RSxJQUFNcmQsU0FBU3dZLEVBQUUyRSxNQUFPLElBQU1uZCxTQUFTcWQsRUFBRUYsTUFBTyxNQUNoRSxJQUFLLElBQUluc0IsRUFBSSxFQUFHQSxFQUFJK3JCLEVBQU85ckIsT0FBUUQsR0FBSyxFQUFHLENBQ3pDLE1BQU0sTUFDSmdzQixFQUFLLE1BQ0xHLEdBQ0VKLEVBQU8vckIsR0FDRSxXQUFUZ2UsRUFDRS9ZLEVBQU9OLFdBQVcsZUFBZXduQixRQUFZcmpCLFVBQy9DMGhCLEVBQWF3QixHQUVORyxHQUFTUCxFQUFZaGQsY0FDOUI0YixFQUFhd0IsRUFFakIsQ0FDQSxPQUFPeEIsR0FBYyxLQUN2QixHQStRRXRXLGNBektvQixDQUNwQkEsY0E5QkYsV0FDRSxNQUFNbE4sRUFBUzdDLE1BRWI4bEIsU0FBVXFDLEVBQVMsT0FDbkI5a0IsR0FDRVIsR0FDRSxtQkFDSnVKLEdBQ0UvSSxFQUNKLEdBQUkrSSxFQUFvQixDQUN0QixNQUFNdUcsRUFBaUI5UCxFQUFPbUcsT0FBT2xOLE9BQVMsRUFDeENzc0IsRUFBcUJ2bEIsRUFBT29KLFdBQVcwRyxHQUFrQjlQLEVBQU9xSixnQkFBZ0J5RyxHQUF1QyxFQUFyQnZHLEVBQ3hHdkosRUFBT2lqQixTQUFXampCLEVBQU82QyxLQUFPMGlCLENBQ2xDLE1BQ0V2bEIsRUFBT2lqQixTQUFzQyxJQUEzQmpqQixFQUFPbUosU0FBU2xRLFFBRU4sSUFBMUJ1SCxFQUFPNlMsaUJBQ1RyVCxFQUFPcVQsZ0JBQWtCclQsRUFBT2lqQixXQUVKLElBQTFCemlCLEVBQU84UyxpQkFDVHRULEVBQU9zVCxnQkFBa0J0VCxFQUFPaWpCLFVBRTlCcUMsR0FBYUEsSUFBY3RsQixFQUFPaWpCLFdBQ3BDampCLEVBQU91UCxPQUFRLEdBRWIrVixJQUFjdGxCLEVBQU9pakIsVUFDdkJqakIsRUFBT2tGLEtBQUtsRixFQUFPaWpCLFNBQVcsT0FBUyxTQUUzQyxHQTJLRWpoQixRQTVNWSxDQUNad2pCLFdBL0NGLFdBQ0UsTUFBTXhsQixFQUFTN0MsTUFDVCxXQUNKc29CLEVBQVUsT0FDVmpsQixFQUFNLElBQ05vSSxFQUFHLEdBQ0hsSixFQUFFLE9BQ0Y2ZSxHQUNFdmUsRUFFRTBsQixFQXpCUixTQUF3QkMsRUFBU0MsR0FDL0IsTUFBTUMsRUFBZ0IsR0FZdEIsT0FYQUYsRUFBUTlxQixTQUFRaXJCLElBQ00saUJBQVRBLEVBQ1RyckIsT0FBT0csS0FBS2tyQixHQUFNanJCLFNBQVE0cUIsSUFDcEJLLEVBQUtMLElBQ1BJLEVBQWNsakIsS0FBS2lqQixFQUFTSCxFQUM5QixJQUV1QixpQkFBVEssR0FDaEJELEVBQWNsakIsS0FBS2lqQixFQUFTRSxFQUM5QixJQUVLRCxDQUNULENBV21CRSxDQUFlLENBQUMsY0FBZXZsQixFQUFPbVMsVUFBVyxDQUNoRSxZQUFhM1MsRUFBT1EsT0FBT3dZLFVBQVl4WSxFQUFPd1ksU0FBU2hRLFNBQ3RELENBQ0QsV0FBY3hJLEVBQU8yUCxZQUNwQixDQUNELElBQU92SCxHQUNOLENBQ0QsS0FBUXBJLEVBQU9tRyxNQUFRbkcsRUFBT21HLEtBQUtDLEtBQU8sR0FDekMsQ0FDRCxjQUFlcEcsRUFBT21HLE1BQVFuRyxFQUFPbUcsS0FBS0MsS0FBTyxHQUEwQixXQUFyQnBHLEVBQU9tRyxLQUFLc2QsTUFDakUsQ0FDRCxRQUFXMUYsRUFBT08sU0FDakIsQ0FDRCxJQUFPUCxFQUFPTSxLQUNiLENBQ0QsV0FBWXJlLEVBQU84SixTQUNsQixDQUNELFNBQVk5SixFQUFPOEosU0FBVzlKLEVBQU82SixnQkFDcEMsQ0FDRCxpQkFBa0I3SixFQUFPMk0sc0JBQ3ZCM00sRUFBTzhNLHdCQUNYbVksRUFBVzlpQixRQUFRK2lCLEdBQ25CaG1CLEVBQUc3RixVQUFVb0ksT0FBT3dqQixHQUNwQnpsQixFQUFPZ2tCLHNCQUNULEVBY0VnQyxjQVpGLFdBQ0UsTUFDTSxHQUNKdG1CLEVBQUUsV0FDRitsQixHQUhhdG9CLEtBS2Z1QyxFQUFHN0YsVUFBVW9NLFVBQVV3ZixHQUxSdG9CLEtBTVI2bUIsc0JBQ1QsSUFnTk1pQyxFQUFtQixDQUFDLEVBQzFCLE1BQU1DLEVBQ0osV0FBQTFyQixHQUNFLElBQUlrRixFQUNBYyxFQUNKLElBQUssSUFBSWdFLEVBQU85RixVQUFVekYsT0FBUXdMLEVBQU8sSUFBSXZDLE1BQU1zQyxHQUFPRSxFQUFPLEVBQUdBLEVBQU9GLEVBQU1FLElBQy9FRCxFQUFLQyxHQUFRaEcsVUFBVWdHLEdBRUwsSUFBaEJELEVBQUt4TCxRQUFnQndMLEVBQUssR0FBR2pLLGFBQXdFLFdBQXpEQyxPQUFPNEQsVUFBVUMsU0FBU0MsS0FBS2tHLEVBQUssSUFBSWpHLE1BQU0sR0FBSSxHQUNoR2dDLEVBQVNpRSxFQUFLLElBRWIvRSxFQUFJYyxHQUFVaUUsRUFFWmpFLElBQVFBLEVBQVMsQ0FBQyxHQUN2QkEsRUFBUyxFQUFPLENBQUMsRUFBR0EsR0FDaEJkLElBQU9jLEVBQU9kLEtBQUljLEVBQU9kLEdBQUtBLEdBQ2xDLE1BQU01RyxFQUFXLElBQ2pCLEdBQUkwSCxFQUFPZCxJQUEyQixpQkFBZGMsRUFBT2QsSUFBbUI1RyxFQUFTQyxpQkFBaUJ5SCxFQUFPZCxJQUFJekcsT0FBUyxFQUFHLENBQ2pHLE1BQU1rdEIsRUFBVSxHQVFoQixPQVBBcnRCLEVBQVNDLGlCQUFpQnlILEVBQU9kLElBQUk3RSxTQUFRK3BCLElBQzNDLE1BQU13QixFQUFZLEVBQU8sQ0FBQyxFQUFHNWxCLEVBQVEsQ0FDbkNkLEdBQUlrbEIsSUFFTnVCLEVBQVF4akIsS0FBSyxJQUFJdWpCLEVBQU9FLEdBQVcsSUFHOUJELENBQ1QsQ0FHQSxNQUFNbm1CLEVBQVM3QyxLQWw5Rm5CLElBQW1Ca3BCLEVBbTlGZnJtQixFQUFPUCxZQUFhLEVBQ3BCTyxFQUFPaUQsUUFBVUcsSUFDakJwRCxFQUFPdWUsYUFwOUZTLEtBREQ4SCxFQXE5RlcsQ0FDeEJ6cEIsVUFBVzRELEVBQU81RCxjQXA5RnBCeXBCLEVBQVksQ0FBQyxHQUVWbmpCLElBQ0hBLEVBL0NKLFNBQW9CMGUsR0FDbEIsSUFBSSxVQUNGaGxCLFFBQ1ksSUFBVmdsQixFQUFtQixDQUFDLEVBQUlBLEVBQzVCLE1BQU0zZSxFQUFVRyxJQUNWbkYsRUFBUyxJQUNUcW9CLEVBQVdyb0IsRUFBT3RCLFVBQVUycEIsU0FDNUJDLEVBQUszcEIsR0FBYXFCLEVBQU90QixVQUFVQyxVQUNuQzJoQixFQUFTLENBQ2JNLEtBQUssRUFDTEMsU0FBUyxHQUVMMEgsRUFBY3ZvQixFQUFPVCxPQUFPa0ssTUFDNUIrZSxFQUFleG9CLEVBQU9ULE9BQU9tSyxPQUM3Qm1YLEVBQVV5SCxFQUFHRyxNQUFNLCtCQUN6QixJQUFJQyxFQUFPSixFQUFHRyxNQUFNLHdCQUNwQixNQUFNRSxFQUFPTCxFQUFHRyxNQUFNLDJCQUNoQkcsR0FBVUYsR0FBUUosRUFBR0csTUFBTSw4QkFDM0JJLEVBQXVCLFVBQWJSLEVBQ2hCLElBQUlTLEVBQXFCLGFBQWJULEVBcUJaLE9BakJLSyxHQUFRSSxHQUFTOWpCLEVBQVFNLE9BRFYsQ0FBQyxZQUFhLFlBQWEsV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksWUFDeEdyRSxRQUFRLEdBQUdzbkIsS0FBZUMsTUFBbUIsSUFDOUZFLEVBQU9KLEVBQUdHLE1BQU0sdUJBQ1hDLElBQU1BLEVBQU8sQ0FBQyxFQUFHLEVBQUcsV0FDekJJLEdBQVEsR0FJTmpJLElBQVlnSSxJQUNkdkksRUFBT3lJLEdBQUssVUFDWnpJLEVBQU9PLFNBQVUsSUFFZjZILEdBQVFFLEdBQVVELEtBQ3BCckksRUFBT3lJLEdBQUssTUFDWnpJLEVBQU9NLEtBQU0sR0FJUk4sQ0FDVCxDQU1tQjBJLENBQVdaLElBRXJCbmpCLEdBaTlGTGxELEVBQU9tRCxTQXg3RkpBLElBQ0hBLEVBdEJKLFdBQ0UsTUFBTWxGLEVBQVMsSUFDZixJQUFJaXBCLEdBQXFCLEVBQ3pCLFNBQVNqTCxJQUNQLE1BQU1zSyxFQUFLdG9CLEVBQU90QixVQUFVQyxVQUFVdXFCLGNBQ3RDLE9BQU9aLEVBQUdybkIsUUFBUSxXQUFhLEdBQUtxbkIsRUFBR3JuQixRQUFRLFVBQVksR0FBS3FuQixFQUFHcm5CLFFBQVEsV0FBYSxDQUMxRixDQUNBLEdBQUkrYyxJQUFZLENBQ2QsTUFBTXNLLEVBQUthLE9BQU9ucEIsRUFBT3RCLFVBQVVDLFdBQ25DLEdBQUkycEIsRUFBR3JmLFNBQVMsWUFBYSxDQUMzQixNQUFPbWdCLEVBQU9DLEdBQVNmLEVBQUdwaUIsTUFBTSxZQUFZLEdBQUdBLE1BQU0sS0FBSyxHQUFHQSxNQUFNLEtBQUs2QyxLQUFJdWdCLEdBQU90ZixPQUFPc2YsS0FDMUZMLEVBQXFCRyxFQUFRLElBQWdCLEtBQVZBLEdBQWdCQyxFQUFRLENBQzdELENBQ0YsQ0FDQSxNQUFPLENBQ0xyTCxTQUFVaUwsR0FBc0JqTCxJQUNoQ2lMLHFCQUNBaEwsVUFBVywrQ0FBK0NzTCxLQUFLdnBCLEVBQU90QixVQUFVQyxXQUVwRixDQUdjNnFCLElBRUx0a0IsR0FzN0ZMbkQsRUFBT2dFLGdCQUFrQixDQUFDLEVBQzFCaEUsRUFBTzZFLG1CQUFxQixHQUM1QjdFLEVBQU8wbkIsUUFBVSxJQUFJMW5CLEVBQU8ybkIsYUFDeEJubkIsRUFBT2tuQixTQUFXeGxCLE1BQU1DLFFBQVEzQixFQUFPa25CLFVBQ3pDMW5CLEVBQU8wbkIsUUFBUS9rQixRQUFRbkMsRUFBT2tuQixTQUVoQyxNQUFNOUgsRUFBbUIsQ0FBQyxFQUMxQjVmLEVBQU8wbkIsUUFBUTdzQixTQUFRK3NCLElBQ3JCQSxFQUFJLENBQ0ZwbkIsU0FDQVIsU0FDQTZuQixhQUFjbEksRUFBbUJuZixFQUFRb2YsR0FDekNqYyxHQUFJM0QsRUFBTzJELEdBQUcyZixLQUFLdGpCLEdBQ25Cb0UsS0FBTXBFLEVBQU9vRSxLQUFLa2YsS0FBS3RqQixHQUN2QnNFLElBQUt0RSxFQUFPc0UsSUFBSWdmLEtBQUt0akIsR0FDckJrRixLQUFNbEYsRUFBT2tGLEtBQUtvZSxLQUFLdGpCLElBQ3ZCLElBSUosTUFBTThuQixFQUFlLEVBQU8sQ0FBQyxFQUFHOUksRUFBVVksR0FvRzFDLE9BakdBNWYsRUFBT1EsT0FBUyxFQUFPLENBQUMsRUFBR3NuQixFQUFjN0IsRUFBa0J6bEIsR0FDM0RSLEVBQU80akIsZUFBaUIsRUFBTyxDQUFDLEVBQUc1akIsRUFBT1EsUUFDMUNSLEVBQU8rbkIsYUFBZSxFQUFPLENBQUMsRUFBR3ZuQixHQUc3QlIsRUFBT1EsUUFBVVIsRUFBT1EsT0FBT21ELElBQ2pDbEosT0FBT0csS0FBS29GLEVBQU9RLE9BQU9tRCxJQUFJOUksU0FBUW10QixJQUNwQ2hvQixFQUFPMkQsR0FBR3FrQixFQUFXaG9CLEVBQU9RLE9BQU9tRCxHQUFHcWtCLEdBQVcsSUFHakRob0IsRUFBT1EsUUFBVVIsRUFBT1EsT0FBT29FLE9BQ2pDNUUsRUFBTzRFLE1BQU01RSxFQUFPUSxPQUFPb0UsT0FJN0JuSyxPQUFPME4sT0FBT25JLEVBQVEsQ0FDcEJnSixRQUFTaEosRUFBT1EsT0FBT3dJLFFBQ3ZCdEosS0FFQStsQixXQUFZLEdBRVp0ZixPQUFRLEdBQ1JpRCxXQUFZLEdBQ1pELFNBQVUsR0FDVkUsZ0JBQWlCLEdBRWpCdkIsYUFBWSxJQUN5QixlQUE1QjlILEVBQU9RLE9BQU9tUyxVQUV2QjVLLFdBQVUsSUFDMkIsYUFBNUIvSCxFQUFPUSxPQUFPbVMsVUFHdkJqTSxZQUFhLEVBQ2JhLFVBQVcsRUFFWCtILGFBQWEsRUFDYkMsT0FBTyxFQUVQblAsVUFBVyxFQUNYNmQsa0JBQW1CLEVBQ25CL2MsU0FBVSxFQUNWK21CLFNBQVUsRUFDVmpWLFdBQVcsRUFDWCxxQkFBQTFFLEdBR0UsT0FBT25OLEtBQUsrbUIsTUFBTS9xQixLQUFLaUQsVUFBWSxHQUFLLElBQU0sR0FBSyxFQUNyRCxFQUVBaVQsZUFBZ0JyVCxFQUFPUSxPQUFPNlMsZUFDOUJDLGVBQWdCdFQsRUFBT1EsT0FBTzhTLGVBRTlCdUMsZ0JBQWlCLENBQ2ZVLGVBQVdwYyxFQUNYcWMsYUFBU3JjLEVBQ1RpZSx5QkFBcUJqZSxFQUNyQm9lLG9CQUFnQnBlLEVBQ2hCa2UsaUJBQWFsZSxFQUNic2hCLHNCQUFrQnRoQixFQUNsQjZnQixvQkFBZ0I3Z0IsRUFDaEJzZSx3QkFBb0J0ZSxFQUVwQnVlLGtCQUFtQjFZLEVBQU9RLE9BQU9rWSxrQkFFakM0RCxjQUFlLEVBQ2Y2TCxrQkFBY2h1QixFQUVkaXVCLFdBQVksR0FDWi9NLHlCQUFxQmxoQixFQUNyQm1lLGlCQUFhbmUsRUFDYjJiLFFBQVMsSUFHWHdCLFlBQVksRUFFWnNCLGVBQWdCNVksRUFBT1EsT0FBT29ZLGVBQzlCN0MsUUFBUyxDQUNQNkIsT0FBUSxFQUNSQyxPQUFRLEVBQ1JMLFNBQVUsRUFDVkUsU0FBVSxFQUNWNEMsS0FBTSxHQUdSK04sYUFBYyxHQUNkQyxhQUFjLElBRWhCdG9CLEVBQU9rRixLQUFLLFdBR1JsRixFQUFPUSxPQUFPeWUsTUFDaEJqZixFQUFPaWYsT0FLRmpmLENBQ1QsQ0FDQSxhQUFBMlYsQ0FBY2pRLEdBQ1osTUFBTSxTQUNKK0MsRUFBUSxPQUNSakksR0FDRXJELEtBRUUwUyxFQUFrQixFQURULEVBQWdCcEgsRUFBVSxJQUFJakksRUFBT3FGLDRCQUNSLElBQzVDLE9BQU8sRUFBYUgsR0FBV21LLENBQ2pDLENBQ0EsbUJBQUE5QixDQUFvQmhKLEdBQ2xCLE9BQU81SCxLQUFLd1ksY0FBY3hZLEtBQUtnSixPQUFPbEgsUUFBT3lHLEdBQTZELEVBQWxEQSxFQUFRcU0sYUFBYSw2QkFBbUNoTixJQUFPLEdBQ3pILENBQ0EsWUFBQXdkLEdBQ0UsTUFDTSxTQUNKOVosRUFBUSxPQUNSakksR0FIYXJELFVBS1JnSixPQUFTLEVBQWdCc0MsRUFBVSxJQUFJakksRUFBT3FGLDJCQUN2RCxDQUNBLE1BQUF3ZSxHQUNFLE1BQU1ya0IsRUFBUzdDLEtBQ1g2QyxFQUFPZ0osVUFDWGhKLEVBQU9nSixTQUFVLEVBQ2JoSixFQUFPUSxPQUFPOGEsWUFDaEJ0YixFQUFPdWIsZ0JBRVR2YixFQUFPa0YsS0FBSyxVQUNkLENBQ0EsT0FBQWtmLEdBQ0UsTUFBTXBrQixFQUFTN0MsS0FDVjZDLEVBQU9nSixVQUNaaEosRUFBT2dKLFNBQVUsRUFDYmhKLEVBQU9RLE9BQU84YSxZQUNoQnRiLEVBQU9vakIsa0JBRVRwakIsRUFBT2tGLEtBQUssV0FDZCxDQUNBLFdBQUFxakIsQ0FBWXJuQixFQUFVVCxHQUNwQixNQUFNVCxFQUFTN0MsS0FDZitELEVBQVdDLEtBQUtFLElBQUlGLEtBQUtDLElBQUlGLEVBQVUsR0FBSSxHQUMzQyxNQUFNRyxFQUFNckIsRUFBTzZPLGVBRWI5TixHQURNZixFQUFPcVAsZUFDSWhPLEdBQU9ILEVBQVdHLEVBQ3pDckIsRUFBT21oQixZQUFZcGdCLE9BQTBCLElBQVZOLEVBQXdCLEVBQUlBLEdBQy9EVCxFQUFPcVIsb0JBQ1ByUixFQUFPb1EscUJBQ1QsQ0FDQSxvQkFBQTRULEdBQ0UsTUFBTWhrQixFQUFTN0MsS0FDZixJQUFLNkMsRUFBT1EsT0FBT2tmLGVBQWlCMWYsRUFBT04sR0FBSSxPQUMvQyxNQUFNOG9CLEVBQU14b0IsRUFBT04sR0FBRytvQixVQUFVdGtCLE1BQU0sS0FBS2xGLFFBQU93cEIsR0FDVCxJQUFoQ0EsRUFBVXZwQixRQUFRLFdBQStFLElBQTVEdXBCLEVBQVV2cEIsUUFBUWMsRUFBT1EsT0FBTzhNLDBCQUU5RXROLEVBQU9rRixLQUFLLG9CQUFxQnNqQixFQUFJL0gsS0FBSyxLQUM1QyxDQUNBLGVBQUFpSSxDQUFnQmhqQixHQUNkLE1BQU0xRixFQUFTN0MsS0FDZixPQUFJNkMsRUFBT2lFLFVBQWtCLEdBQ3RCeUIsRUFBUStpQixVQUFVdGtCLE1BQU0sS0FBS2xGLFFBQU93cEIsR0FDSSxJQUF0Q0EsRUFBVXZwQixRQUFRLGlCQUF5RSxJQUFoRHVwQixFQUFVdnBCLFFBQVFjLEVBQU9RLE9BQU9xRixjQUNqRjRhLEtBQUssSUFDVixDQUNBLGlCQUFBclAsR0FDRSxNQUFNcFIsRUFBUzdDLEtBQ2YsSUFBSzZDLEVBQU9RLE9BQU9rZixlQUFpQjFmLEVBQU9OLEdBQUksT0FDL0MsTUFBTWlwQixFQUFVLEdBQ2hCM29CLEVBQU9tRyxPQUFPdEwsU0FBUTZLLElBQ3BCLE1BQU0rZixFQUFhemxCLEVBQU8wb0IsZ0JBQWdCaGpCLEdBQzFDaWpCLEVBQVFobUIsS0FBSyxDQUNYK0MsVUFDQStmLGVBRUZ6bEIsRUFBT2tGLEtBQUssY0FBZVEsRUFBUytmLEVBQVcsSUFFakR6bEIsRUFBT2tGLEtBQUssZ0JBQWlCeWpCLEVBQy9CLENBQ0Esb0JBQUFuaUIsQ0FBcUJvaUIsRUFBTUMsUUFDWixJQUFURCxJQUNGQSxFQUFPLGdCQUVLLElBQVZDLElBQ0ZBLEdBQVEsR0FFVixNQUNNLE9BQ0pyb0IsRUFBTSxPQUNOMkYsRUFBTSxXQUNOaUQsRUFBVSxnQkFDVkMsRUFDQXhHLEtBQU02RixFQUFVLFlBQ2hCaEMsR0FQYXZKLEtBU2YsSUFBSTJyQixFQUFNLEVBQ1YsR0FBb0MsaUJBQXpCdG9CLEVBQU8rRixjQUE0QixPQUFPL0YsRUFBTytGLGNBQzVELEdBQUkvRixFQUFPNkosZUFBZ0IsQ0FDekIsSUFDSTBlLEVBREF2ZSxFQUFZckUsRUFBT08sR0FBZVAsRUFBT08sR0FBYThFLGdCQUFrQixFQUU1RSxJQUFLLElBQUl4UyxFQUFJME4sRUFBYyxFQUFHMU4sRUFBSW1OLEVBQU9sTixPQUFRRCxHQUFLLEVBQ2hEbU4sRUFBT25OLEtBQU8rdkIsSUFDaEJ2ZSxHQUFhckUsRUFBT25OLEdBQUd3UyxnQkFDdkJzZCxHQUFPLEVBQ0h0ZSxFQUFZOUIsSUFBWXFnQixHQUFZLElBRzVDLElBQUssSUFBSS92QixFQUFJME4sRUFBYyxFQUFHMU4sR0FBSyxFQUFHQSxHQUFLLEVBQ3JDbU4sRUFBT25OLEtBQU8rdkIsSUFDaEJ2ZSxHQUFhckUsRUFBT25OLEdBQUd3UyxnQkFDdkJzZCxHQUFPLEVBQ0h0ZSxFQUFZOUIsSUFBWXFnQixHQUFZLEdBRzlDLE1BRUUsR0FBYSxZQUFUSCxFQUNGLElBQUssSUFBSTV2QixFQUFJME4sRUFBYyxFQUFHMU4sRUFBSW1OLEVBQU9sTixPQUFRRCxHQUFLLEdBQ2hDNnZCLEVBQVF6ZixFQUFXcFEsR0FBS3FRLEVBQWdCclEsR0FBS29RLEVBQVcxQyxHQUFlZ0MsRUFBYVUsRUFBV3BRLEdBQUtvUSxFQUFXMUMsR0FBZWdDLEtBRWhKb2dCLEdBQU8sUUFLWCxJQUFLLElBQUk5dkIsRUFBSTBOLEVBQWMsRUFBRzFOLEdBQUssRUFBR0EsR0FBSyxFQUNyQm9RLEVBQVcxQyxHQUFlMEMsRUFBV3BRLEdBQUswUCxJQUU1RG9nQixHQUFPLEdBS2YsT0FBT0EsQ0FDVCxDQUNBLE1BQUF0aEIsR0FDRSxNQUFNeEgsRUFBUzdDLEtBQ2YsSUFBSzZDLEdBQVVBLEVBQU9pRSxVQUFXLE9BQ2pDLE1BQU0sU0FDSmtGLEVBQVEsT0FDUjNJLEdBQ0VSLEVBY0osU0FBU3VULElBQ1AsTUFBTXlWLEVBQWlCaHBCLEVBQU8ySSxjQUFtQyxFQUFwQjNJLEVBQU9JLFVBQWlCSixFQUFPSSxVQUN0RWloQixFQUFlbGdCLEtBQUtFLElBQUlGLEtBQUtDLElBQUk0bkIsRUFBZ0JocEIsRUFBT3FQLGdCQUFpQnJQLEVBQU82TyxnQkFDdEY3TyxFQUFPdVQsYUFBYThOLEdBQ3BCcmhCLEVBQU9xUixvQkFDUHJSLEVBQU9vUSxxQkFDVCxDQUNBLElBQUk2WSxFQUNKLEdBcEJJem9CLEVBQU9tSyxhQUNUM0ssRUFBT29kLGdCQUVULElBQUlwZCxFQUFPTixHQUFHM0csaUJBQWlCLHFCQUFxQjhCLFNBQVE0SyxJQUN0REEsRUFBUXlqQixVQUNWMWpCLEVBQXFCeEYsRUFBUXlGLEVBQy9CLElBRUZ6RixFQUFPeUgsYUFDUHpILEVBQU9vSSxlQUNQcEksRUFBT2tQLGlCQUNQbFAsRUFBT29RLHNCQVNINVAsRUFBT3dZLFVBQVl4WSxFQUFPd1ksU0FBU2hRLFVBQVl4SSxFQUFPOEosUUFDeERpSixJQUNJL1MsRUFBTzJQLFlBQ1RuUSxFQUFPME4sdUJBRUosQ0FDTCxJQUE4QixTQUF6QmxOLEVBQU8rRixlQUE0Qi9GLEVBQU8rRixjQUFnQixJQUFNdkcsRUFBT3VQLFFBQVUvTyxFQUFPNkosZUFBZ0IsQ0FDM0csTUFBTWxFLEVBQVNuRyxFQUFPK0ksU0FBV3ZJLEVBQU91SSxRQUFRQyxRQUFVaEosRUFBTytJLFFBQVE1QyxPQUFTbkcsRUFBT21HLE9BQ3pGOGlCLEVBQWFqcEIsRUFBTzZTLFFBQVExTSxFQUFPbE4sT0FBUyxFQUFHLEdBQUcsR0FBTyxFQUMzRCxNQUNFZ3dCLEVBQWFqcEIsRUFBTzZTLFFBQVE3UyxFQUFPMEcsWUFBYSxHQUFHLEdBQU8sR0FFdkR1aUIsR0FDSDFWLEdBRUosQ0FDSS9TLEVBQU95TSxlQUFpQjlELElBQWFuSixFQUFPbUosVUFDOUNuSixFQUFPa04sZ0JBRVRsTixFQUFPa0YsS0FBSyxTQUNkLENBQ0EsZUFBQXVmLENBQWdCMEUsRUFBY0MsUUFDVCxJQUFmQSxJQUNGQSxHQUFhLEdBRWYsTUFBTXBwQixFQUFTN0MsS0FDVGtzQixFQUFtQnJwQixFQUFPUSxPQUFPbVMsVUFLdkMsT0FKS3dXLElBRUhBLEVBQW9DLGVBQXJCRSxFQUFvQyxXQUFhLGNBRTlERixJQUFpQkUsR0FBcUMsZUFBakJGLEdBQWtELGFBQWpCQSxJQUcxRW5wQixFQUFPTixHQUFHN0YsVUFBVW9NLE9BQU8sR0FBR2pHLEVBQU9RLE9BQU84TSx5QkFBeUIrYixLQUNyRXJwQixFQUFPTixHQUFHN0YsVUFBVW9JLElBQUksR0FBR2pDLEVBQU9RLE9BQU84TSx5QkFBeUI2YixLQUNsRW5wQixFQUFPZ2tCLHVCQUNQaGtCLEVBQU9RLE9BQU9tUyxVQUFZd1csRUFDMUJucEIsRUFBT21HLE9BQU90TCxTQUFRNkssSUFDQyxhQUFqQnlqQixFQUNGempCLEVBQVEvSixNQUFNK0wsTUFBUSxHQUV0QmhDLEVBQVEvSixNQUFNZ00sT0FBUyxFQUN6QixJQUVGM0gsRUFBT2tGLEtBQUssbUJBQ1Jra0IsR0FBWXBwQixFQUFPd0gsVUFkZHhILENBZ0JYLENBQ0EsdUJBQUFzcEIsQ0FBd0IzVyxHQUN0QixNQUFNM1MsRUFBUzdDLEtBQ1g2QyxFQUFPNEksS0FBcUIsUUFBZCtKLElBQXdCM1MsRUFBTzRJLEtBQXFCLFFBQWQrSixJQUN4RDNTLEVBQU80SSxJQUFvQixRQUFkK0osRUFDYjNTLEVBQU8ySSxhQUEyQyxlQUE1QjNJLEVBQU9RLE9BQU9tUyxXQUE4QjNTLEVBQU80SSxJQUNyRTVJLEVBQU80SSxLQUNUNUksRUFBT04sR0FBRzdGLFVBQVVvSSxJQUFJLEdBQUdqQyxFQUFPUSxPQUFPOE0sNkJBQ3pDdE4sRUFBT04sR0FBR21CLElBQU0sUUFFaEJiLEVBQU9OLEdBQUc3RixVQUFVb00sT0FBTyxHQUFHakcsRUFBT1EsT0FBTzhNLDZCQUM1Q3ROLEVBQU9OLEdBQUdtQixJQUFNLE9BRWxCYixFQUFPd0gsU0FDVCxDQUNBLEtBQUEraEIsQ0FBTTNuQixHQUNKLE1BQU01QixFQUFTN0MsS0FDZixHQUFJNkMsRUFBT3dwQixRQUFTLE9BQU8sRUFHM0IsSUFBSTlwQixFQUFLa0MsR0FBVzVCLEVBQU9RLE9BQU9kLEdBSWxDLEdBSGtCLGlCQUFQQSxJQUNUQSxFQUFLNUcsU0FBU2MsY0FBYzhGLEtBRXpCQSxFQUNILE9BQU8sRUFFVEEsRUFBR00sT0FBU0EsRUFDUk4sRUFBRy9GLFlBQWMrRixFQUFHL0YsV0FBV3VDLE1BQXdDLHFCQUFoQ3dELEVBQUcvRixXQUFXdUMsS0FBS2QsV0FDNUQ0RSxFQUFPNEYsV0FBWSxHQUVyQixNQUFNNmpCLEVBQXFCLElBQ2xCLEtBQUt6cEIsRUFBT1EsT0FBT2lmLGNBQWdCLElBQUlpSyxPQUFPdmxCLE1BQU0sS0FBS3NjLEtBQUssT0FXdkUsSUFBSS9mLEVBUkVoQixHQUFNQSxFQUFHc0csWUFBY3RHLEVBQUdzRyxXQUFXcE0sY0FDM0I4RixFQUFHc0csV0FBV3BNLGNBQWM2dkIsS0FJbkMsRUFBZ0IvcEIsRUFBSStwQixLQUFzQixHQXNCbkQsT0FsQksvb0IsR0FBYVYsRUFBT1EsT0FBTzJlLGlCQUM5QnplLEVBQVksRUFBYyxNQUFPVixFQUFPUSxPQUFPaWYsY0FDL0MvZixFQUFHNGlCLE9BQU81aEIsR0FDVixFQUFnQmhCLEVBQUksSUFBSU0sRUFBT1EsT0FBT3FGLGNBQWNoTCxTQUFRNkssSUFDMURoRixFQUFVNGhCLE9BQU81YyxFQUFRLEtBRzdCakwsT0FBTzBOLE9BQU9uSSxFQUFRLENBQ3BCTixLQUNBZ0IsWUFDQStILFNBQVV6SSxFQUFPNEYsWUFBY2xHLEVBQUcvRixXQUFXdUMsS0FBS3l0QixXQUFhanFCLEVBQUcvRixXQUFXdUMsS0FBT3dFLEVBQ3BGa3BCLE9BQVE1cEIsRUFBTzRGLFVBQVlsRyxFQUFHL0YsV0FBV3VDLEtBQU93RCxFQUNoRDhwQixTQUFTLEVBRVQ1Z0IsSUFBOEIsUUFBekJsSixFQUFHbUIsSUFBSXNtQixlQUE2RCxRQUFsQy9rQixFQUFhMUMsRUFBSSxhQUN4RGlKLGFBQTBDLGVBQTVCM0ksRUFBT1EsT0FBT21TLFlBQXdELFFBQXpCalQsRUFBR21CLElBQUlzbUIsZUFBNkQsUUFBbEMva0IsRUFBYTFDLEVBQUksY0FDOUdtSixTQUFpRCxnQkFBdkN6RyxFQUFhMUIsRUFBVyxjQUU3QixDQUNULENBQ0EsSUFBQXVlLENBQUt2ZixHQUNILE1BQU1NLEVBQVM3QyxLQUNmLEdBQUk2QyxFQUFPZ1MsWUFBYSxPQUFPaFMsRUFFL0IsSUFBZ0IsSUFEQUEsRUFBT3VwQixNQUFNN3BCLEdBQ04sT0FBT00sRUFDOUJBLEVBQU9rRixLQUFLLGNBR1JsRixFQUFPUSxPQUFPbUssYUFDaEIzSyxFQUFPb2QsZ0JBSVRwZCxFQUFPd2xCLGFBR1B4bEIsRUFBT3lILGFBR1B6SCxFQUFPb0ksZUFDSHBJLEVBQU9RLE9BQU95TSxlQUNoQmpOLEVBQU9rTixnQkFJTGxOLEVBQU9RLE9BQU84YSxZQUFjdGIsRUFBT2dKLFNBQ3JDaEosRUFBT3ViLGdCQUlMdmIsRUFBT1EsT0FBTzhHLE1BQVF0SCxFQUFPK0ksU0FBVy9JLEVBQU9RLE9BQU91SSxRQUFRQyxRQUNoRWhKLEVBQU82UyxRQUFRN1MsRUFBT1EsT0FBT3NULGFBQWU5VCxFQUFPK0ksUUFBUW1ELGFBQWMsRUFBR2xNLEVBQU9RLE9BQU95UixvQkFBb0IsR0FBTyxHQUVySGpTLEVBQU82UyxRQUFRN1MsRUFBT1EsT0FBT3NULGFBQWMsRUFBRzlULEVBQU9RLE9BQU95UixvQkFBb0IsR0FBTyxHQUlyRmpTLEVBQU9RLE9BQU84RyxNQUNoQnRILEVBQU8waEIsYUFJVDFoQixFQUFPcWpCLGVBQ1AsTUFBTXdHLEVBQWUsSUFBSTdwQixFQUFPTixHQUFHM0csaUJBQWlCLHFCQXNCcEQsT0FyQklpSCxFQUFPNEYsV0FDVGlrQixFQUFhbG5CLFFBQVEzQyxFQUFPNHBCLE9BQU83d0IsaUJBQWlCLHFCQUV0RDh3QixFQUFhaHZCLFNBQVE0SyxJQUNmQSxFQUFReWpCLFNBQ1YxakIsRUFBcUJ4RixFQUFReUYsR0FFN0JBLEVBQVF2TSxpQkFBaUIsUUFBUSthLElBQy9Cek8sRUFBcUJ4RixFQUFRaVUsRUFBRTNhLE9BQU8sR0FFMUMsSUFFRjhNLEVBQVFwRyxHQUdSQSxFQUFPZ1MsYUFBYyxFQUNyQjVMLEVBQVFwRyxHQUdSQSxFQUFPa0YsS0FBSyxRQUNabEYsRUFBT2tGLEtBQUssYUFDTGxGLENBQ1QsQ0FDQSxPQUFBOHBCLENBQVFDLEVBQWdCQyxRQUNDLElBQW5CRCxJQUNGQSxHQUFpQixRQUVDLElBQWhCQyxJQUNGQSxHQUFjLEdBRWhCLE1BQU1ocUIsRUFBUzdDLE1BQ1QsT0FDSnFELEVBQU0sR0FDTmQsRUFBRSxVQUNGZ0IsRUFBUyxPQUNUeUYsR0FDRW5HLEVBQ0osWUFBNkIsSUFBbEJBLEVBQU9RLFFBQTBCUixFQUFPaUUsWUFHbkRqRSxFQUFPa0YsS0FBSyxpQkFHWmxGLEVBQU9nUyxhQUFjLEVBR3JCaFMsRUFBT3VqQixlQUdIL2lCLEVBQU84RyxNQUNUdEgsRUFBTzZpQixjQUlMbUgsSUFDRmhxQixFQUFPZ21CLGdCQUNQdG1CLEVBQUdoRyxnQkFBZ0IsU0FDbkJnSCxFQUFVaEgsZ0JBQWdCLFNBQ3RCeU0sR0FBVUEsRUFBT2xOLFFBQ25Ca04sRUFBT3RMLFNBQVE2SyxJQUNiQSxFQUFRN0wsVUFBVW9NLE9BQU96RixFQUFPaU8sa0JBQW1Cak8sRUFBTytQLGlCQUFrQi9QLEVBQU9nUSxlQUFnQmhRLEVBQU9pUSxnQkFDMUcvSyxFQUFRaE0sZ0JBQWdCLFNBQ3hCZ00sRUFBUWhNLGdCQUFnQiwwQkFBMEIsS0FJeERzRyxFQUFPa0YsS0FBSyxXQUdaekssT0FBT0csS0FBS29GLEVBQU9nRSxpQkFBaUJuSixTQUFRbXRCLElBQzFDaG9CLEVBQU9zRSxJQUFJMGpCLEVBQVUsS0FFQSxJQUFuQitCLElBQ0YvcEIsRUFBT04sR0FBR00sT0FBUyxLRHJoSHpCLFNBQXFCekYsR0FDbkIsTUFBTTB2QixFQUFTMXZCLEVBQ2ZFLE9BQU9HLEtBQUtxdkIsR0FBUXB2QixTQUFRQyxJQUMxQixJQUNFbXZCLEVBQU9udkIsR0FBTyxJQUNoQixDQUFFLE1BQU9tWixHQUVULENBQ0EsV0FDU2dXLEVBQU9udkIsRUFDaEIsQ0FBRSxNQUFPbVosR0FFVCxJQUVKLENDd2dITWlXLENBQVlscUIsSUFFZEEsRUFBT2lFLFdBQVksR0F0Q1YsSUF3Q1gsQ0FDQSxxQkFBT2ttQixDQUFlQyxHQUNwQixFQUFPbkUsRUFBa0JtRSxFQUMzQixDQUNBLDJCQUFXbkUsR0FDVCxPQUFPQSxDQUNULENBQ0EsbUJBQVdqSCxHQUNULE9BQU9BLENBQ1QsQ0FDQSxvQkFBT3FMLENBQWN6QyxHQUNkMUIsRUFBTzduQixVQUFVc3BCLGNBQWF6QixFQUFPN25CLFVBQVVzcEIsWUFBYyxJQUNsRSxNQUFNRCxFQUFVeEIsRUFBTzduQixVQUFVc3BCLFlBQ2QsbUJBQVJDLEdBQXNCRixFQUFReG9CLFFBQVEwb0IsR0FBTyxHQUN0REYsRUFBUS9rQixLQUFLaWxCLEVBRWpCLENBQ0EsVUFBTzBDLENBQUlqd0IsR0FDVCxPQUFJNkgsTUFBTUMsUUFBUTlILElBQ2hCQSxFQUFPUSxTQUFRMHZCLEdBQUtyRSxFQUFPbUUsY0FBY0UsS0FDbENyRSxJQUVUQSxFQUFPbUUsY0FBY2h3QixHQUNkNnJCLEVBQ1QsRUNsakhGLFNBQVMsRUFBMEJsbUIsRUFBUTRqQixFQUFnQnBqQixFQUFRZ3FCLEdBZWpFLE9BZEl4cUIsRUFBT1EsT0FBTzJlLGdCQUNoQjFrQixPQUFPRyxLQUFLNHZCLEdBQVkzdkIsU0FBUUMsSUFDOUIsSUFBSzBGLEVBQU8xRixLQUF3QixJQUFoQjBGLEVBQU91ZixLQUFlLENBQ3hDLElBQUluZSxFQUFVLEVBQWdCNUIsRUFBT04sR0FBSSxJQUFJOHFCLEVBQVcxdkIsTUFBUSxHQUMzRDhHLElBQ0hBLEVBQVUsRUFBYyxNQUFPNG9CLEVBQVcxdkIsSUFDMUM4RyxFQUFRNm1CLFVBQVkrQixFQUFXMXZCLEdBQy9Ca0YsRUFBT04sR0FBRzRpQixPQUFPMWdCLElBRW5CcEIsRUFBTzFGLEdBQU84RyxFQUNkZ2lCLEVBQWU5b0IsR0FBTzhHLENBQ3hCLEtBR0dwQixDQUNULENDbEJBLFNBQVMsRUFBa0J3QixHQUl6QixZQUhnQixJQUFaQSxJQUNGQSxFQUFVLElBRUwsSUFBSUEsRUFBUTBuQixPQUFPM2YsUUFBUSxlQUFnQixRQUNqREEsUUFBUSxLQUFNLE1BQ2pCLENGZ2pIQXRQLE9BQU9HLEtBQUtvbEIsR0FBWW5sQixTQUFRNHZCLElBQzlCaHdCLE9BQU9HLEtBQUtvbEIsRUFBV3lLLElBQWlCNXZCLFNBQVE2dkIsSUFDOUN4RSxFQUFPN25CLFVBQVVxc0IsR0FBZTFLLEVBQVd5SyxHQUFnQkMsRUFBWSxHQUN2RSxJQUVKeEUsRUFBT29FLElBQUksQ0F2OUdYLFNBQWdCdnFCLEdBQ2QsSUFBSSxPQUNGQyxFQUFNLEdBQ04yRCxFQUFFLEtBQ0Z1QixHQUNFbkYsRUFDSixNQUFNOUIsRUFBUyxJQUNmLElBQUkwc0IsRUFBVyxLQUNYQyxFQUFpQixLQUNyQixNQUFNQyxFQUFnQixLQUNmN3FCLElBQVVBLEVBQU9pRSxXQUFjakUsRUFBT2dTLGNBQzNDOU0sRUFBSyxnQkFDTEEsRUFBSyxVQUFTLEVBc0NWNGxCLEVBQTJCLEtBQzFCOXFCLElBQVVBLEVBQU9pRSxXQUFjakUsRUFBT2dTLGFBQzNDOU0sRUFBSyxvQkFBb0IsRUFFM0J2QixFQUFHLFFBQVEsS0FDTDNELEVBQU9RLE9BQU8wZSxxQkFBbUQsSUFBMUJqaEIsRUFBTzhzQixlQXhDN0MvcUIsSUFBVUEsRUFBT2lFLFdBQWNqRSxFQUFPZ1MsY0FDM0MyWSxFQUFXLElBQUlJLGdCQUFlcEYsSUFDNUJpRixFQUFpQjNzQixFQUFPTCx1QkFBc0IsS0FDNUMsTUFBTSxNQUNKOEosRUFBSyxPQUNMQyxHQUNFM0gsRUFDSixJQUFJZ3JCLEVBQVd0akIsRUFDWGtHLEVBQVlqRyxFQUNoQmdlLEVBQVE5cUIsU0FBUW93QixJQUNkLElBQUksZUFDRkMsRUFBYyxZQUNkQyxFQUFXLE9BQ1g3eEIsR0FDRTJ4QixFQUNBM3hCLEdBQVVBLElBQVcwRyxFQUFPTixLQUNoQ3NyQixFQUFXRyxFQUFjQSxFQUFZempCLE9BQVN3akIsRUFBZSxJQUFNQSxHQUFnQkUsV0FDbkZ4ZCxFQUFZdWQsRUFBY0EsRUFBWXhqQixRQUFVdWpCLEVBQWUsSUFBTUEsR0FBZ0JHLFVBQVMsSUFFNUZMLElBQWF0akIsR0FBU2tHLElBQWNqRyxHQUN0Q2tqQixHQUNGLEdBQ0EsSUFFSkYsRUFBU1csUUFBUXRyQixFQUFPTixNQW9CeEJ6QixFQUFPL0UsaUJBQWlCLFNBQVUyeEIsR0FDbEM1c0IsRUFBTy9FLGlCQUFpQixvQkFBcUI0eEIsR0FBeUIsSUFFeEVubkIsRUFBRyxXQUFXLEtBcEJSaW5CLEdBQ0Yzc0IsRUFBT0gscUJBQXFCOHNCLEdBRTFCRCxHQUFZQSxFQUFTWSxXQUFhdnJCLEVBQU9OLEtBQzNDaXJCLEVBQVNZLFVBQVV2ckIsRUFBT04sSUFDMUJpckIsRUFBVyxNQWlCYjFzQixFQUFPaEQsb0JBQW9CLFNBQVU0dkIsR0FDckM1c0IsRUFBT2hELG9CQUFvQixvQkFBcUI2dkIsRUFBeUIsR0FFN0UsRUFFQSxTQUFrQi9xQixHQUNoQixJQUFJLE9BQ0ZDLEVBQU0sYUFDTjZuQixFQUFZLEdBQ1psa0IsRUFBRSxLQUNGdUIsR0FDRW5GLEVBQ0osTUFBTXlyQixFQUFZLEdBQ1p2dEIsRUFBUyxJQUNUd3RCLEVBQVMsU0FBVW55QixFQUFRb3lCLFFBQ2YsSUFBWkEsSUFDRkEsRUFBVSxDQUFDLEdBRWIsTUFDTWYsRUFBVyxJQURJMXNCLEVBQU8wdEIsa0JBQW9CMXRCLEVBQU8ydEIseUJBQ3JCQyxJQUloQyxHQUFJN3JCLEVBQU9rakIsb0JBQXFCLE9BQ2hDLEdBQXlCLElBQXJCMkksRUFBVTV5QixPQUVaLFlBREFpTSxFQUFLLGlCQUFrQjJtQixFQUFVLElBR25DLE1BQU1DLEVBQWlCLFdBQ3JCNW1CLEVBQUssaUJBQWtCMm1CLEVBQVUsR0FDbkMsRUFDSTV0QixFQUFPTCxzQkFDVEssRUFBT0wsc0JBQXNCa3VCLEdBRTdCN3RCLEVBQU9SLFdBQVdxdUIsRUFBZ0IsRUFDcEMsSUFFRm5CLEVBQVNXLFFBQVFoeUIsRUFBUSxDQUN2Qnl5QixnQkFBMEMsSUFBdkJMLEVBQVFLLFlBQW9DTCxFQUFRSyxXQUN2RUMsZUFBd0MsSUFBdEJOLEVBQVFNLFdBQW1DTixFQUFRTSxVQUNyRUMsbUJBQWdELElBQTFCUCxFQUFRTyxlQUF1Q1AsRUFBUU8sZ0JBRS9FVCxFQUFVN29CLEtBQUtnb0IsRUFDakIsRUF5QkE5QyxFQUFhLENBQ1g4QyxVQUFVLEVBQ1Z1QixnQkFBZ0IsRUFDaEJDLHNCQUFzQixJQUV4QnhvQixFQUFHLFFBN0JVLEtBQ1gsR0FBSzNELEVBQU9RLE9BQU9tcUIsU0FBbkIsQ0FDQSxHQUFJM3FCLEVBQU9RLE9BQU8wckIsZUFBZ0IsQ0FDaEMsTUFBTUUsRUFBbUIsRUFBZXBzQixFQUFPNHBCLFFBQy9DLElBQUssSUFBSTV3QixFQUFJLEVBQUdBLEVBQUlvekIsRUFBaUJuekIsT0FBUUQsR0FBSyxFQUNoRHl5QixFQUFPVyxFQUFpQnB6QixHQUU1QixDQUVBeXlCLEVBQU96ckIsRUFBTzRwQixPQUFRLENBQ3BCb0MsVUFBV2hzQixFQUFPUSxPQUFPMnJCLHVCQUkzQlYsRUFBT3pyQixFQUFPVSxVQUFXLENBQ3ZCcXJCLFlBQVksR0FkcUIsQ0FlakMsSUFjSnBvQixFQUFHLFdBWmEsS0FDZDZuQixFQUFVM3dCLFNBQVE4dkIsSUFDaEJBLEVBQVMwQixZQUFZLElBRXZCYixFQUFVeG1CLE9BQU8sRUFBR3dtQixFQUFVdnlCLE9BQU8sR0FTekMsSUd6T3NCLElBQUlpdEIsRUFBTyxVQUFXLENBQzFDL2EsY0FBYyxFQUNkdWMsUUFBUyxDQ05YLFNBQW9CM25CLEdBQ2xCLElBQUksT0FDRkMsRUFBTSxhQUNONm5CLEVBQVksR0FDWmxrQixFQUFFLEtBQ0Z1QixHQUNFbkYsRUFDSjhuQixFQUFhLENBQ1g3SyxXQUFZLENBQ1ZDLE9BQVEsS0FDUkMsT0FBUSxLQUNSb1AsYUFBYSxFQUNiQyxjQUFlLHlCQUNmQyxZQUFhLHVCQUNiQyxVQUFXLHFCQUNYQyx3QkFBeUIsZ0NBRzdCMXNCLEVBQU9nZCxXQUFhLENBQ2xCQyxPQUFRLEtBQ1JDLE9BQVEsTUFFVixNQUFNeVAsRUFBb0JqdEIsSUFBT3dDLE1BQU1DLFFBQVF6QyxHQUFNQSxFQUFLLENBQUNBLElBQUtULFFBQU9nVixLQUFPQSxJQUM5RSxTQUFTMlksRUFBTWx0QixHQUNiLElBQUltdEIsRUFDSixPQUFJbnRCLEdBQW9CLGlCQUFQQSxHQUFtQk0sRUFBTzRGLFlBQ3pDaW5CLEVBQU03c0IsRUFBT04sR0FBRzlGLGNBQWM4RixHQUMxQm10QixHQUFZQSxHQUVkbnRCLElBQ2dCLGlCQUFQQSxJQUFpQm10QixFQUFNLElBQUkvekIsU0FBU0MsaUJBQWlCMkcsS0FDNURNLEVBQU9RLE9BQU8rZSxtQkFBbUMsaUJBQVA3ZixHQUFtQm10QixFQUFJNXpCLE9BQVMsR0FBK0MsSUFBMUMrRyxFQUFPTixHQUFHM0csaUJBQWlCMkcsR0FBSXpHLFNBQ2hINHpCLEVBQU03c0IsRUFBT04sR0FBRzlGLGNBQWM4RixLQUc5QkEsSUFBT210QixFQUFZbnRCLEVBRWhCbXRCLEVBQ1QsQ0FDQSxTQUFTQyxFQUFTcHRCLEVBQUlxdEIsR0FDcEIsTUFBTXZzQixFQUFTUixFQUFPUSxPQUFPd2MsWUFDN0J0ZCxFQUFLaXRCLEVBQWtCanRCLElBQ3BCN0UsU0FBUW15QixJQUNMQSxJQUNGQSxFQUFNbnpCLFVBQVVrekIsRUFBVyxNQUFRLGFBQWF2c0IsRUFBTytyQixjQUFjcG9CLE1BQU0sTUFDckQsV0FBbEI2b0IsRUFBTXh6QixVQUFzQnd6QixFQUFNRCxTQUFXQSxHQUM3Qy9zQixFQUFPUSxPQUFPeU0sZUFBaUJqTixFQUFPZ0osU0FDeENna0IsRUFBTW56QixVQUFVbUcsRUFBT2lqQixTQUFXLE1BQVEsVUFBVXppQixFQUFPaXNCLFdBRS9ELEdBRUosQ0FDQSxTQUFTamxCLElBRVAsTUFBTSxPQUNKeVYsRUFBTSxPQUNOQyxHQUNFbGQsRUFBT2dkLFdBQ1gsR0FBSWhkLEVBQU9RLE9BQU84RyxLQUdoQixPQUZBd2xCLEVBQVM1UCxHQUFRLFFBQ2pCNFAsRUFBUzdQLEdBQVEsR0FHbkI2UCxFQUFTNVAsRUFBUWxkLEVBQU9zUCxjQUFnQnRQLEVBQU9RLE9BQU82RyxRQUN0RHlsQixFQUFTN1AsRUFBUWpkLEVBQU91UCxRQUFVdlAsRUFBT1EsT0FBTzZHLE9BQ2xELENBQ0EsU0FBUzRsQixFQUFZaFosR0FDbkJBLEVBQUVrRSxtQkFDRW5ZLEVBQU9zUCxhQUFnQnRQLEVBQU9RLE9BQU84RyxNQUFTdEgsRUFBT1EsT0FBTzZHLFVBQ2hFckgsRUFBTzRVLFlBQ1AxUCxFQUFLLGtCQUNQLENBQ0EsU0FBU2dvQixFQUFZalosR0FDbkJBLEVBQUVrRSxtQkFDRW5ZLEVBQU91UCxPQUFVdlAsRUFBT1EsT0FBTzhHLE1BQVN0SCxFQUFPUSxPQUFPNkcsVUFDMURySCxFQUFPb1UsWUFDUGxQLEVBQUssa0JBQ1AsQ0FDQSxTQUFTK1osSUFDUCxNQUFNemUsRUFBU1IsRUFBT1EsT0FBT3djLFdBSzdCLEdBSkFoZCxFQUFPUSxPQUFPd2MsV0FBYSxFQUEwQmhkLEVBQVFBLEVBQU80akIsZUFBZTVHLFdBQVloZCxFQUFPUSxPQUFPd2MsV0FBWSxDQUN2SEMsT0FBUSxxQkFDUkMsT0FBUSx3QkFFSjFjLEVBQU95YyxTQUFVemMsRUFBTzBjLE9BQVMsT0FDdkMsSUFBSUQsRUFBUzJQLEVBQU1wc0IsRUFBT3ljLFFBQ3RCQyxFQUFTMFAsRUFBTXBzQixFQUFPMGMsUUFDMUJ6aUIsT0FBTzBOLE9BQU9uSSxFQUFPZ2QsV0FBWSxDQUMvQkMsU0FDQUMsV0FFRkQsRUFBUzBQLEVBQWtCMVAsR0FDM0JDLEVBQVN5UCxFQUFrQnpQLEdBQzNCLE1BQU1pUSxFQUFhLENBQUN6dEIsRUFBSW1CLEtBQ2xCbkIsR0FDRkEsRUFBR3hHLGlCQUFpQixRQUFpQixTQUFSMkgsRUFBaUJxc0IsRUFBY0QsSUFFekRqdEIsRUFBT2dKLFNBQVd0SixHQUNyQkEsRUFBRzdGLFVBQVVvSSxPQUFPekIsRUFBT2lzQixVQUFVdG9CLE1BQU0sS0FDN0MsRUFFRjhZLEVBQU9waUIsU0FBUTZFLEdBQU15dEIsRUFBV3p0QixFQUFJLFVBQ3BDd2QsRUFBT3JpQixTQUFRNkUsR0FBTXl0QixFQUFXenRCLEVBQUksU0FDdEMsQ0FDQSxTQUFTb3FCLElBQ1AsSUFBSSxPQUNGN00sRUFBTSxPQUNOQyxHQUNFbGQsRUFBT2dkLFdBQ1hDLEVBQVMwUCxFQUFrQjFQLEdBQzNCQyxFQUFTeVAsRUFBa0J6UCxHQUMzQixNQUFNa1EsRUFBZ0IsQ0FBQzF0QixFQUFJbUIsS0FDekJuQixFQUFHekUsb0JBQW9CLFFBQWlCLFNBQVI0RixFQUFpQnFzQixFQUFjRCxHQUMvRHZ0QixFQUFHN0YsVUFBVW9NLFVBQVVqRyxFQUFPUSxPQUFPd2MsV0FBV3VQLGNBQWNwb0IsTUFBTSxLQUFLLEVBRTNFOFksRUFBT3BpQixTQUFRNkUsR0FBTTB0QixFQUFjMXRCLEVBQUksVUFDdkN3ZCxFQUFPcmlCLFNBQVE2RSxHQUFNMHRCLEVBQWMxdEIsRUFBSSxTQUN6QyxDQUNBaUUsRUFBRyxRQUFRLE1BQ2dDLElBQXJDM0QsRUFBT1EsT0FBT3djLFdBQVdoVSxRQUUzQm9iLEtBRUFuRixJQUNBelgsSUFDRixJQUVGN0QsRUFBRywrQkFBK0IsS0FDaEM2RCxHQUFRLElBRVY3RCxFQUFHLFdBQVcsS0FDWm1tQixHQUFTLElBRVhubUIsRUFBRyxrQkFBa0IsS0FDbkIsSUFBSSxPQUNGc1osRUFBTSxPQUNOQyxHQUNFbGQsRUFBT2dkLFdBQ1hDLEVBQVMwUCxFQUFrQjFQLEdBQzNCQyxFQUFTeVAsRUFBa0J6UCxHQUN2QmxkLEVBQU9nSixRQUNUeEIsSUFHRixJQUFJeVYsS0FBV0MsR0FBUWplLFFBQU9TLEtBQVFBLElBQUk3RSxTQUFRNkUsR0FBTUEsRUFBRzdGLFVBQVVvSSxJQUFJakMsRUFBT1EsT0FBT3djLFdBQVd5UCxZQUFXLElBRS9HOW9CLEVBQUcsU0FBUyxDQUFDMHBCLEVBQUlwWixLQUNmLElBQUksT0FDRmdKLEVBQU0sT0FDTkMsR0FDRWxkLEVBQU9nZCxXQUNYQyxFQUFTMFAsRUFBa0IxUCxHQUMzQkMsRUFBU3lQLEVBQWtCelAsR0FDM0IsTUFBTS9HLEVBQVdsQyxFQUFFM2EsT0FDbkIsR0FBSTBHLEVBQU9RLE9BQU93YyxXQUFXc1AsY0FBZ0JwUCxFQUFPaFcsU0FBU2lQLEtBQWM4RyxFQUFPL1YsU0FBU2lQLEdBQVcsQ0FDcEcsR0FBSW5XLEVBQU9zdEIsWUFBY3R0QixFQUFPUSxPQUFPOHNCLFlBQWN0dEIsRUFBT1EsT0FBTzhzQixXQUFXQyxZQUFjdnRCLEVBQU9zdEIsV0FBVzV0QixLQUFPeVcsR0FBWW5XLEVBQU9zdEIsV0FBVzV0QixHQUFHOE4sU0FBUzJJLElBQVksT0FDM0ssSUFBSXFYLEVBQ0F2USxFQUFPaGtCLE9BQ1R1MEIsRUFBV3ZRLEVBQU8sR0FBR3BqQixVQUFVMlQsU0FBU3hOLEVBQU9RLE9BQU93YyxXQUFXd1AsYUFDeER0UCxFQUFPamtCLFNBQ2hCdTBCLEVBQVd0USxFQUFPLEdBQUdyakIsVUFBVTJULFNBQVN4TixFQUFPUSxPQUFPd2MsV0FBV3dQLGNBR2pFdG5CLEdBRGUsSUFBYnNvQixFQUNHLGlCQUVBLGtCQUVQLElBQUl2USxLQUFXQyxHQUFRamUsUUFBT1MsS0FBUUEsSUFBSTdFLFNBQVE2RSxHQUFNQSxFQUFHN0YsVUFBVUMsT0FBT2tHLEVBQU9RLE9BQU93YyxXQUFXd1AsY0FDdkcsS0FFRixNQUtNcEksRUFBVSxLQUNkcGtCLEVBQU9OLEdBQUc3RixVQUFVb0ksT0FBT2pDLEVBQU9RLE9BQU93YyxXQUFXMFAsd0JBQXdCdm9CLE1BQU0sTUFDbEYybEIsR0FBUyxFQUVYcnZCLE9BQU8wTixPQUFPbkksRUFBT2dkLFdBQVksQ0FDL0JxSCxPQVZhLEtBQ2Jya0IsRUFBT04sR0FBRzdGLFVBQVVvTSxVQUFVakcsRUFBT1EsT0FBT3djLFdBQVcwUCx3QkFBd0J2b0IsTUFBTSxNQUNyRjhhLElBQ0F6WCxHQUFRLEVBUVI0YyxVQUNBNWMsU0FDQXlYLE9BQ0E2SyxXQUVKLEVDeExBLFNBQW9CL3BCLEdBQ2xCLElBQUksT0FDRkMsRUFBTSxhQUNONm5CLEVBQVksR0FDWmxrQixFQUFFLEtBQ0Z1QixHQUNFbkYsRUFDSixNQUFNMHRCLEVBQU0sb0JBcUNaLElBQUlDLEVBcENKN0YsRUFBYSxDQUNYeUYsV0FBWSxDQUNWNXRCLEdBQUksS0FDSml1QixjQUFlLE9BQ2ZKLFdBQVcsRUFDWGpCLGFBQWEsRUFDYnNCLGFBQWMsS0FDZEMsa0JBQW1CLEtBQ25CQyxlQUFnQixLQUNoQkMsYUFBYyxLQUNkQyxxQkFBcUIsRUFDckJoUyxLQUFNLFVBRU5pUyxnQkFBZ0IsRUFDaEJDLG1CQUFvQixFQUNwQkMsc0JBQXVCQyxHQUFVQSxFQUNqQ0Msb0JBQXFCRCxHQUFVQSxFQUMvQkUsWUFBYSxHQUFHYixXQUNoQmMsa0JBQW1CLEdBQUdkLGtCQUN0QmUsY0FBZSxHQUFHZixLQUNsQmdCLGFBQWMsR0FBR2hCLFlBQ2pCaUIsV0FBWSxHQUFHakIsVUFDZmpCLFlBQWEsR0FBR2lCLFdBQ2hCa0IscUJBQXNCLEdBQUdsQixxQkFDekJtQix5QkFBMEIsR0FBR25CLHlCQUM3Qm9CLGVBQWdCLEdBQUdwQixjQUNuQmhCLFVBQVcsR0FBR2dCLFNBQ2RxQixnQkFBaUIsR0FBR3JCLGVBQ3BCc0IsY0FBZSxHQUFHdEIsYUFDbEJ1Qix3QkFBeUIsR0FBR3ZCLGdCQUdoQ3p0QixFQUFPc3RCLFdBQWEsQ0FDbEI1dEIsR0FBSSxLQUNKdXZCLFFBQVMsSUFHWCxJQUFJQyxFQUFxQixFQUN6QixNQUFNdkMsRUFBb0JqdEIsSUFBT3dDLE1BQU1DLFFBQVF6QyxHQUFNQSxFQUFLLENBQUNBLElBQUtULFFBQU9nVixLQUFPQSxJQUM5RSxTQUFTa2IsSUFDUCxPQUFRbnZCLEVBQU9RLE9BQU84c0IsV0FBVzV0QixLQUFPTSxFQUFPc3RCLFdBQVc1dEIsSUFBTXdDLE1BQU1DLFFBQVFuQyxFQUFPc3RCLFdBQVc1dEIsS0FBdUMsSUFBaENNLEVBQU9zdEIsV0FBVzV0QixHQUFHekcsTUFDOUgsQ0FDQSxTQUFTbTJCLEVBQWVDLEVBQVVDLEdBQ2hDLE1BQU0sa0JBQ0pmLEdBQ0V2dUIsRUFBT1EsT0FBTzhzQixXQUNiK0IsSUFDTEEsRUFBV0EsR0FBeUIsU0FBYkMsRUFBc0IsV0FBYSxRQUF0QyxxQkFFbEJELEVBQVN4MUIsVUFBVW9JLElBQUksR0FBR3NzQixLQUFxQmUsTUFDL0NELEVBQVdBLEdBQXlCLFNBQWJDLEVBQXNCLFdBQWEsUUFBdEMsb0JBRWxCRCxFQUFTeDFCLFVBQVVvSSxJQUFJLEdBQUdzc0IsS0FBcUJlLEtBQVlBLEtBR2pFLENBQ0EsU0FBU0MsRUFBY3RiLEdBQ3JCLE1BQU1vYixFQUFXcGIsRUFBRTNhLE9BQU9xTSxRQUFRLEVBQWtCM0YsRUFBT1EsT0FBTzhzQixXQUFXZ0IsY0FDN0UsSUFBS2UsRUFDSCxPQUVGcGIsRUFBRWtFLGlCQUNGLE1BQU1wVCxFQUFRLEVBQWFzcUIsR0FBWXJ2QixFQUFPUSxPQUFPa0wsZUFDckQsR0FBSTFMLEVBQU9RLE9BQU84RyxLQUFNLENBQ3RCLEdBQUl0SCxFQUFPdUgsWUFBY3hDLEVBQU8sT0FDaEMsTUFBTXdDLEVBQVl2SCxFQUFPdUgsVUFDbkJpb0IsRUFBZ0J4dkIsRUFBTytOLG9CQUFvQmhKLEdBQzNDMHFCLEVBQW9CenZCLEVBQU8rTixvQkFBb0IvTixFQUFPdUgsV0FDdERrTixFQUFVNVQsSUFDZCxNQUFNNnVCLEVBQXFCMXZCLEVBQU8wRyxZQUNsQzFHLEVBQU95VSxRQUFRLENBQ2I5QixVQUFXOVIsRUFDWCthLGlCQUFrQjRULEVBQ2xCM2MsU0FBUyxJQUdQNmMsSUFEa0IxdkIsRUFBTzBHLGFBRTNCMUcsRUFBT2tVLFlBQVkzTSxFQUFXLEdBQUcsR0FBTyxFQUMxQyxFQUVGLEdBQUlpb0IsRUFBZ0J4dkIsRUFBT21HLE9BQU9sTixPQUFTK0csRUFBTzBWLGFBQ2hEakIsRUFBUSthLEVBQWdCQyxFQUFvQixPQUFTLGFBQ2hELEdBQUl6dkIsRUFBT1EsT0FBTzZKLGVBQWdCLENBQ3ZDLE1BQU05RCxFQUFnRCxTQUFoQ3ZHLEVBQU9RLE9BQU8rRixjQUEyQnZHLEVBQU93Ryx1QkFBeUJyRixLQUFLc0YsS0FBSzFELFdBQVcvQyxFQUFPUSxPQUFPK0YsY0FBZSxLQUM3SWlwQixFQUFnQnJ1QixLQUFLb0ssTUFBTWhGLEVBQWdCLElBQzdDa08sRUFBUSxPQUVaLENBQ0F6VSxFQUFPa1UsWUFBWW5QLEVBQ3JCLE1BQ0UvRSxFQUFPNlMsUUFBUTlOLEVBRW5CLENBQ0EsU0FBU3lDLElBRVAsTUFBTW9CLEVBQU01SSxFQUFPNEksSUFDYnBJLEVBQVNSLEVBQU9RLE9BQU84c0IsV0FDN0IsR0FBSTZCLElBQXdCLE9BQzVCLElBR0lwdUIsRUFDQXdRLEVBSkE3UixFQUFLTSxFQUFPc3RCLFdBQVc1dEIsR0FDM0JBLEVBQUtpdEIsRUFBa0JqdEIsR0FJdkIsTUFBTXdKLEVBQWVsSixFQUFPK0ksU0FBVy9JLEVBQU9RLE9BQU91SSxRQUFRQyxRQUFVaEosRUFBTytJLFFBQVE1QyxPQUFPbE4sT0FBUytHLEVBQU9tRyxPQUFPbE4sT0FDOUcwMkIsRUFBUTN2QixFQUFPUSxPQUFPOEcsS0FBT25HLEtBQUtzRixLQUFLeUMsRUFBZWxKLEVBQU9RLE9BQU9rTCxnQkFBa0IxTCxFQUFPbUosU0FBU2xRLE9BWTVHLEdBWEkrRyxFQUFPUSxPQUFPOEcsTUFDaEJpSyxFQUFnQnZSLEVBQU93UixtQkFBcUIsRUFDNUN6USxFQUFVZixFQUFPUSxPQUFPa0wsZUFBaUIsRUFBSXZLLEtBQUtvSyxNQUFNdkwsRUFBT3VILFVBQVl2SCxFQUFPUSxPQUFPa0wsZ0JBQWtCMUwsRUFBT3VILGdCQUM3RSxJQUFyQnZILEVBQU82TSxXQUN2QjlMLEVBQVVmLEVBQU82TSxVQUNqQjBFLEVBQWdCdlIsRUFBT3lSLG9CQUV2QkYsRUFBZ0J2UixFQUFPdVIsZUFBaUIsRUFDeEN4USxFQUFVZixFQUFPMEcsYUFBZSxHQUdkLFlBQWhCbEcsRUFBT3diLE1BQXNCaGMsRUFBT3N0QixXQUFXMkIsU0FBV2p2QixFQUFPc3RCLFdBQVcyQixRQUFRaDJCLE9BQVMsRUFBRyxDQUNsRyxNQUFNZzJCLEVBQVVqdkIsRUFBT3N0QixXQUFXMkIsUUFDbEMsSUFBSVcsRUFDQXphLEVBQ0EwYSxFQXNCSixHQXJCSXJ2QixFQUFPeXRCLGlCQUNUUCxFQUFhOXFCLEVBQWlCcXNCLEVBQVEsR0FBSWp2QixFQUFPOEgsZUFBaUIsUUFBVSxVQUFVLEdBQ3RGcEksRUFBRzdFLFNBQVFteUIsSUFDVEEsRUFBTXJ4QixNQUFNcUUsRUFBTzhILGVBQWlCLFFBQVUsVUFBZTRsQixHQUFjbHRCLEVBQU8wdEIsbUJBQXFCLEdBQTdDLElBQW1ELElBRTNHMXRCLEVBQU8wdEIsbUJBQXFCLFFBQXVCL3pCLElBQWxCb1gsSUFDbkMyZCxHQUFzQm51QixHQUFXd1EsR0FBaUIsR0FDOUMyZCxFQUFxQjF1QixFQUFPMHRCLG1CQUFxQixFQUNuRGdCLEVBQXFCMXVCLEVBQU8wdEIsbUJBQXFCLEVBQ3hDZ0IsRUFBcUIsSUFDOUJBLEVBQXFCLElBR3pCVSxFQUFhenVCLEtBQUtDLElBQUlMLEVBQVVtdUIsRUFBb0IsR0FDcEQvWixFQUFZeWEsR0FBY3p1QixLQUFLRSxJQUFJNHRCLEVBQVFoMkIsT0FBUXVILEVBQU8wdEIsb0JBQXNCLEdBQ2hGMkIsR0FBWTFhLEVBQVl5YSxHQUFjLEdBRXhDWCxFQUFRcDBCLFNBQVF3MEIsSUFDZCxNQUFNUyxFQUFrQixJQUFJLENBQUMsR0FBSSxRQUFTLGFBQWMsUUFBUyxhQUFjLFNBQVM5b0IsS0FBSStvQixHQUFVLEdBQUd2dkIsRUFBTyt0QixvQkFBb0J3QixPQUFXL29CLEtBQUlncEIsR0FBa0IsaUJBQU5BLEdBQWtCQSxFQUFFOW9CLFNBQVMsS0FBTzhvQixFQUFFN3JCLE1BQU0sS0FBTzZyQixJQUFHQyxPQUNyTlosRUFBU3gxQixVQUFVb00sVUFBVTZwQixFQUFnQixJQUUzQ3B3QixFQUFHekcsT0FBUyxFQUNkZzJCLEVBQVFwMEIsU0FBUXExQixJQUNkLE1BQU1DLEVBQWMsRUFBYUQsR0FDN0JDLElBQWdCcHZCLEVBQ2xCbXZCLEVBQU9yMkIsVUFBVW9JLE9BQU96QixFQUFPK3RCLGtCQUFrQnBxQixNQUFNLE1BQzlDbkUsRUFBTzRGLFdBQ2hCc3FCLEVBQU90MEIsYUFBYSxPQUFRLFVBRTFCNEUsRUFBT3l0QixpQkFDTGtDLEdBQWVQLEdBQWNPLEdBQWVoYixHQUM5QythLEVBQU9yMkIsVUFBVW9JLE9BQU8sR0FBR3pCLEVBQU8rdEIseUJBQXlCcHFCLE1BQU0sTUFFL0Rnc0IsSUFBZ0JQLEdBQ2xCUixFQUFlYyxFQUFRLFFBRXJCQyxJQUFnQmhiLEdBQ2xCaWEsRUFBZWMsRUFBUSxRQUUzQixRQUVHLENBQ0wsTUFBTUEsRUFBU2pCLEVBQVFsdUIsR0FTdkIsR0FSSW12QixHQUNGQSxFQUFPcjJCLFVBQVVvSSxPQUFPekIsRUFBTyt0QixrQkFBa0JwcUIsTUFBTSxNQUVyRG5FLEVBQU80RixXQUNUcXBCLEVBQVFwMEIsU0FBUSxDQUFDdzBCLEVBQVVjLEtBQ3pCZCxFQUFTenpCLGFBQWEsT0FBUXUwQixJQUFnQnB2QixFQUFVLGdCQUFrQixTQUFTLElBR25GUCxFQUFPeXRCLGVBQWdCLENBQ3pCLE1BQU1tQyxFQUF1Qm5CLEVBQVFXLEdBQy9CUyxFQUFzQnBCLEVBQVE5WixHQUNwQyxJQUFLLElBQUluYyxFQUFJNDJCLEVBQVk1MkIsR0FBS21jLEVBQVduYyxHQUFLLEVBQ3hDaTJCLEVBQVFqMkIsSUFDVmkyQixFQUFRajJCLEdBQUdhLFVBQVVvSSxPQUFPLEdBQUd6QixFQUFPK3RCLHlCQUF5QnBxQixNQUFNLE1BR3pFaXJCLEVBQWVnQixFQUFzQixRQUNyQ2hCLEVBQWVpQixFQUFxQixPQUN0QyxDQUNGLENBQ0EsR0FBSTd2QixFQUFPeXRCLGVBQWdCLENBQ3pCLE1BQU1xQyxFQUF1Qm52QixLQUFLRSxJQUFJNHRCLEVBQVFoMkIsT0FBUXVILEVBQU8wdEIsbUJBQXFCLEdBQzVFcUMsR0FBaUI3QyxFQUFhNEMsRUFBdUI1QyxHQUFjLEVBQUltQyxFQUFXbkMsRUFDbEY4QyxFQUFhNW5CLEVBQU0sUUFBVSxPQUNuQ3FtQixFQUFRcDBCLFNBQVFxMUIsSUFDZEEsRUFBT3YwQixNQUFNcUUsRUFBTzhILGVBQWlCMG9CLEVBQWEsT0FBUyxHQUFHRCxLQUFpQixHQUVuRixDQUNGLENBQ0E3d0IsRUFBRzdFLFNBQVEsQ0FBQ215QixFQUFPeUQsS0FTakIsR0FSb0IsYUFBaEJqd0IsRUFBT3diLE9BQ1RnUixFQUFNajBCLGlCQUFpQixFQUFrQnlILEVBQU9pdUIsZUFBZTV6QixTQUFRNjFCLElBQ3JFQSxFQUFXQyxZQUFjbndCLEVBQU8ydEIsc0JBQXNCcHRCLEVBQVUsRUFBRSxJQUVwRWlzQixFQUFNajBCLGlCQUFpQixFQUFrQnlILEVBQU9rdUIsYUFBYTd6QixTQUFRKzFCLElBQ25FQSxFQUFRRCxZQUFjbndCLEVBQU82dEIsb0JBQW9Cc0IsRUFBTSxLQUd2QyxnQkFBaEJudkIsRUFBT3diLEtBQXdCLENBQ2pDLElBQUk2VSxFQUVGQSxFQURFcndCLEVBQU93dEIsb0JBQ2NodUIsRUFBTzhILGVBQWlCLFdBQWEsYUFFckM5SCxFQUFPOEgsZUFBaUIsYUFBZSxXQUVoRSxNQUFNZ3BCLEdBQVMvdkIsRUFBVSxHQUFLNHVCLEVBQzlCLElBQUlvQixFQUFTLEVBQ1RDLEVBQVMsRUFDZ0IsZUFBekJILEVBQ0ZFLEVBQVNELEVBRVRFLEVBQVNGLEVBRVg5RCxFQUFNajBCLGlCQUFpQixFQUFrQnlILEVBQU9tdUIsdUJBQXVCOXpCLFNBQVFvMkIsSUFDN0VBLEVBQVd0MUIsTUFBTXFQLFVBQVksNkJBQTZCK2xCLGFBQWtCQyxLQUM1RUMsRUFBV3QxQixNQUFNNmxCLG1CQUFxQixHQUFHeGhCLEVBQU9RLE9BQU9DLFNBQVMsR0FFcEUsQ0FDb0IsV0FBaEJELEVBQU93YixNQUFxQnhiLEVBQU91dEIsY0FDckNmLEVBQU1rRSxVQUFZMXdCLEVBQU91dEIsYUFBYS90QixFQUFRZSxFQUFVLEVBQUc0dUIsR0FDeEMsSUFBZmMsR0FBa0J2ckIsRUFBSyxtQkFBb0I4bkIsS0FFNUIsSUFBZnlELEdBQWtCdnJCLEVBQUssbUJBQW9COG5CLEdBQy9DOW5CLEVBQUssbUJBQW9COG5CLElBRXZCaHRCLEVBQU9RLE9BQU95TSxlQUFpQmpOLEVBQU9nSixTQUN4Q2drQixFQUFNbnpCLFVBQVVtRyxFQUFPaWpCLFNBQVcsTUFBUSxVQUFVemlCLEVBQU9pc0IsVUFDN0QsR0FFSixDQUNBLFNBQVMwRSxJQUVQLE1BQU0zd0IsRUFBU1IsRUFBT1EsT0FBTzhzQixXQUM3QixHQUFJNkIsSUFBd0IsT0FDNUIsTUFBTWptQixFQUFlbEosRUFBTytJLFNBQVcvSSxFQUFPUSxPQUFPdUksUUFBUUMsUUFBVWhKLEVBQU8rSSxRQUFRNUMsT0FBT2xOLE9BQVMrRyxFQUFPbUcsT0FBT2xOLE9BQ3BILElBQUl5RyxFQUFLTSxFQUFPc3RCLFdBQVc1dEIsR0FDM0JBLEVBQUtpdEIsRUFBa0JqdEIsR0FDdkIsSUFBSTB4QixFQUFpQixHQUNyQixHQUFvQixZQUFoQjV3QixFQUFPd2IsS0FBb0IsQ0FDN0IsSUFBSXFWLEVBQWtCcnhCLEVBQU9RLE9BQU84RyxLQUFPbkcsS0FBS3NGLEtBQUt5QyxFQUFlbEosRUFBT1EsT0FBT2tMLGdCQUFrQjFMLEVBQU9tSixTQUFTbFEsT0FDaEgrRyxFQUFPUSxPQUFPd1ksVUFBWWhaLEVBQU9RLE9BQU93WSxTQUFTaFEsU0FBV3FvQixFQUFrQm5vQixJQUNoRm1vQixFQUFrQm5vQixHQUVwQixJQUFLLElBQUlsUSxFQUFJLEVBQUdBLEVBQUlxNEIsRUFBaUJyNEIsR0FBSyxFQUNwQ3dILEVBQU9vdEIsYUFDVHdELEdBQWtCNXdCLEVBQU9vdEIsYUFBYXJ2QixLQUFLeUIsRUFBUWhILEVBQUd3SCxFQUFPOHRCLGFBRzdEOEMsR0FBa0IsSUFBSTV3QixFQUFPbXRCLGlCQUFpQjN0QixFQUFPNEYsVUFBWSxnQkFBa0IsYUFBYXBGLEVBQU84dEIsa0JBQWtCOXRCLEVBQU9tdEIsZ0JBR3RJLENBQ29CLGFBQWhCbnRCLEVBQU93YixPQUVQb1YsRUFERTV3QixFQUFPc3RCLGVBQ1F0dEIsRUFBT3N0QixlQUFldnZCLEtBQUt5QixFQUFRUSxFQUFPaXVCLGFBQWNqdUIsRUFBT2t1QixZQUUvRCxnQkFBZ0JsdUIsRUFBT2l1Qix3Q0FBa0RqdUIsRUFBT2t1Qix1QkFHakYsZ0JBQWhCbHVCLEVBQU93YixPQUVQb1YsRUFERTV3QixFQUFPcXRCLGtCQUNRcnRCLEVBQU9xdEIsa0JBQWtCdHZCLEtBQUt5QixFQUFRUSxFQUFPbXVCLHNCQUU3QyxnQkFBZ0JudUIsRUFBT211QixpQ0FHNUMzdUIsRUFBT3N0QixXQUFXMkIsUUFBVSxHQUM1QnZ2QixFQUFHN0UsU0FBUW15QixJQUNXLFdBQWhCeHNCLEVBQU93YixPQUNUZ1IsRUFBTWtFLFVBQVlFLEdBQWtCLElBRWxCLFlBQWhCNXdCLEVBQU93YixNQUNUaGMsRUFBT3N0QixXQUFXMkIsUUFBUXRzQixRQUFRcXFCLEVBQU1qMEIsaUJBQWlCLEVBQWtCeUgsRUFBTzh0QixjQUNwRixJQUVrQixXQUFoQjl0QixFQUFPd2IsTUFDVDlXLEVBQUssbUJBQW9CeEYsRUFBRyxHQUVoQyxDQUNBLFNBQVN1ZixJQUNQamYsRUFBT1EsT0FBTzhzQixXQUFhLEVBQTBCdHRCLEVBQVFBLEVBQU80akIsZUFBZTBKLFdBQVl0dEIsRUFBT1EsT0FBTzhzQixXQUFZLENBQ3ZINXRCLEdBQUksc0JBRU4sTUFBTWMsRUFBU1IsRUFBT1EsT0FBTzhzQixXQUM3QixJQUFLOXNCLEVBQU9kLEdBQUksT0FDaEIsSUFBSUEsRUFDcUIsaUJBQWRjLEVBQU9kLElBQW1CTSxFQUFPNEYsWUFDMUNsRyxFQUFLTSxFQUFPTixHQUFHOUYsY0FBYzRHLEVBQU9kLEtBRWpDQSxHQUEyQixpQkFBZGMsRUFBT2QsS0FDdkJBLEVBQUssSUFBSTVHLFNBQVNDLGlCQUFpQnlILEVBQU9kLE1BRXZDQSxJQUNIQSxFQUFLYyxFQUFPZCxJQUVUQSxHQUFvQixJQUFkQSxFQUFHekcsU0FDVitHLEVBQU9RLE9BQU8rZSxtQkFBMEMsaUJBQWQvZSxFQUFPZCxJQUFtQndDLE1BQU1DLFFBQVF6QyxJQUFPQSxFQUFHekcsT0FBUyxJQUN2R3lHLEVBQUssSUFBSU0sRUFBT04sR0FBRzNHLGlCQUFpQnlILEVBQU9kLEtBRXZDQSxFQUFHekcsT0FBUyxJQUNkeUcsRUFBS0EsRUFBR1QsUUFBTyt0QixHQUNULEVBQWVBLEVBQU8sV0FBVyxLQUFPaHRCLEVBQU9OLEtBRWxELEtBR0h3QyxNQUFNQyxRQUFRekMsSUFBcUIsSUFBZEEsRUFBR3pHLFNBQWN5RyxFQUFLQSxFQUFHLElBQ2xEakYsT0FBTzBOLE9BQU9uSSxFQUFPc3RCLFdBQVksQ0FDL0I1dEIsT0FFRkEsRUFBS2l0QixFQUFrQmp0QixHQUN2QkEsRUFBRzdFLFNBQVFteUIsSUFDVyxZQUFoQnhzQixFQUFPd2IsTUFBc0J4YixFQUFPK3NCLFdBQ3RDUCxFQUFNbnpCLFVBQVVvSSxRQUFRekIsRUFBT3F1QixnQkFBa0IsSUFBSTFxQixNQUFNLE1BRTdENm9CLEVBQU1uekIsVUFBVW9JLElBQUl6QixFQUFPZ3VCLGNBQWdCaHVCLEVBQU93YixNQUNsRGdSLEVBQU1uekIsVUFBVW9JLElBQUlqQyxFQUFPOEgsZUFBaUJ0SCxFQUFPc3VCLGdCQUFrQnR1QixFQUFPdXVCLGVBQ3hELFlBQWhCdnVCLEVBQU93YixNQUFzQnhiLEVBQU95dEIsaUJBQ3RDakIsRUFBTW56QixVQUFVb0ksSUFBSSxHQUFHekIsRUFBT2d1QixnQkFBZ0JodUIsRUFBT3diLGdCQUNyRGtULEVBQXFCLEVBQ2pCMXVCLEVBQU8wdEIsbUJBQXFCLElBQzlCMXRCLEVBQU8wdEIsbUJBQXFCLElBR1osZ0JBQWhCMXRCLEVBQU93YixNQUEwQnhiLEVBQU93dEIscUJBQzFDaEIsRUFBTW56QixVQUFVb0ksSUFBSXpCLEVBQU9vdUIsMEJBRXpCcHVCLEVBQU8rc0IsV0FDVFAsRUFBTTl6QixpQkFBaUIsUUFBU3EyQixHQUU3QnZ2QixFQUFPZ0osU0FDVmdrQixFQUFNbnpCLFVBQVVvSSxJQUFJekIsRUFBT2lzQixVQUM3QixJQUVKLENBQ0EsU0FBUzNDLElBQ1AsTUFBTXRwQixFQUFTUixFQUFPUSxPQUFPOHNCLFdBQzdCLEdBQUk2QixJQUF3QixPQUM1QixJQUFJenZCLEVBQUtNLEVBQU9zdEIsV0FBVzV0QixHQUN2QkEsSUFDRkEsRUFBS2l0QixFQUFrQmp0QixHQUN2QkEsRUFBRzdFLFNBQVFteUIsSUFDVEEsRUFBTW56QixVQUFVb00sT0FBT3pGLEVBQU9nc0IsYUFDOUJRLEVBQU1uekIsVUFBVW9NLE9BQU96RixFQUFPZ3VCLGNBQWdCaHVCLEVBQU93YixNQUNyRGdSLEVBQU1uekIsVUFBVW9NLE9BQU9qRyxFQUFPOEgsZUFBaUJ0SCxFQUFPc3VCLGdCQUFrQnR1QixFQUFPdXVCLGVBQzNFdnVCLEVBQU8rc0IsWUFDVFAsRUFBTW56QixVQUFVb00sV0FBV3pGLEVBQU9xdUIsZ0JBQWtCLElBQUkxcUIsTUFBTSxNQUM5RDZvQixFQUFNL3hCLG9CQUFvQixRQUFTczBCLEdBQ3JDLEtBR0F2dkIsRUFBT3N0QixXQUFXMkIsU0FBU2p2QixFQUFPc3RCLFdBQVcyQixRQUFRcDBCLFNBQVFteUIsR0FBU0EsRUFBTW56QixVQUFVb00sVUFBVXpGLEVBQU8rdEIsa0JBQWtCcHFCLE1BQU0sT0FDckksQ0FDQVIsRUFBRyxtQkFBbUIsS0FDcEIsSUFBSzNELEVBQU9zdEIsYUFBZXR0QixFQUFPc3RCLFdBQVc1dEIsR0FBSSxPQUNqRCxNQUFNYyxFQUFTUixFQUFPUSxPQUFPOHNCLFdBQzdCLElBQUksR0FDRjV0QixHQUNFTSxFQUFPc3RCLFdBQ1g1dEIsRUFBS2l0QixFQUFrQmp0QixHQUN2QkEsRUFBRzdFLFNBQVFteUIsSUFDVEEsRUFBTW56QixVQUFVb00sT0FBT3pGLEVBQU9zdUIsZ0JBQWlCdHVCLEVBQU91dUIsZUFDdEQvQixFQUFNbnpCLFVBQVVvSSxJQUFJakMsRUFBTzhILGVBQWlCdEgsRUFBT3N1QixnQkFBa0J0dUIsRUFBT3V1QixjQUFjLEdBQzFGLElBRUpwckIsRUFBRyxRQUFRLE1BQ2dDLElBQXJDM0QsRUFBT1EsT0FBTzhzQixXQUFXdGtCLFFBRTNCb2IsS0FFQW5GLElBQ0FrUyxJQUNBM3BCLElBQ0YsSUFFRjdELEVBQUcscUJBQXFCLFVBQ1UsSUFBckIzRCxFQUFPNk0sV0FDaEJyRixHQUNGLElBRUY3RCxFQUFHLG1CQUFtQixLQUNwQjZELEdBQVEsSUFFVjdELEVBQUcsd0JBQXdCLEtBQ3pCd3RCLElBQ0EzcEIsR0FBUSxJQUVWN0QsRUFBRyxXQUFXLEtBQ1ptbUIsR0FBUyxJQUVYbm1CLEVBQUcsa0JBQWtCLEtBQ25CLElBQUksR0FDRmpFLEdBQ0VNLEVBQU9zdEIsV0FDUDV0QixJQUNGQSxFQUFLaXRCLEVBQWtCanRCLEdBQ3ZCQSxFQUFHN0UsU0FBUW15QixHQUFTQSxFQUFNbnpCLFVBQVVtRyxFQUFPZ0osUUFBVSxTQUFXLE9BQU9oSixFQUFPUSxPQUFPOHNCLFdBQVdiLGFBQ2xHLElBRUY5b0IsRUFBRyxlQUFlLEtBQ2hCNkQsR0FBUSxJQUVWN0QsRUFBRyxTQUFTLENBQUMwcEIsRUFBSXBaLEtBQ2YsTUFBTWtDLEVBQVdsQyxFQUFFM2EsT0FDYm9HLEVBQUtpdEIsRUFBa0Izc0IsRUFBT3N0QixXQUFXNXRCLElBQy9DLEdBQUlNLEVBQU9RLE9BQU84c0IsV0FBVzV0QixJQUFNTSxFQUFPUSxPQUFPOHNCLFdBQVdoQixhQUFlNXNCLEdBQU1BLEVBQUd6RyxPQUFTLElBQU1rZCxFQUFTdGMsVUFBVTJULFNBQVN4TixFQUFPUSxPQUFPOHNCLFdBQVdnQixhQUFjLENBQ3BLLEdBQUl0dUIsRUFBT2dkLGFBQWVoZCxFQUFPZ2QsV0FBV0MsUUFBVTlHLElBQWFuVyxFQUFPZ2QsV0FBV0MsUUFBVWpkLEVBQU9nZCxXQUFXRSxRQUFVL0csSUFBYW5XLEVBQU9nZCxXQUFXRSxRQUFTLE9BQ25LLE1BQU1zUSxFQUFXOXRCLEVBQUcsR0FBRzdGLFVBQVUyVCxTQUFTeE4sRUFBT1EsT0FBTzhzQixXQUFXZCxhQUVqRXRuQixHQURlLElBQWJzb0IsRUFDRyxpQkFFQSxrQkFFUDl0QixFQUFHN0UsU0FBUW15QixHQUFTQSxFQUFNbnpCLFVBQVVDLE9BQU9rRyxFQUFPUSxPQUFPOHNCLFdBQVdkLGNBQ3RFLEtBRUYsTUFhTXBJLEVBQVUsS0FDZHBrQixFQUFPTixHQUFHN0YsVUFBVW9JLElBQUlqQyxFQUFPUSxPQUFPOHNCLFdBQVcwQix5QkFDakQsSUFBSSxHQUNGdHZCLEdBQ0VNLEVBQU9zdEIsV0FDUDV0QixJQUNGQSxFQUFLaXRCLEVBQWtCanRCLEdBQ3ZCQSxFQUFHN0UsU0FBUW15QixHQUFTQSxFQUFNbnpCLFVBQVVvSSxJQUFJakMsRUFBT1EsT0FBTzhzQixXQUFXMEIsNEJBRW5FbEYsR0FBUyxFQUVYcnZCLE9BQU8wTixPQUFPbkksRUFBT3N0QixXQUFZLENBQy9CakosT0F6QmEsS0FDYnJrQixFQUFPTixHQUFHN0YsVUFBVW9NLE9BQU9qRyxFQUFPUSxPQUFPOHNCLFdBQVcwQix5QkFDcEQsSUFBSSxHQUNGdHZCLEdBQ0VNLEVBQU9zdEIsV0FDUDV0QixJQUNGQSxFQUFLaXRCLEVBQWtCanRCLEdBQ3ZCQSxFQUFHN0UsU0FBUW15QixHQUFTQSxFQUFNbnpCLFVBQVVvTSxPQUFPakcsRUFBT1EsT0FBTzhzQixXQUFXMEIsNEJBRXRFL1AsSUFDQWtTLElBQ0EzcEIsR0FBUSxFQWVSNGMsVUFDQStNLFNBQ0EzcEIsU0FDQXlYLE9BQ0E2SyxXQUVKLEdGdGNFeGlCLE1BQU0sRUFDTjBWLFdBQVksQ0FFVkMsT0FBUSxzQkFDUkMsT0FBUSx3QkFHVjNXLGNBQWUsRUFDZnFELGFBQWMsR0FFZHVHLFlBQVksSSxPR3BCUCxNQUFNbWhCLEVBQ1Q5MkIsV0FBQUEsQ0FBWSsyQixHQUNScDBCLEtBQUtxMEIsT0FBUzE0QixTQUFTYyxjQUFjMjNCLEdBQ3JDcDBCLEtBQUtzMEIsc0JBQXdCdDBCLEtBQUt1MEIsZ0JBQWdCcE8sS0FBS25tQixLQUMzRCxDQUNBNUQsSUFBQUEsR0FDSTRELEtBQUtxMEIsT0FBTzMzQixVQUFVb0ksSUFBSSxnQkFDMUJuSixTQUFTSSxpQkFBaUIsVUFBV2lFLEtBQUtzMEIsc0JBQzlDLENBQ0FFLEtBQUFBLEdBQ0l4MEIsS0FBS3EwQixPQUFPMzNCLFVBQVVvTSxPQUFPLGdCQUM3Qm5OLFNBQVNtQyxvQkFBb0IsVUFBV2tDLEtBQUtzMEIsc0JBQ2pELENBQ0FDLGVBQUFBLENBQWdCeFcsR0FDSSxXQUFaQSxFQUFJcGdCLEtBQ0pxQyxLQUFLdzBCLE9BRWIsQ0FDQUMsaUJBQUFBLEdBQ0l6MEIsS0FBS3EwQixPQUFPdDRCLGlCQUFpQixhQUFjZ2lCLEtBQ25DQSxFQUFJNWhCLE9BQU9PLFVBQVUyVCxTQUFTLGlCQUFvQjBOLEVBQUk1aEIsT0FBT08sVUFBVTJULFNBQVMsa0JBQ2hGclEsS0FBS3cwQixPQUNULEdBRVIsRUNwQkosTUFBTUUsRUFBWS80QixTQUFTYyxjQUFjLHVCQUNuQ2s0QixFQUFRaDVCLFNBQVNjLGNBQWMsd0JBQy9CbTRCLEVBQWFqNUIsU0FBU2MsY0FBYyxxQkFDcENvNEIsRUFBY2w1QixTQUFTYyxjQUFjLGlCQUNyQ3E0QixFQUFpQm41QixTQUFTYyxjQUFjLHlCQUN4Q3M0QixHQUFvQixJQ1BuQixjQUE0QlosRUFFakM5MkIsV0FBQUEsQ0FBWSsyQixFQUFlWSxHQUN6QkMsTUFBTWIsR0FDTnAwQixLQUFLazFCLGtCQUFvQkYsRUFDekJoMUIsS0FBS20xQixhQUFlbjFCLEtBQUtxMEIsT0FBTzUzQixjQUFjLFNBQzlDdUQsS0FBS28xQixTQUFXcDFCLEtBQUttMUIsYUFBYTE0QixjQUFjLHVCQUVsRCxDQUVBZzRCLGlCQUFBQSxHQUNFUSxNQUFNUixvQkFDTnowQixLQUFLbTFCLGFBQWFwNUIsaUJBQWlCLFVBQVdnaUIsSUFDNUNBLEVBQUkvQyxpQkFDSnFhLE1BQU0sd0JBQXdCLEdBRWxDLENBRUFiLEtBQUFBLEdBRUVTLE1BQU1ULFFBQ054MEIsS0FBS20xQixhQUFhRyxPQUNwQixHRGYwQyx3QkFDNUNQLEdBQWtCTixvQkFDbEJLLEVBQWUvNEIsaUJBQWlCLFNBQVMsS0FDdkNnNUIsR0FBa0IzNEIsTUFBTSxJQUUxQnM0QixFQUFVMzRCLGlCQUFpQixTQUFTLEtBQ2xDODRCLEVBQVluNEIsVUFBVUMsT0FBTyxjQUFjLElBRTdDaTRCLEVBQVc3NEIsaUJBQWlCLFNBQVMsS0FDbkM0NEIsRUFBTWo0QixVQUFVQyxPQUFPLGVBQWUsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3Q1MDA3MDAvLi9zcmMvY29tcG9uZW50cy9hY2NvcmRpb24vYWNjb3JkaW9uLmpzIiwid2VicGFjazovL3Rlc3Q1MDA3MDAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGVzdDUwMDcwMC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyIsIndlYnBhY2s6Ly90ZXN0NTAwNzAwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvdXRpbHMubWpzIiwid2VicGFjazovL3Rlc3Q1MDA3MDAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zd2lwZXItY29yZS5tanMiLCJ3ZWJwYWNrOi8vdGVzdDUwMDcwMC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyIsIndlYnBhY2s6Ly90ZXN0NTAwNzAwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5tanMiLCJ3ZWJwYWNrOi8vdGVzdDUwMDcwMC8uL3NyYy9jb21wb25lbnRzL3N3aXBlci9zd2lwZXIuanMiLCJ3ZWJwYWNrOi8vdGVzdDUwMDcwMC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9uYXZpZ2F0aW9uLm1qcyIsIndlYnBhY2s6Ly90ZXN0NTAwNzAwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhZ2luYXRpb24ubWpzIiwid2VicGFjazovL3Rlc3Q1MDA3MDAvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly90ZXN0NTAwNzAwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3Q1MDA3MDAvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRldGFpbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiZGV0YWlsc1wiKTtcclxuXHJcbmZvciAobGV0IGkgPSAwOyBpIDwgZGV0YWlscy5sZW5ndGg7IGkrKykge1xyXG4gIGRldGFpbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcInRvZ2dsZVwiLCBhY2NvcmRpb24pO1xyXG4gIGRldGFpbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcInRvZ2dsZVwiLCBoYW5kbGVBcnJvd3NUb2dnbGUpO1xyXG59XHJcbmZ1bmN0aW9uIGFjY29yZGlvbihldmVudCkge1xyXG4gIGlmICghZXZlbnQudGFyZ2V0Lm9wZW4pIHJldHVybjtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRldGFpbHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChcclxuICAgICAgZGV0YWlsc1tpXS50YWdOYW1lICE9IFwiREVUQUlMU1wiIHx8XHJcbiAgICAgICFkZXRhaWxzW2ldLmhhc0F0dHJpYnV0ZShcIm9wZW5cIikgfHxcclxuICAgICAgZXZlbnQudGFyZ2V0ID09IGRldGFpbHNbaV1cclxuICAgICkge1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBkZXRhaWxzW2ldLnJlbW92ZUF0dHJpYnV0ZShcIm9wZW5cIik7XHJcbiAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZUFycm93c1RvZ2dsZShldmVudCkge1xyXG4gIGNvbnN0IGFycm93ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcclxuICAgIFwiLmluZm9ybWF0aW9uX19ib3gtYXJyb3dcIlxyXG4gICk7XHJcbiAgYXJyb3cuY2xhc3NMaXN0LnRvZ2dsZShcImluZm9ybWF0aW9uX19ib3gtYXJyb3ctZG93blwiKTtcclxufVxyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLyoqXG4gKiBTU1IgV2luZG93IDQuMC4yXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRGVjZW1iZXIgMTMsIDIwMjFcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc3JjKSB7XG4gIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgIHRhcmdldCA9IHt9O1xuICB9XG4gIGlmIChzcmMgPT09IHZvaWQgMCkge1xuICAgIHNyYyA9IHt9O1xuICB9XG4gIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnKSB0YXJnZXRba2V5XSA9IHNyY1trZXldO2Vsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJiBpc09iamVjdCh0YXJnZXRba2V5XSkgJiYgT2JqZWN0LmtleXMoc3JjW2tleV0pLmxlbmd0aCA+IDApIHtcbiAgICAgIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgIH1cbiAgfSk7XG59XG5jb25zdCBzc3JEb2N1bWVudCA9IHtcbiAgYm9keToge30sXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICBhY3RpdmVFbGVtZW50OiB7XG4gICAgYmx1cigpIHt9LFxuICAgIG5vZGVOYW1lOiAnJ1xuICB9LFxuICBxdWVyeVNlbGVjdG9yKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBxdWVyeVNlbGVjdG9yQWxsKCkge1xuICAgIHJldHVybiBbXTtcbiAgfSxcbiAgZ2V0RWxlbWVudEJ5SWQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGNyZWF0ZUV2ZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbml0RXZlbnQoKSB7fVxuICAgIH07XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgc3R5bGU6IHt9LFxuICAgICAgc2V0QXR0cmlidXRlKCkge30sXG4gICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnROUygpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIGltcG9ydE5vZGUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgaGFzaDogJycsXG4gICAgaG9zdDogJycsXG4gICAgaG9zdG5hbWU6ICcnLFxuICAgIGhyZWY6ICcnLFxuICAgIG9yaWdpbjogJycsXG4gICAgcGF0aG5hbWU6ICcnLFxuICAgIHByb3RvY29sOiAnJyxcbiAgICBzZWFyY2g6ICcnXG4gIH1cbn07XG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gIGV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcbiAgcmV0dXJuIGRvYztcbn1cbmNvbnN0IHNzcldpbmRvdyA9IHtcbiAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICBuYXZpZ2F0b3I6IHtcbiAgICB1c2VyQWdlbnQ6ICcnXG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgaGFzaDogJycsXG4gICAgaG9zdDogJycsXG4gICAgaG9zdG5hbWU6ICcnLFxuICAgIGhyZWY6ICcnLFxuICAgIG9yaWdpbjogJycsXG4gICAgcGF0aG5hbWU6ICcnLFxuICAgIHByb3RvY29sOiAnJyxcbiAgICBzZWFyY2g6ICcnXG4gIH0sXG4gIGhpc3Rvcnk6IHtcbiAgICByZXBsYWNlU3RhdGUoKSB7fSxcbiAgICBwdXNoU3RhdGUoKSB7fSxcbiAgICBnbygpIHt9LFxuICAgIGJhY2soKSB7fVxuICB9LFxuICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICBnZXRDb21wdXRlZFN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRQcm9wZXJ0eVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgSW1hZ2UoKSB7fSxcbiAgRGF0ZSgpIHt9LFxuICBzY3JlZW46IHt9LFxuICBzZXRUaW1lb3V0KCkge30sXG4gIGNsZWFyVGltZW91dCgpIHt9LFxuICBtYXRjaE1lZGlhKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gIH0sXG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKSB7XG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQoaWQpO1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0V2luZG93KCkge1xuICBjb25zdCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xuICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuICByZXR1cm4gd2luO1xufVxuXG5leHBvcnQgeyBnZXRXaW5kb3cgYXMgYSwgZ2V0RG9jdW1lbnQgYXMgZyB9O1xuIiwiaW1wb3J0IHsgYSBhcyBnZXRXaW5kb3csIGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5cbmZ1bmN0aW9uIGRlbGV0ZVByb3BzKG9iaikge1xuICBjb25zdCBvYmplY3QgPSBvYmo7XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBvYmplY3Rba2V5XSA9IG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gbm8gZ2V0dGVyIGZvciBvYmplY3RcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBzb21ldGhpbmcgZ290IHdyb25nXG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIG5leHRUaWNrKGNhbGxiYWNrLCBkZWxheSkge1xuICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgIGRlbGF5ID0gMDtcbiAgfVxuICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xufVxuZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gRGF0ZS5ub3coKTtcbn1cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBzdHlsZTtcbiAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG4gIH1cbiAgaWYgKCFzdHlsZSAmJiBlbC5jdXJyZW50U3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLmN1cnJlbnRTdHlsZTtcbiAgfVxuICBpZiAoIXN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5zdHlsZTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUoZWwsIGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSAneCc7XG4gIH1cbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBtYXRyaXg7XG4gIGxldCBjdXJUcmFuc2Zvcm07XG4gIGxldCB0cmFuc2Zvcm1NYXRyaXg7XG4gIGNvbnN0IGN1clN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgY3VyVHJhbnNmb3JtID0gY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICBpZiAoY3VyVHJhbnNmb3JtLnNwbGl0KCcsJykubGVuZ3RoID4gNikge1xuICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChhID0+IGEucmVwbGFjZSgnLCcsICcuJykpLmpvaW4oJywgJyk7XG4gICAgfVxuICAgIC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIFdlYmtpdCBjaG9rZSB3aGVuICdub25lJyBpcyBwYXNzZWQ7IHBhc3NcbiAgICAvLyBlbXB0eSBzdHJpbmcgaW5zdGVhZCBpbiB0aGlzIGNhc2VcbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBuZXcgd2luZG93LldlYktpdENTU01hdHJpeChjdXJUcmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogY3VyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICdtYXRyaXgoMSwgMCwgMCwgMSwnKTtcbiAgICBtYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXgudG9TdHJpbmcoKS5zcGxpdCgnLCcpO1xuICB9XG4gIGlmIChheGlzID09PSAneCcpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQxO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEyXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs0XSk7XG4gIH1cbiAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDI7XG4gICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTNdKTtcbiAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTtcbiAgfVxuICByZXR1cm4gY3VyVHJhbnNmb3JtIHx8IDA7XG59XG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnO1xufVxuZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT09IDEgfHwgbm9kZS5ub2RlVHlwZSA9PT0gMTEpO1xufVxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICBjb25zdCB0byA9IE9iamVjdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pO1xuICBjb25zdCBub0V4dGVuZCA9IFsnX19wcm90b19fJywgJ2NvbnN0cnVjdG9yJywgJ3Byb3RvdHlwZSddO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IG5leHRTb3VyY2UgPSBpIDwgMCB8fCBhcmd1bWVudHMubGVuZ3RoIDw9IGkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbaV07XG4gICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsICYmICFpc05vZGUobmV4dFNvdXJjZSkpIHtcbiAgICAgIGNvbnN0IGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSkuZmlsdGVyKGtleSA9PiBub0V4dGVuZC5pbmRleE9mKGtleSkgPCAwKTtcbiAgICAgIGZvciAobGV0IG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4ICs9IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cbmZ1bmN0aW9uIHNldENTU1Byb3BlcnR5KGVsLCB2YXJOYW1lLCB2YXJWYWx1ZSkge1xuICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJOYW1lLCB2YXJWYWx1ZSk7XG59XG5mdW5jdGlvbiBhbmltYXRlQ1NTTW9kZVNjcm9sbChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIHRhcmdldFBvc2l0aW9uLFxuICAgIHNpZGVcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBzdGFydFBvc2l0aW9uID0gLXN3aXBlci50cmFuc2xhdGU7XG4gIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICBsZXQgdGltZTtcbiAgY29uc3QgZHVyYXRpb24gPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJ25vbmUnO1xuICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3dpcGVyLmNzc01vZGVGcmFtZUlEKTtcbiAgY29uc3QgZGlyID0gdGFyZ2V0UG9zaXRpb24gPiBzdGFydFBvc2l0aW9uID8gJ25leHQnIDogJ3ByZXYnO1xuICBjb25zdCBpc091dE9mQm91bmQgPSAoY3VycmVudCwgdGFyZ2V0KSA9PiB7XG4gICAgcmV0dXJuIGRpciA9PT0gJ25leHQnICYmIGN1cnJlbnQgPj0gdGFyZ2V0IHx8IGRpciA9PT0gJ3ByZXYnICYmIGN1cnJlbnQgPD0gdGFyZ2V0O1xuICB9O1xuICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xuICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgIH1cbiAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIGR1cmF0aW9uLCAxKSwgMCk7XG4gICAgY29uc3QgZWFzZVByb2dyZXNzID0gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgbGV0IGN1cnJlbnRQb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb24gKyBlYXNlUHJvZ3Jlc3MgKiAodGFyZ2V0UG9zaXRpb24gLSBzdGFydFBvc2l0aW9uKTtcbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBjdXJyZW50UG9zaXRpb24gPSB0YXJnZXRQb3NpdGlvbjtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgIH0pO1xuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJztcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3dpcGVyLmNzc01vZGVGcmFtZUlEKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmNzc01vZGVGcmFtZUlEID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcbiAgYW5pbWF0ZSgpO1xufVxuZnVuY3Rpb24gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKSB7XG4gIHJldHVybiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgfHwgc2xpZGVFbC5zaGFkb3dSb290ICYmIHNsaWRlRWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpIHx8IHNsaWRlRWw7XG59XG5mdW5jdGlvbiBlbGVtZW50Q2hpbGRyZW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgaWYgKHNlbGVjdG9yID09PSB2b2lkIDApIHtcbiAgICBzZWxlY3RvciA9ICcnO1xuICB9XG4gIHJldHVybiBbLi4uZWxlbWVudC5jaGlsZHJlbl0uZmlsdGVyKGVsID0+IGVsLm1hdGNoZXMoc2VsZWN0b3IpKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gW107XG4gIH1cbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uKEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogW2NsYXNzZXNdKSk7XG4gIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRPZmZzZXQoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gIHJldHVybiB7XG4gICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQcmV2QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICBlbCA9IHByZXY7XG4gIH1cbiAgcmV0dXJuIHByZXZFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50TmV4dEFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIGVsID0gbmV4dDtcbiAgfVxuICByZXR1cm4gbmV4dEVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRTdHlsZShlbCwgcHJvcCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xufVxuZnVuY3Rpb24gZWxlbWVudEluZGV4KGVsKSB7XG4gIGxldCBjaGlsZCA9IGVsO1xuICBsZXQgaTtcbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZWxlbWVudFBhcmVudHMoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocGFyZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlbCkgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwoZWwsIGUpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBlbGVtZW50T3V0ZXJTaXplKGVsLCBzaXplLCBpbmNsdWRlTWFyZ2lucykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgcmV0dXJuIGVsW3NpemUgPT09ICd3aWR0aCcgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCddICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tbGVmdCcgOiAnbWFyZ2luLWJvdHRvbScpKTtcbiAgfVxuICByZXR1cm4gZWwub2Zmc2V0V2lkdGg7XG59XG5cbmV4cG9ydCB7IGVsZW1lbnRQYXJlbnRzIGFzIGEsIGVsZW1lbnRPZmZzZXQgYXMgYiwgY3JlYXRlRWxlbWVudCBhcyBjLCBub3cgYXMgZCwgZWxlbWVudENoaWxkcmVuIGFzIGUsIGVsZW1lbnRPdXRlclNpemUgYXMgZiwgZWxlbWVudEluZGV4IGFzIGcsIGdldFRyYW5zbGF0ZSBhcyBoLCBlbGVtZW50VHJhbnNpdGlvbkVuZCBhcyBpLCBpc09iamVjdCBhcyBqLCBnZXRTbGlkZVRyYW5zZm9ybUVsIGFzIGssIGVsZW1lbnRTdHlsZSBhcyBsLCBlbGVtZW50TmV4dEFsbCBhcyBtLCBuZXh0VGljayBhcyBuLCBlbGVtZW50UHJldkFsbCBhcyBvLCBhbmltYXRlQ1NTTW9kZVNjcm9sbCBhcyBwLCBleHRlbmQgYXMgcSwgZGVsZXRlUHJvcHMgYXMgciwgc2V0Q1NTUHJvcGVydHkgYXMgcyB9O1xuIiwiaW1wb3J0IHsgYSBhcyBnZXRXaW5kb3csIGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBhIGFzIGVsZW1lbnRQYXJlbnRzLCBsIGFzIGVsZW1lbnRTdHlsZSwgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIHMgYXMgc2V0Q1NTUHJvcGVydHksIGYgYXMgZWxlbWVudE91dGVyU2l6ZSwgbSBhcyBlbGVtZW50TmV4dEFsbCwgbyBhcyBlbGVtZW50UHJldkFsbCwgaCBhcyBnZXRUcmFuc2xhdGUsIHAgYXMgYW5pbWF0ZUNTU01vZGVTY3JvbGwsIG4gYXMgbmV4dFRpY2ssIGQgYXMgbm93LCBxIGFzIGV4dGVuZCwgZyBhcyBlbGVtZW50SW5kZXgsIGMgYXMgY3JlYXRlRWxlbWVudCwgciBhcyBkZWxldGVQcm9wcyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxubGV0IHN1cHBvcnQ7XG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBzbW9vdGhTY3JvbGw6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gICAgdG91Y2g6ICEhKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U3VwcG9ydCgpIHtcbiAgaWYgKCFzdXBwb3J0KSB7XG4gICAgc3VwcG9ydCA9IGNhbGNTdXBwb3J0KCk7XG4gIH1cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG5cbmxldCBkZXZpY2VDYWNoZWQ7XG5mdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdXNlckFnZW50XG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgY29uc3QgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlXG4gIH07XG4gIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgY29uc3Qgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIGNvbnN0IGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgbGV0IG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7XG5cbiAgLy8gaVBhZE9zIDEzIGZpeFxuICBjb25zdCBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwKSB7XG4gICAgaXBhZCA9IHVhLm1hdGNoKC8oVmVyc2lvbilcXC8oW1xcZC5dKykvKTtcbiAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH1cblxuICAvLyBBbmRyb2lkXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9XG5cbiAgLy8gRXhwb3J0IG9iamVjdFxuICByZXR1cm4gZGV2aWNlO1xufVxuZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcykge1xuICBpZiAob3ZlcnJpZGVzID09PSB2b2lkIDApIHtcbiAgICBvdmVycmlkZXMgPSB7fTtcbiAgfVxuICBpZiAoIWRldmljZUNhY2hlZCkge1xuICAgIGRldmljZUNhY2hlZCA9IGNhbGNEZXZpY2Uob3ZlcnJpZGVzKTtcbiAgfVxuICByZXR1cm4gZGV2aWNlQ2FjaGVkO1xufVxuXG5sZXQgYnJvd3NlcjtcbmZ1bmN0aW9uIGNhbGNCcm93c2VyKCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG5lZWRQZXJzcGVjdGl2ZUZpeCA9IGZhbHNlO1xuICBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDA7XG4gIH1cbiAgaWYgKGlzU2FmYXJpKCkpIHtcbiAgICBjb25zdCB1YSA9IFN0cmluZyh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgaWYgKHVhLmluY2x1ZGVzKCdWZXJzaW9uLycpKSB7XG4gICAgICBjb25zdCBbbWFqb3IsIG1pbm9yXSA9IHVhLnNwbGl0KCdWZXJzaW9uLycpWzFdLnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKS5tYXAobnVtID0+IE51bWJlcihudW0pKTtcbiAgICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCA9IG1ham9yIDwgMTYgfHwgbWFqb3IgPT09IDE2ICYmIG1pbm9yIDwgMjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpc1NhZmFyaTogbmVlZFBlcnNwZWN0aXZlRml4IHx8IGlzU2FmYXJpKCksXG4gICAgbmVlZFBlcnNwZWN0aXZlRml4LFxuICAgIGlzV2ViVmlldzogLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IGNhbGNCcm93c2VyKCk7XG4gIH1cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG5cbmZ1bmN0aW9uIFJlc2l6ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgb2JzZXJ2ZXIgPSBudWxsO1xuICBsZXQgYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgIGVtaXQoJ3Jlc2l6ZScpO1xuICB9O1xuICBjb25zdCBjcmVhdGVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHRcbiAgICAgICAgfSA9IHN3aXBlcjtcbiAgICAgICAgbGV0IG5ld1dpZHRoID0gd2lkdGg7XG4gICAgICAgIGxldCBuZXdIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGNvbnRlbnRCb3hTaXplLFxuICAgICAgICAgICAgY29udGVudFJlY3QsXG4gICAgICAgICAgICB0YXJnZXRcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IHN3aXBlci5lbCkgcmV0dXJuO1xuICAgICAgICAgIG5ld1dpZHRoID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC53aWR0aCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuaW5saW5lU2l6ZTtcbiAgICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG5ld1dpZHRoICE9PSB3aWR0aCB8fCBuZXdIZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICAgIHJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICB9O1xuICBjb25zdCByZW1vdmVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZSk7XG4gICAgfVxuICAgIGlmIChvYnNlcnZlciAmJiBvYnNlcnZlci51bm9ic2VydmUgJiYgc3dpcGVyLmVsKSB7XG4gICAgICBvYnNlcnZlci51bm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICAgIG9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3JlYXRlT2JzZXJ2ZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICByZW1vdmVPYnNlcnZlcigpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gT2JzZXJ2ZXIoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3Qgb2JzZXJ2ZXJzID0gW107XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBhdHRhY2ggPSBmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMobXV0YXRpb25zID0+IHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fKSByZXR1cm47XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9ic2VydmVyVXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgYXR0cmlidXRlczogdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5hdHRyaWJ1dGVzLFxuICAgICAgY2hpbGRMaXN0OiB0eXBlb2Ygb3B0aW9ucy5jaGlsZExpc3QgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hpbGRMaXN0LFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHlwZW9mIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGFyYWN0ZXJEYXRhXG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gZWxlbWVudFBhcmVudHMoc3dpcGVyLmhvc3RFbCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPYnNlcnZlIGNvbnRhaW5lclxuICAgIGF0dGFjaChzd2lwZXIuaG9zdEVsLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTtcblxuICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgIGF0dGFjaChzd2lwZXIud3JhcHBlckVsLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIG9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMuc3BsaWNlKDAsIG9ic2VydmVycy5sZW5ndGgpO1xuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0pO1xuICBvbignaW5pdCcsIGluaXQpO1xuICBvbignZGVzdHJveScsIGRlc3Ryb3kpO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG52YXIgZXZlbnRzRW1pdHRlciA9IHtcbiAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcbiAgb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZkFueShoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0FueUxpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBlbWl0KCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGxldCBldmVudHM7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIFtldmVudCwgLi4uZGF0YV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgd2lkdGg7XG4gIGxldCBoZWlnaHQ7XG4gIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMud2lkdGggIT09IG51bGwpIHtcbiAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSBlbC5jbGllbnRXaWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9IGVsLmNsaWVudEhlaWdodDtcbiAgfVxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU3VidHJhY3QgcGFkZGluZ3NcbiAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctdG9wJykgfHwgMCwgMTApIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1ib3R0b20nKSB8fCAwLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4od2lkdGgpKSB3aWR0aCA9IDA7XG4gIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgc2l6ZTogc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gd2lkdGggOiBoZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uTGFiZWwocHJvcGVydHkpIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHJldHVybiB7XG4gICAgICAnd2lkdGgnOiAnaGVpZ2h0JyxcbiAgICAgICdtYXJnaW4tdG9wJzogJ21hcmdpbi1sZWZ0JyxcbiAgICAgICdtYXJnaW4tYm90dG9tICc6ICdtYXJnaW4tcmlnaHQnLFxuICAgICAgJ21hcmdpbi1sZWZ0JzogJ21hcmdpbi10b3AnLFxuICAgICAgJ21hcmdpbi1yaWdodCc6ICdtYXJnaW4tYm90dG9tJyxcbiAgICAgICdwYWRkaW5nLWxlZnQnOiAncGFkZGluZy10b3AnLFxuICAgICAgJ3BhZGRpbmctcmlnaHQnOiAncGFkZGluZy1ib3R0b20nLFxuICAgICAgJ21hcmdpblJpZ2h0JzogJ21hcmdpbkJvdHRvbSdcbiAgICB9W3Byb3BlcnR5XTtcbiAgfVxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKG5vZGUsIGxhYmVsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS5nZXRQcm9wZXJ0eVZhbHVlKGdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBzbGlkZXNFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICBsZXQgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBsZXQgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjtcblxuICAvLyByZXNldCBtYXJnaW5zXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGlmIChydGwpIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gJyc7XG4gICAgfVxuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luQm90dG9tID0gJyc7XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnJztcbiAgfSk7XG5cbiAgLy8gcmVzZXQgY3NzTW9kZSBvZmZzZXRzXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgJycpO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsICcnKTtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHN3aXBlci5ncmlkO1xuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlc0xlbmd0aCk7XG4gIH1cblxuICAvLyBDYWxjIHNsaWRlc1xuICBsZXQgc2xpZGVTaXplO1xuICBjb25zdCBzaG91bGRSZXNldFNsaWRlU2l6ZSA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLmJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKHBhcmFtcy5icmVha3BvaW50cykuZmlsdGVyKGtleSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBwYXJhbXMuYnJlYWtwb2ludHNba2V5XS5zbGlkZXNQZXJWaWV3ICE9PSAndW5kZWZpbmVkJztcbiAgfSkubGVuZ3RoID4gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgbGV0IHNsaWRlO1xuICAgIGlmIChzbGlkZXNbaV0pIHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmdyaWQudXBkYXRlU2xpZGUoaSwgc2xpZGUsIHNsaWRlc0xlbmd0aCwgZ2V0RGlyZWN0aW9uTGFiZWwpO1xuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldICYmIGVsZW1lbnRTdHlsZShzbGlkZSwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIGlmIChzaG91bGRSZXNldFNsaWRlU2l6ZSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYGA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZVN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoc2xpZGUpO1xuICAgICAgY29uc3QgY3VycmVudFRyYW5zZm9ybSA9IHNsaWRlLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgIGNvbnN0IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnd2lkdGgnLCB0cnVlKSA6IGVsZW1lbnRPdXRlclNpemUoc2xpZGUsICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zdCB3aWR0aCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICd3aWR0aCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLWxlZnQnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tbGVmdCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5SaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgY29uc3QgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xpZW50V2lkdGgsXG4gICAgICAgICAgICBvZmZzZXRXaWR0aFxuICAgICAgICAgIH0gPSBzbGlkZTtcbiAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0ICsgKG9mZnNldFdpZHRoIC0gY2xpZW50V2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c2xpZGVTaXplfXB4YDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICB9XG4gICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIHByZXZTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgaW5kZXggKz0gMTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgd3JhcHBlckVsLnN0eWxlLndpZHRoID0gYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgc3BhY2VCZXR3ZWVufXB4YDtcbiAgfVxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgd3JhcHBlckVsLnN0eWxlW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQudXBkYXRlV3JhcHBlclNpemUoc2xpZGVTaXplLCBzbmFwR3JpZCwgZ2V0RGlyZWN0aW9uTGFiZWwpO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcbiAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFwR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIGlmIChzbmFwR3JpZFtpXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7XG4gICAgICAgIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICBpZiAoTWF0aC5mbG9vcihzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSAtIE1hdGguZmxvb3Ioc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0pID4gMSkge1xuICAgICAgc25hcEdyaWQucHVzaChzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcCkge1xuICAgIGNvbnN0IHNpemUgPSBzbGlkZXNTaXplc0dyaWRbMF0gKyBzcGFjZUJldHdlZW47XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgIGNvbnN0IGdyb3VwcyA9IE1hdGguY2VpbCgoc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXIpIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgIGNvbnN0IGdyb3VwU2l6ZSA9IHNpemUgKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwczsgaSArPSAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBncm91cFNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0FmdGVyOyBpICs9IDEpIHtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIHNpemUpO1xuICAgICAgfVxuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSArIHNpemUpO1xuICAgICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNpemU7XG4gICAgfVxuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuICBpZiAoc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgY29uc3Qga2V5ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHJ0bCA/ICdtYXJnaW5MZWZ0JyA6IGdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUgfHwgcGFyYW1zLmxvb3ApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZUVsLnN0eWxlW2tleV0gPSBgJHtzcGFjZUJldHdlZW59cHhgO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAoc3BhY2VCZXR3ZWVuIHx8IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gc3BhY2VCZXR3ZWVuO1xuICAgIGNvbnN0IG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTtcbiAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChzbmFwID0+IHtcbiAgICAgIGlmIChzbmFwIDw9IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgaWYgKGFsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICBjb25zdCBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsIGAke3N3aXBlci5zaXplIC8gMiAtIHNsaWRlc1NpemVzR3JpZFtzbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gLyAyfXB4YCk7XG4gICAgY29uc3QgYWRkVG9TbmFwR3JpZCA9IC1zd2lwZXIuc25hcEdyaWRbMF07XG4gICAgY29uc3QgYWRkVG9TbGlkZXNHcmlkID0gLXN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIHN3aXBlci5zbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbmFwR3JpZCk7XG4gICAgc3dpcGVyLnNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbGlkZXNHcmlkKTtcbiAgfVxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmICghaXNWaXJ0dWFsICYmICFwYXJhbXMuY3NzTW9kZSAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnZmFkZScpKSB7XG4gICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7XG4gICAgY29uc3QgaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQgPSBzd2lwZXIuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIGlmIChzbGlkZXNMZW5ndGggPD0gcGFyYW1zLm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzKSB7XG4gICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICBjb25zdCBnZXRTbGlkZUJ5SW5kZXggPSBpbmRleCA9PiB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpXTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbaW5kZXhdO1xuICB9O1xuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAoc3dpcGVyLnZpc2libGVTbGlkZXMgfHwgW10pLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTtcbiAgfVxuXG4gIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3SGVpZ2h0ID0gaGVpZ2h0ID4gbmV3SGVpZ2h0ID8gaGVpZ2h0IDogbmV3SGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSBIZWlnaHRcbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgbWludXNPZmZzZXQgPSBzd2lwZXIuaXNFbGVtZW50ID8gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRMZWZ0IDogc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRUb3AgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3ApIC0gbWludXNPZmZzZXQgLSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlO1xuXG4gIC8vIFZpc2libGUgU2xpZGVzXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICB9KTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG4gIGxldCBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXIuc2l6ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGxldCBzbGlkZU9mZnNldCA9IHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgIGlmIChwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlT2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyIC0gc25hcEdyaWRbMF0gKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGVPZmZzZXQpO1xuICAgIGNvbnN0IHNsaWRlQWZ0ZXIgPSBzbGlkZUJlZm9yZSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgY29uc3QgaXNWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8IHN3aXBlci5zaXplIC0gMSB8fCBzbGlkZUFmdGVyID4gMSAmJiBzbGlkZUFmdGVyIDw9IHN3aXBlci5zaXplIHx8IHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZTtcbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgc2xpZGVzW2ldLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICB9XG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gICAgc2xpZGUub3JpZ2luYWxQcm9ncmVzcyA9IHJ0bCA/IC1vcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgOiBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3M7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHRyYW5zbGF0ZSA9IHN3aXBlciAmJiBzd2lwZXIudHJhbnNsYXRlICYmIHN3aXBlci50cmFuc2xhdGUgKiBtdWx0aXBsaWVyIHx8IDA7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGxldCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQsXG4gICAgcHJvZ3Jlc3NMb29wXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIGNvbnN0IGlzQmVnaW5uaW5nUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgPCAxO1xuICAgIGNvbnN0IGlzRW5kUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgPCAxO1xuICAgIGlzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmdSb3VuZGVkIHx8IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBpc0VuZFJvdW5kZWQgfHwgcHJvZ3Jlc3MgPj0gMTtcbiAgICBpZiAoaXNCZWdpbm5pbmdSb3VuZGVkKSBwcm9ncmVzcyA9IDA7XG4gICAgaWYgKGlzRW5kUm91bmRlZCkgcHJvZ3Jlc3MgPSAxO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKDApO1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbZmlyc3RTbGlkZUluZGV4XTtcbiAgICBjb25zdCBsYXN0U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgdHJhbnNsYXRlTWF4ID0gc3dpcGVyLnNsaWRlc0dyaWRbc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgdHJhbnNsYXRlQWJzID0gTWF0aC5hYnModHJhbnNsYXRlKTtcbiAgICBpZiAodHJhbnNsYXRlQWJzID49IGZpcnN0U2xpZGVUcmFuc2xhdGUpIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgLSBmaXJzdFNsaWRlVHJhbnNsYXRlKSAvIHRyYW5zbGF0ZU1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvZ3Jlc3NMb29wID0gKHRyYW5zbGF0ZUFicyArIHRyYW5zbGF0ZU1heCAtIGxhc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfVxuICAgIGlmIChwcm9ncmVzc0xvb3AgPiAxKSBwcm9ncmVzc0xvb3AgLT0gMTtcbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHByb2dyZXNzLFxuICAgIHByb2dyZXNzTG9vcCxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZFxuICB9KTtcbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkgc3dpcGVyLnVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG4gIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoRW5kIHRvRWRnZScpO1xuICB9XG4gIGlmICh3YXNCZWdpbm5pbmcgJiYgIWlzQmVnaW5uaW5nIHx8IHdhc0VuZCAmJiAhaXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IGdldEZpbHRlcmVkU2xpZGUgPSBzZWxlY3RvciA9PiB7XG4gICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSR7c2VsZWN0b3J9LCBzd2lwZXItc2xpZGUke3NlbGVjdG9yfWApWzBdO1xuICB9O1xuICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfSk7XG4gIGxldCBhY3RpdmVTbGlkZTtcbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgbGV0IHNsaWRlSW5kZXggPSBhY3RpdmVJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICAgIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzbGlkZUluZGV4O1xuICAgICAgaWYgKHNsaWRlSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkgc2xpZGVJbmRleCAtPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoO1xuICAgICAgYWN0aXZlU2xpZGUgPSBnZXRGaWx0ZXJlZFNsaWRlKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlSW5kZXh9XCJdYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHthY3RpdmVJbmRleH1cIl1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdO1xuICB9XG4gIGlmIChhY3RpdmVTbGlkZSkge1xuICAgIC8vIEFjdGl2ZSBjbGFzc2VzXG4gICAgYWN0aXZlU2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG5cbiAgICAvLyBOZXh0IFNsaWRlXG4gICAgbGV0IG5leHRTbGlkZSA9IGVsZW1lbnROZXh0QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICBpZiAocGFyYW1zLmxvb3AgJiYgIW5leHRTbGlkZSkge1xuICAgICAgbmV4dFNsaWRlID0gc2xpZGVzWzBdO1xuICAgIH1cbiAgICBpZiAobmV4dFNsaWRlKSB7XG4gICAgICBuZXh0U2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgIH1cbiAgICAvLyBQcmV2IFNsaWRlXG4gICAgbGV0IHByZXZTbGlkZSA9IGVsZW1lbnRQcmV2QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICBpZiAocGFyYW1zLmxvb3AgJiYgIXByZXZTbGlkZSA9PT0gMCkge1xuICAgICAgcHJldlNsaWRlID0gc2xpZGVzW3NsaWRlcy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgaWYgKHByZXZTbGlkZSkge1xuICAgICAgcHJldlNsaWRlLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7XG59XG5cbmNvbnN0IHByb2Nlc3NMYXp5UHJlbG9hZGVyID0gKHN3aXBlciwgaW1hZ2VFbCkgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSAoKSA9PiBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGNvbnN0IHNsaWRlRWwgPSBpbWFnZUVsLmNsb3Nlc3Qoc2xpZGVTZWxlY3RvcigpKTtcbiAgaWYgKHNsaWRlRWwpIHtcbiAgICBsZXQgbGF6eUVsID0gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICBpZiAoIWxhenlFbCAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBpZiAoc2xpZGVFbC5zaGFkb3dSb290KSB7XG4gICAgICAgIGxhenlFbCA9IHNsaWRlRWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluaXQgbGF0ZXJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGVFbC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICAgICAgICBpZiAobGF6eUVsKSBsYXp5RWwucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICB9XG59O1xuY29uc3QgdW5sYXp5ID0gKHN3aXBlciwgaW5kZXgpID0+IHtcbiAgaWYgKCFzd2lwZXIuc2xpZGVzW2luZGV4XSkgcmV0dXJuO1xuICBjb25zdCBpbWFnZUVsID0gc3dpcGVyLnNsaWRlc1tpbmRleF0ucXVlcnlTZWxlY3RvcignW2xvYWRpbmc9XCJsYXp5XCJdJyk7XG4gIGlmIChpbWFnZUVsKSBpbWFnZUVsLnJlbW92ZUF0dHJpYnV0ZSgnbG9hZGluZycpO1xufTtcbmNvbnN0IHByZWxvYWQgPSBzd2lwZXIgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gIGxldCBhbW91bnQgPSBzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkUHJldk5leHQ7XG4gIGNvbnN0IGxlbiA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBpZiAoIWxlbiB8fCAhYW1vdW50IHx8IGFtb3VudCA8IDApIHJldHVybjtcbiAgYW1vdW50ID0gTWF0aC5taW4oYW1vdW50LCBsZW4pO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpO1xuICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgaWYgKHN3aXBlci5wYXJhbXMuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQucm93cyA+IDEpIHtcbiAgICBjb25zdCBhY3RpdmVDb2x1bW4gPSBhY3RpdmVJbmRleDtcbiAgICBjb25zdCBwcmVsb2FkQ29sdW1ucyA9IFthY3RpdmVDb2x1bW4gLSBhbW91bnRdO1xuICAgIHByZWxvYWRDb2x1bW5zLnB1c2goLi4uQXJyYXkuZnJvbSh7XG4gICAgICBsZW5ndGg6IGFtb3VudFxuICAgIH0pLm1hcCgoXywgaSkgPT4ge1xuICAgICAgcmV0dXJuIGFjdGl2ZUNvbHVtbiArIHNsaWRlc1BlclZpZXcgKyBpO1xuICAgIH0pKTtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIGkpID0+IHtcbiAgICAgIGlmIChwcmVsb2FkQ29sdW1ucy5pbmNsdWRlcyhzbGlkZUVsLmNvbHVtbikpIHVubGF6eShzd2lwZXIsIGkpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzbGlkZUluZGV4TGFzdEluVmlldyA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldyAtIDE7XG4gIGlmIChzd2lwZXIucGFyYW1zLnJld2luZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSBhbW91bnQ7IGkgPD0gc2xpZGVJbmRleExhc3RJblZpZXcgKyBhbW91bnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgcmVhbEluZGV4ID0gKGkgJSBsZW4gKyBsZW4pICUgbGVuO1xuICAgICAgaWYgKHJlYWxJbmRleCA8IGFjdGl2ZUluZGV4IHx8IHJlYWxJbmRleCA+IHNsaWRlSW5kZXhMYXN0SW5WaWV3KSB1bmxhenkoc3dpcGVyLCByZWFsSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBhbW91bnQsIDApOyBpIDw9IE1hdGgubWluKHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50LCBsZW4gLSAxKTsgaSArPSAxKSB7XG4gICAgICBpZiAoaSAhPT0gYWN0aXZlSW5kZXggJiYgKGkgPiBzbGlkZUluZGV4TGFzdEluVmlldyB8fCBpIDwgYWN0aXZlSW5kZXgpKSB7XG4gICAgICAgIHVubGF6eShzd2lwZXIsIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgY29uc3Qge1xuICAgIHNsaWRlc0dyaWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGxldCBhY3RpdmVJbmRleDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgIH1cbiAgfVxuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgfVxuICByZXR1cm4gYWN0aXZlSW5kZXg7XG59XG5mdW5jdGlvbiB1cGRhdGVBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBjb25zdCB7XG4gICAgc25hcEdyaWQsXG4gICAgcGFyYW1zLFxuICAgIGFjdGl2ZUluZGV4OiBwcmV2aW91c0luZGV4LFxuICAgIHJlYWxJbmRleDogcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDtcbiAgbGV0IHNuYXBJbmRleDtcbiAgY29uc3QgZ2V0VmlydHVhbFJlYWxJbmRleCA9IGFJbmRleCA9PiB7XG4gICAgbGV0IHJlYWxJbmRleCA9IGFJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICBpZiAocmVhbEluZGV4IDwgMCkge1xuICAgICAgcmVhbEluZGV4ID0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHJlYWxJbmRleDtcbiAgICB9XG4gICAgaWYgKHJlYWxJbmRleCA+PSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICByZWFsSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWxJbmRleDtcbiAgfTtcbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY3RpdmVJbmRleCA9IGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKTtcbiAgfVxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIucmVhbEluZGV4ID0gZ2V0VmlydHVhbFJlYWxJbmRleChhY3RpdmVJbmRleCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBsZXQgcmVhbEluZGV4O1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBwYXJhbXMubG9vcCkge1xuICAgIHJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICB9IGVsc2UgaWYgKHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdKSB7XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLnNsaWRlc1thY3RpdmVJbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcmV2aW91c1NuYXBJbmRleCxcbiAgICBzbmFwSW5kZXgsXG4gICAgcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSk7XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlbCwgcGF0aCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBsZXQgc2xpZGUgPSBlbC5jbG9zZXN0KGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBpZiAoIXNsaWRlICYmIHN3aXBlci5pc0VsZW1lbnQgJiYgcGF0aCAmJiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aC5pbmNsdWRlcyhlbCkpIHtcbiAgICBbLi4ucGF0aC5zbGljZShwYXRoLmluZGV4T2YoZWwpICsgMSwgcGF0aC5sZW5ndGgpXS5mb3JFYWNoKHBhdGhFbCA9PiB7XG4gICAgICBpZiAoIXNsaWRlICYmIHBhdGhFbC5tYXRjaGVzICYmIHBhdGhFbC5tYXRjaGVzKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKSB7XG4gICAgICAgIHNsaWRlID0gcGF0aEVsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGxldCBzbGlkZUluZGV4O1xuICBpZiAoc2xpZGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkge1xuICAgICAgICBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludChzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59XG5cbnZhciB1cGRhdGUgPSB7XG4gIHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlcyxcbiAgdXBkYXRlQXV0b0hlaWdodCxcbiAgdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5JztcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHRyYW5zbGF0ZSxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfVxuICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSh3cmFwcGVyRWwsIGF4aXMpO1xuICBjdXJyZW50VHJhbnNsYXRlICs9IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWwsXG4gICAgcHJvZ3Jlc3NcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGNvbnN0IHogPSAwO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgeCAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgLT0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICAgIH1cbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAke3p9cHgpYDtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn1cblxuZnVuY3Rpb24gbWF4VHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IDA7XG4gIH1cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIHRyYW5zbGF0ZSA9IHtcbiAgZ2V0VHJhbnNsYXRlOiBnZXRTd2lwZXJUcmFuc2xhdGUsXG4gIHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGUsXG4gIHRyYW5zbGF0ZVRvXG59O1xuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGR1cmF0aW9uID09PSAwID8gYDBtc2AgOiAnJztcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW1pdChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcFxuICB9ID0gX3JlZjtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LFxuICAgIHByZXZpb3VzSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGRpciA9IGRpcmVjdGlvbjtcbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG4gIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApO1xuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUmVzZXRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVByZXZUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnU3RhcnQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdFbmQnXG4gIH0pO1xufVxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kXG59O1xuXG5mdW5jdGlvbiBzbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgaW5pdGlhbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleCxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIHx8ICFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAocnRsID8gdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGVJbmRleCAhPT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgbGV0IGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwgJiYgIXN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID4gMCkge1xuICAgICAgICBzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCA9IHRydWU7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiB0LFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0xvb3AoaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBuZXdJbmRleCA9IGluZGV4O1xuICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0luZGV4ID0gbmV3SW5kZXggKyBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEobmV3SW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZU5leHQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGVuYWJsZWQsXG4gICAgcGFyYW1zLFxuICAgIGFuaW1hdGluZ1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybiBzd2lwZXI7XG4gIGxldCBwZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICBwZXJHcm91cCA9IE1hdGgubWF4KHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygnY3VycmVudCcsIHRydWUpLCAxKTtcbiAgfVxuICBjb25zdCBpbmNyZW1lbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBlckdyb3VwO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmICFpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246ICduZXh0J1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci53cmFwcGVyRWwuY2xpZW50TGVmdDtcbiAgICBpZiAoc3dpcGVyLmFjdGl2ZUluZGV4ID09PSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVQcmV2KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZCxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmICFpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246ICdwcmV2J1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci53cmFwcGVyRWwuY2xpZW50TGVmdDtcbiAgfVxuICBjb25zdCB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICBpZiAodmFsIDwgMCkgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IG5vcm1hbGl6ZSh0cmFuc2xhdGUpO1xuICBjb25zdCBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAodmFsID0+IG5vcm1hbGl6ZSh2YWwpKTtcbiAgbGV0IHByZXZTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSkgLSAxXTtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBsZXQgcHJldlNuYXBJbmRleDtcbiAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IHNuYXApIHtcbiAgICAgICAgLy8gcHJldlNuYXAgPSBzbmFwO1xuICAgICAgICBwcmV2U25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgcHJldlNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHByZXZTbmFwID0gc25hcEdyaWRbcHJldlNuYXBJbmRleCA+IDAgPyBwcmV2U25hcEluZGV4IC0gMSA6IHByZXZTbmFwSW5kZXhdO1xuICAgIH1cbiAgfVxuICBsZXQgcHJldkluZGV4ID0gMDtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgICBwcmV2SW5kZXggPSBwcmV2SW5kZXggLSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ3ByZXZpb3VzJywgdHJ1ZSkgKyAxO1xuICAgICAgcHJldkluZGV4ID0gTWF0aC5tYXgocHJldkluZGV4LCAwKTtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgY29uc3QgbGFzdEluZGV4ID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKGxhc3RJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9IGVsc2UgaWYgKHBhcmFtcy5sb29wICYmIHN3aXBlci5hY3RpdmVJbmRleCA9PT0gMCAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVSZXNldChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3Qoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIHRocmVzaG9sZCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICB0aHJlc2hvbGQgPSAwLjU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgY29uc3Qgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZSA+PSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XSkge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuICAgIGlmICh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCA+IChuZXh0U25hcCAtIGN1cnJlbnRTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggKz0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIGJlZm9yZSB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBiZWZvcmUgaXQuXG4gICAgY29uc3QgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBpZiAodHJhbnNsYXRlIC0gcHJldlNuYXAgPD0gKGN1cnJlbnRTbmFwIC0gcHJldlNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCAtPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfVxuICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgbGV0IHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIGxldCByZWFsSW5kZXg7XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuY2xpY2tlZFNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgJHtzbGlkZVNlbGVjdG9yfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApWzBdKTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufVxuXG52YXIgc2xpZGUgPSB7XG4gIHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wLFxuICBzbGlkZU5leHQsXG4gIHNsaWRlUHJldixcbiAgc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGxvb3BDcmVhdGUoc2xpZGVSZWFsSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIHNsaWRlcy5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICB9KTtcbiAgc3dpcGVyLmxvb3BGaXgoe1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIGRpcmVjdGlvbjogcGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gdW5kZWZpbmVkIDogJ25leHQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb29wRml4KF90ZW1wKSB7XG4gIGxldCB7XG4gICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgc2xpZGVUbyA9IHRydWUsXG4gICAgZGlyZWN0aW9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgIGJ5Q29udHJvbGxlcixcbiAgICBieU1vdXNld2hlZWxcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIHNsaWRlc0VsLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgIGlmIChzbGlkZVRvKSB7XG4gICAgICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIuc25hcEluZGV4ID09PSAwKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyVmlldykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc3dpcGVyLnNuYXBJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIuc25hcEluZGV4ID09PSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoIC0gMSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gICAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICBsZXQgbG9vcGVkU2xpZGVzID0gcGFyYW1zLmxvb3BlZFNsaWRlcyB8fCBzbGlkZXNQZXJWaWV3O1xuICBpZiAobG9vcGVkU2xpZGVzICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwICE9PSAwKSB7XG4gICAgbG9vcGVkU2xpZGVzICs9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAtIGxvb3BlZFNsaWRlcyAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgfVxuICBzd2lwZXIubG9vcGVkU2xpZGVzID0gbG9vcGVkU2xpZGVzO1xuICBjb25zdCBwcmVwZW5kU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBjb25zdCBhcHBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGxldCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgIGFjdGl2ZVNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChzd2lwZXIuc2xpZGVzLmZpbHRlcihlbCA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpKVswXSk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlSW5kZXggPSBhY3RpdmVTbGlkZUluZGV4O1xuICB9XG4gIGNvbnN0IGlzTmV4dCA9IGRpcmVjdGlvbiA9PT0gJ25leHQnIHx8ICFkaXJlY3Rpb247XG4gIGNvbnN0IGlzUHJldiA9IGRpcmVjdGlvbiA9PT0gJ3ByZXYnIHx8ICFkaXJlY3Rpb247XG4gIGxldCBzbGlkZXNQcmVwZW5kZWQgPSAwO1xuICBsZXQgc2xpZGVzQXBwZW5kZWQgPSAwO1xuICAvLyBwcmVwZW5kIGxhc3Qgc2xpZGVzIGJlZm9yZSBzdGFydFxuICBpZiAoYWN0aXZlU2xpZGVJbmRleCA8IGxvb3BlZFNsaWRlcykge1xuICAgIHNsaWRlc1ByZXBlbmRlZCA9IE1hdGgubWF4KGxvb3BlZFNsaWRlcyAtIGFjdGl2ZVNsaWRlSW5kZXgsIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wZWRTbGlkZXMgLSBhY3RpdmVTbGlkZUluZGV4OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIHNsaWRlcy5sZW5ndGgpICogc2xpZGVzLmxlbmd0aDtcbiAgICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goc2xpZGVzLmxlbmd0aCAtIGluZGV4IC0gMSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGl2ZVNsaWRlSW5kZXggLyogKyBzbGlkZXNQZXJWaWV3ICovID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMgKiAyKSB7XG4gICAgc2xpZGVzQXBwZW5kZWQgPSBNYXRoLm1heChhY3RpdmVTbGlkZUluZGV4IC0gKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzICogMiksIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNBcHBlbmRlZDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGkgLSBNYXRoLmZsb29yKGkgLyBzbGlkZXMubGVuZ3RoKSAqIHNsaWRlcy5sZW5ndGg7XG4gICAgICBhcHBlbmRTbGlkZXNJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNQcmV2KSB7XG4gICAgcHJlcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzd2lwZXIuc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHN3aXBlci5zbGlkZXNbaW5kZXhdKTtcbiAgICAgIHN3aXBlci5zbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGlzTmV4dCkge1xuICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzd2lwZXIuc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc3dpcGVyLnNsaWRlc1tpbmRleF0pO1xuICAgICAgc3dpcGVyLnNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICB9XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgfVxuICBpZiAoc2xpZGVUbykge1xuICAgIGlmIChwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzUHJldikge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZVJlYWxJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdO1xuICAgICAgICBjb25zdCBuZXdTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4ICsgc2xpZGVzUHJlcGVuZGVkXTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ld1NsaWRlVHJhbnNsYXRlIC0gY3VycmVudFNsaWRlVHJhbnNsYXRlO1xuICAgICAgICBpZiAoYnlNb3VzZXdoZWVsKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShzd2lwZXIudHJhbnNsYXRlIC0gZGlmZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggKyBzbGlkZXNQcmVwZW5kZWQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc3RhcnRYJyA6ICdzdGFydFknXSArPSBkaWZmO1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc2xpZGVSZWFsSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gc2xpZGVzQXBwZW5kZWQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc3RhcnRYJyA6ICdzdGFydFknXSArPSBkaWZmO1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChzbGlkZVJlYWxJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIuY29udHJvbGxlciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sICYmICFieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBsb29wUGFyYW1zID0ge1xuICAgICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGUsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgICAgYnlDb250cm9sbGVyOiB0cnVlXG4gICAgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5mb3JFYWNoKGMgPT4ge1xuICAgICAgICBpZiAoIWMuZGVzdHJveWVkICYmIGMucGFyYW1zLmxvb3ApIGMubG9vcEZpeCh7XG4gICAgICAgICAgLi4ubG9vcFBhcmFtcyxcbiAgICAgICAgICBzbGlkZVRvOiBjLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIHN3aXBlci5jb25zdHJ1Y3RvciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmxvb3BGaXgoe1xuICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICBzbGlkZVRvOiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59XG5cbmZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghcGFyYW1zLmxvb3AgfHwgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBjb25zdCBuZXdTbGlkZXNPcmRlciA9IFtdO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB0eXBlb2Ygc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA6IHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleDtcbiAgICBuZXdTbGlkZXNPcmRlcltpbmRleF0gPSBzbGlkZUVsO1xuICB9KTtcbiAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICB9KTtcbiAgbmV3U2xpZGVzT3JkZXIuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gIH0pO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIHN3aXBlci5zbGlkZVRvKHN3aXBlci5yZWFsSW5kZXgsIDApO1xufVxuXG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3lcbn07XG5cbmZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGNvbnN0IGVsID0gc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBzd2lwZXIuZWwgOiBzd2lwZXIud3JhcHBlckVsO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIH1cbiAgc3dpcGVyW3N3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gJ2VsJyA6ICd3cmFwcGVyRWwnXS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgZ3JhYkN1cnNvciA9IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yXG59O1xuXG4vLyBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0NTIwNTU0L2N1c3RvbS1lbGVtZW50LWdldHJvb3Rub2RlLWNsb3Nlc3QtZnVuY3Rpb24tY3Jvc3NpbmctbXVsdGlwbGUtcGFyZW50LXNoYWRvd2RcbmZ1bmN0aW9uIGNsb3Nlc3RFbGVtZW50KHNlbGVjdG9yLCBiYXNlKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBfX2Nsb3Nlc3RGcm9tKGVsKSB7XG4gICAgaWYgKCFlbCB8fCBlbCA9PT0gZ2V0RG9jdW1lbnQoKSB8fCBlbCA9PT0gZ2V0V2luZG93KCkpIHJldHVybiBudWxsO1xuICAgIGlmIChlbC5hc3NpZ25lZFNsb3QpIGVsID0gZWwuYXNzaWduZWRTbG90O1xuICAgIGNvbnN0IGZvdW5kID0gZWwuY2xvc2VzdChzZWxlY3Rvcik7XG4gICAgaWYgKCFmb3VuZCAmJiAhZWwuZ2V0Um9vdE5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZm91bmQgfHwgX19jbG9zZXN0RnJvbShlbC5nZXRSb290Tm9kZSgpLmhvc3QpO1xuICB9XG4gIHJldHVybiBfX2Nsb3Nlc3RGcm9tKGJhc2UpO1xufVxuZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBkYXRhLmV2Q2FjaGUucHVzaChldmVudCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGV2ZW50LnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgfVxuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBsZXQgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgaWYgKHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ3dyYXBwZXInKSB7XG4gICAgaWYgKCFzd2lwZXIud3JhcHBlckVsLmNvbnRhaW5zKHRhcmdldEVsKSkgcmV0dXJuO1xuICB9XG4gIGlmICgnd2hpY2gnIGluIGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICBpZiAoJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiA+IDApIHJldHVybjtcbiAgaWYgKGRhdGEuaXNUb3VjaGVkICYmIGRhdGEuaXNNb3ZlZCkgcmV0dXJuO1xuXG4gIC8vIGNoYW5nZSB0YXJnZXQgZWwgZm9yIHNoYWRvdyByb290IGNvbXBvbmVudFxuICBjb25zdCBzd2lwaW5nQ2xhc3NIYXNWYWx1ZSA9ICEhcGFyYW1zLm5vU3dpcGluZ0NsYXNzICYmIHBhcmFtcy5ub1N3aXBpbmdDbGFzcyAhPT0gJyc7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCBldmVudFBhdGggPSBldmVudC5jb21wb3NlZFBhdGggPyBldmVudC5jb21wb3NlZFBhdGgoKSA6IGV2ZW50LnBhdGg7XG4gIGlmIChzd2lwaW5nQ2xhc3NIYXNWYWx1ZSAmJiBlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290ICYmIGV2ZW50UGF0aCkge1xuICAgIHRhcmdldEVsID0gZXZlbnRQYXRoWzBdO1xuICB9XG4gIGNvbnN0IG5vU3dpcGluZ1NlbGVjdG9yID0gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogYC4ke3BhcmFtcy5ub1N3aXBpbmdDbGFzc31gO1xuICBjb25zdCBpc1RhcmdldFNoYWRvdyA9ICEhKGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QpO1xuXG4gIC8vIHVzZSBjbG9zZXN0RWxlbWVudCBmb3Igc2hhZG93IHJvb3QgZWxlbWVudCB0byBnZXQgdGhlIGFjdHVhbCBjbG9zZXN0IGZvciBuZXN0ZWQgc2hhZG93IHJvb3QgZWxlbWVudFxuICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAoaXNUYXJnZXRTaGFkb3cgPyBjbG9zZXN0RWxlbWVudChub1N3aXBpbmdTZWxlY3RvciwgdGFyZ2V0RWwpIDogdGFyZ2V0RWwuY2xvc2VzdChub1N3aXBpbmdTZWxlY3RvcikpKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnN3aXBlSGFuZGxlcikge1xuICAgIGlmICghdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKSkgcmV0dXJuO1xuICB9XG4gIHRvdWNoZXMuY3VycmVudFggPSBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS5wYWdlWTtcbiAgY29uc3Qgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgY29uc3Qgc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcblxuICAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICBjb25zdCBlZGdlU3dpcGVEZXRlY3Rpb24gPSBwYXJhbXMuZWRnZVN3aXBlRGV0ZWN0aW9uIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVEZXRlY3Rpb247XG4gIGNvbnN0IGVkZ2VTd2lwZVRocmVzaG9sZCA9IHBhcmFtcy5lZGdlU3dpcGVUaHJlc2hvbGQgfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZVRocmVzaG9sZDtcbiAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiAmJiAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LmlubmVyV2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiA9PT0gJ3ByZXZlbnQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIE9iamVjdC5hc3NpZ24oZGF0YSwge1xuICAgIGlzVG91Y2hlZDogdHJ1ZSxcbiAgICBpc01vdmVkOiBmYWxzZSxcbiAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB0cnVlLFxuICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICB9KTtcbiAgdG91Y2hlcy5zdGFydFggPSBzdGFydFg7XG4gIHRvdWNoZXMuc3RhcnRZID0gc3RhcnRZO1xuICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gdW5kZWZpbmVkO1xuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gZmFsc2U7XG4gIGxldCBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gIGlmICh0YXJnZXRFbC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcbiAgICBpZiAodGFyZ2V0RWwubm9kZU5hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGFyZ2V0RWwpIHtcbiAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgfVxuICBjb25zdCBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuICBpZiAoKHBhcmFtcy50b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCB8fCBzaG91bGRQcmV2ZW50RGVmYXVsdCkgJiYgIXRhcmdldEVsLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlICYmIHN3aXBlci5hbmltYXRpbmcgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hTdGFydCgpO1xuICB9XG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGV2ZW50LnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBvaW50ZXJJbmRleCA9IGRhdGEuZXZDYWNoZS5maW5kSW5kZXgoY2FjaGVkRXYgPT4gY2FjaGVkRXYucG9pbnRlcklkID09PSBlLnBvaW50ZXJJZCk7XG4gIGlmIChwb2ludGVySW5kZXggPj0gMCkgZGF0YS5ldkNhY2hlW3BvaW50ZXJJbmRleF0gPSBlO1xuICBjb25zdCB0YXJnZXRUb3VjaCA9IGRhdGEuZXZDYWNoZS5sZW5ndGggPiAxID8gZGF0YS5ldkNhY2hlWzBdIDogZTtcbiAgY29uc3QgcGFnZVggPSB0YXJnZXRUb3VjaC5wYWdlWDtcbiAgY29uc3QgcGFnZVkgPSB0YXJnZXRUb3VjaC5wYWdlWTtcbiAgaWYgKGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHtcbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93VG91Y2hNb3ZlKSB7XG4gICAgaWYgKCFlLnRhcmdldC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBwcmV2WDogc3dpcGVyLnRvdWNoZXMuY3VycmVudFgsXG4gICAgICAgIHByZXZZOiBzd2lwZXIudG91Y2hlcy5jdXJyZW50WSxcbiAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICBjdXJyZW50WTogcGFnZVlcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZScsIGUpO1xuICB9XG4gIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG4gIGNvbnN0IGRpZmZYID0gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYO1xuICBjb25zdCBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydChkaWZmWCAqKiAyICsgZGlmZlkgKiogMikgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIGRhdGEuaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgbGV0IHRvdWNoQW5nbGU7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRZID09PSB0b3VjaGVzLnN0YXJ0WSB8fCBzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIHRvdWNoZXMuY3VycmVudFggPT09IHRvdWNoZXMuc3RhcnRYKSB7XG4gICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKGRpZmZYICogZGlmZlggKyBkaWZmWSAqIGRpZmZZID49IDI1KSB7XG4gICAgICAgIHRvdWNoQW5nbGUgPSBNYXRoLmF0YW4yKE1hdGguYWJzKGRpZmZZKSwgTWF0aC5hYnMoZGlmZlgpKSAqIDE4MCAvIE1hdGguUEk7XG4gICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGUgOiA5MCAtIHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgfVxuICBpZiAodHlwZW9mIGRhdGEuc3RhcnRNb3ZpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNTY3JvbGxpbmcgfHwgc3dpcGVyLnpvb20gJiYgc3dpcGVyLnBhcmFtcy56b29tICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIGRhdGEuZXZDYWNoZS5sZW5ndGggPiAxKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuICBsZXQgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIGxldCB0b3VjaGVzRGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnByZXZpb3VzWCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnByZXZpb3VzWTtcbiAgaWYgKHBhcmFtcy5vbmVXYXlNb3ZlbWVudCkge1xuICAgIGRpZmYgPSBNYXRoLmFicyhkaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICAgIHRvdWNoZXNEaWZmID0gTWF0aC5hYnModG91Y2hlc0RpZmYpICogKHJ0bCA/IDEgOiAtMSk7XG4gIH1cbiAgdG91Y2hlcy5kaWZmID0gZGlmZjtcbiAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgaWYgKHJ0bCkge1xuICAgIGRpZmYgPSAtZGlmZjtcbiAgICB0b3VjaGVzRGlmZiA9IC10b3VjaGVzRGlmZjtcbiAgfVxuICBjb25zdCBwcmV2VG91Y2hlc0RpcmVjdGlvbiA9IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPSB0b3VjaGVzRGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGNvbnN0IGlzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcCAmJiAhcGFyYW1zLmNzc01vZGU7XG4gIGNvbnN0IGFsbG93TG9vcEZpeCA9IHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIHN3aXBlci5hbGxvd1NsaWRlTmV4dCB8fCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBzd2lwZXIuYWxsb3dTbGlkZVByZXY7XG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKGlzTG9vcCAmJiBhbGxvd0xvb3BGaXgpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiBzd2lwZXIuc3dpcGVEaXJlY3Rpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBjb25zdCBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0cmFuc2l0aW9uZW5kJywge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIH1cbiAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSBmYWxzZTtcbiAgICAvLyBHcmFiIEN1cnNvclxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKHRydWUpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gIH1cbiAgbGV0IGxvb3BGaXhlZDtcbiAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwcmV2VG91Y2hlc0RpcmVjdGlvbiAhPT0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gJiYgaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiBNYXRoLmFicyhkaWZmKSA+PSAxKSB7XG4gICAgLy8gbmVlZCBhbm90aGVyIGxvb3AgZml4XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGU6IHRydWVcbiAgICB9KTtcbiAgICBsb29wRml4ZWQgPSB0cnVlO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICB9XG4gIGlmIChkaWZmID4gMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIHN3aXBlci5zaXplIC8gMiA6IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAncHJldicsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxICsgKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaWZmIDwgMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIHN3aXBlci5zaXplIC8gMiA6IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAnbmV4dCcsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICAvLyBUaHJlc2hvbGRcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcGFyYW1zLnRocmVzaG9sZCB8fCBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICB0b3VjaGVzLmRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgLy8gVXBkYXRlIGFjdGl2ZSBpbmRleCBpbiBmcmVlIG1vZGVcbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hNb3ZlKCk7XG4gIH1cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3QgcG9pbnRlckluZGV4ID0gZGF0YS5ldkNhY2hlLmZpbmRJbmRleChjYWNoZWRFdiA9PiBjYWNoZWRFdi5wb2ludGVySWQgPT09IGV2ZW50LnBvaW50ZXJJZCk7XG4gIGlmIChwb2ludGVySW5kZXggPj0gMCkge1xuICAgIGRhdGEuZXZDYWNoZS5zcGxpY2UocG9pbnRlckluZGV4LCAxKTtcbiAgfVxuICBpZiAoWydwb2ludGVyY2FuY2VsJywgJ3BvaW50ZXJvdXQnLCAncG9pbnRlcmxlYXZlJywgJ2NvbnRleHRtZW51J10uaW5jbHVkZXMoZXZlbnQudHlwZSkpIHtcbiAgICBjb25zdCBwcm9jZWVkID0gWydwb2ludGVyY2FuY2VsJywgJ2NvbnRleHRtZW51J10uaW5jbHVkZXMoZXZlbnQudHlwZSkgJiYgKHN3aXBlci5icm93c2VyLmlzU2FmYXJpIHx8IHN3aXBlci5icm93c2VyLmlzV2ViVmlldyk7XG4gICAgaWYgKCFwcm9jZWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICB9XG4gIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgIH1cbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgfVxuXG4gIC8vIFRpbWUgZGlmZlxuICBjb25zdCB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lO1xuXG4gIC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBjb25zdCBwYXRoVHJlZSA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUocGF0aFRyZWUgJiYgcGF0aFRyZWVbMF0gfHwgZS50YXJnZXQsIHBhdGhUcmVlKTtcbiAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7XG4gICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmIHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSA8IDMwMCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgIH1cbiAgfVxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgbmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwIHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICBsZXQgY3VycmVudFBvcztcbiAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hFbmQoe1xuICAgICAgY3VycmVudFBvc1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZVxuICBsZXQgc3RvcEluZGV4ID0gMDtcbiAgbGV0IGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgY29uc3QgaW5jcmVtZW50ID0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfVxuICBsZXQgcmV3aW5kRmlyc3RJbmRleCA9IG51bGw7XG4gIGxldCByZXdpbmRMYXN0SW5kZXggPSBudWxsO1xuICBpZiAocGFyYW1zLnJld2luZCkge1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgIHJld2luZExhc3RJbmRleCA9IHBhcmFtcy52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgcmV3aW5kRmlyc3RJbmRleCA9IDA7XG4gICAgfVxuICB9XG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG4gIGNvbnN0IHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICBjb25zdCBpbmNyZW1lbnQgPSBzdG9wSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmICh0aW1lRGlmZiA+IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAvLyBMb25nIHRvdWNoZXNcbiAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBpZiAocmF0aW8gPiAxIC0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmIChyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgJiYgcmF0aW8gPCAwICYmIE1hdGguYWJzKHJhdGlvKSA+IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kTGFzdEluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFNob3J0IHN3aXBlc1xuICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpc05hdkJ1dHRvblRhcmdldCA9IHN3aXBlci5uYXZpZ2F0aW9uICYmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpO1xuICAgIGlmICghaXNOYXZCdXR0b25UYXJnZXQpIHtcbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRGaXJzdEluZGV4ICE9PSBudWxsID8gcmV3aW5kRmlyc3RJbmRleCA6IHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsID8gcmV3aW5kTGFzdEluZGV4IDogc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIGVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICB9XG5cbiAgLy8gU2F2ZSBsb2Nrc1xuICBjb25zdCB7XG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgc25hcEdyaWRcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBjb25zdCBpc1ZpcnR1YWxMb29wID0gaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wO1xuICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiAhaXNWaXJ0dWFsTG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgIWlzVmlydHVhbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKHN3aXBlci5yZWFsSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkucmVzaXplVGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucmVzdW1lKCk7XG4gICAgICB9XG4gICAgfSwgNTAwKTtcbiAgfVxuICAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrcykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyRWwsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbFRvcDtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHN3aXBlci50cmFuc2xhdGUgPT09IDApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBzd2lwZXIucHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBvbkxvYWQoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGUudGFyZ2V0KTtcbiAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSB8fCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiAhc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci51cGRhdGUoKTtcbn1cblxubGV0IGR1bW15RXZlbnRBdHRhY2hlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZHVtbXlFdmVudExpc3RlbmVyKCkge31cbmNvbnN0IGV2ZW50cyA9IChzd2lwZXIsIG1ldGhvZCkgPT4ge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWwsXG4gICAgd3JhcHBlckVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuICBjb25zdCBkb21NZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIGNvbnN0IHN3aXBlck1ldGhvZCA9IG1ldGhvZDtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgZWxbZG9tTWV0aG9kXSgncG9pbnRlcmRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCB7XG4gICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgY2FwdHVyZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcnVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyb3V0Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybGVhdmUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ2NvbnRleHRtZW51Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuXG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW2RvbU1ldGhvZF0oJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH1cblxuICAvLyBSZXNpemUgaGFuZGxlclxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXSgnb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cblxuICAvLyBJbWFnZXMgbG9hZGVyXG4gIGVsW2RvbU1ldGhvZF0oJ2xvYWQnLCBzd2lwZXIub25Mb2FkLCB7XG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uTG9hZCA9IG9uTG9hZC5iaW5kKHN3aXBlcik7XG4gIGlmICghZHVtbXlFdmVudEF0dGFjaGVkKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGR1bW15RXZlbnRMaXN0ZW5lcik7XG4gICAgZHVtbXlFdmVudEF0dGFjaGVkID0gdHJ1ZTtcbiAgfVxuICBldmVudHMoc3dpcGVyLCAnb24nKTtcbn1cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZXZlbnRzKHN3aXBlciwgJ29mZicpO1xufVxudmFyIGV2ZW50cyQxID0ge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50c1xufTtcblxuY29uc3QgaXNHcmlkRW5hYmxlZCA9IChzd2lwZXIsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG59O1xuZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJlYWxJbmRleCxcbiAgICBpbml0aWFsaXplZCxcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG4gIGNvbnN0IGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgc3dpcGVyLnBhcmFtcy5icmVha3BvaW50c0Jhc2UsIHN3aXBlci5lbCk7XG4gIGlmICghYnJlYWtwb2ludCB8fCBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnQpIHJldHVybjtcbiAgY29uc3QgYnJlYWtwb2ludE9ubHlQYXJhbXMgPSBicmVha3BvaW50IGluIGJyZWFrcG9pbnRzID8gYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gIGNvbnN0IHdhc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIHBhcmFtcyk7XG4gIGNvbnN0IGlzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IHdhc0VuYWJsZWQgPSBwYXJhbXMuZW5hYmxlZDtcbiAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCwgYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfSBlbHNlIGlmICghd2FzTXVsdGlSb3cgJiYgaXNNdWx0aVJvdykge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGApO1xuICAgIGlmIChicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicgfHwgIWJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9XG5cbiAgLy8gVG9nZ2xlIG5hdmlnYXRpb24sIHBhZ2luYXRpb24sIHNjcm9sbGJhclxuICBbJ25hdmlnYXRpb24nLCAncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIGlmICh0eXBlb2YgYnJlYWtwb2ludFBhcmFtc1twcm9wXSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICBjb25zdCB3YXNNb2R1bGVFbmFibGVkID0gcGFyYW1zW3Byb3BdICYmIHBhcmFtc1twcm9wXS5lbmFibGVkO1xuICAgIGNvbnN0IGlzTW9kdWxlRW5hYmxlZCA9IGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0gJiYgYnJlYWtwb2ludFBhcmFtc1twcm9wXS5lbmFibGVkO1xuICAgIGlmICh3YXNNb2R1bGVFbmFibGVkICYmICFpc01vZHVsZUVuYWJsZWQpIHtcbiAgICAgIHN3aXBlcltwcm9wXS5kaXNhYmxlKCk7XG4gICAgfVxuICAgIGlmICghd2FzTW9kdWxlRW5hYmxlZCAmJiBpc01vZHVsZUVuYWJsZWQpIHtcbiAgICAgIHN3aXBlcltwcm9wXS5lbmFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBkaXJlY3Rpb25DaGFuZ2VkID0gYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gJiYgYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gIT09IHBhcmFtcy5kaXJlY3Rpb247XG4gIGNvbnN0IG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG4gIGNvbnN0IHdhc0xvb3AgPSBwYXJhbXMubG9vcDtcbiAgaWYgKGRpcmVjdGlvbkNoYW5nZWQgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gIH1cbiAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCBpc0VuYWJsZWQgPSBzd2lwZXIucGFyYW1zLmVuYWJsZWQ7XG4gIGNvbnN0IGhhc0xvb3AgPSBzd2lwZXIucGFyYW1zLmxvb3A7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXZcbiAgfSk7XG4gIGlmICh3YXNFbmFibGVkICYmICFpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZGlzYWJsZSgpO1xuICB9IGVsc2UgaWYgKCF3YXNFbmFibGVkICYmIGlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5lbmFibGUoKTtcbiAgfVxuICBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICBzd2lwZXIuZW1pdCgnX2JlZm9yZUJyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbiAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgaWYgKG5lZWRzUmVMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIGlmICghd2FzTG9vcCAmJiBoYXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZShyZWFsSW5kZXgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSBpZiAod2FzTG9vcCAmJiAhaGFzTG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG59XG5cbmZ1bmN0aW9uIGdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIGJhc2UsIGNvbnRhaW5lckVsKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gJ3dpbmRvdyc7XG4gIH1cbiAgaWYgKCFicmVha3BvaW50cyB8fCBiYXNlID09PSAnY29udGFpbmVyJyAmJiAhY29udGFpbmVyRWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIGxldCBicmVha3BvaW50ID0gZmFsc2U7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gYmFzZSA9PT0gJ3dpbmRvdycgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBjb250YWluZXJFbC5jbGllbnRIZWlnaHQ7XG4gIGNvbnN0IHBvaW50cyA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5tYXAocG9pbnQgPT4ge1xuICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgY29uc3QgbWluUmF0aW8gPSBwYXJzZUZsb2F0KHBvaW50LnN1YnN0cigxKSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBwb2ludFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgIHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhLnZhbHVlLCAxMCkgLSBwYXJzZUludChiLnZhbHVlLCAxMCkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBvaW50LFxuICAgICAgdmFsdWVcbiAgICB9ID0gcG9pbnRzW2ldO1xuICAgIGlmIChiYXNlID09PSAnd2luZG93Jykge1xuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKGAobWluLXdpZHRoOiAke3ZhbHVlfXB4KWApLm1hdGNoZXMpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUgPD0gY29udGFpbmVyRWwuY2xpZW50V2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59XG5cbnZhciBicmVha3BvaW50cyA9IHtcbiAgc2V0QnJlYWtwb2ludCxcbiAgZ2V0QnJlYWtwb2ludFxufTtcblxuZnVuY3Rpb24gcHJlcGFyZUNsYXNzZXMoZW50cmllcywgcHJlZml4KSB7XG4gIGNvbnN0IHJlc3VsdENsYXNzZXMgPSBbXTtcbiAgZW50cmllcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKGl0ZW0pLmZvckVhY2goY2xhc3NOYW1lcyA9PiB7XG4gICAgICAgIGlmIChpdGVtW2NsYXNzTmFtZXNdKSB7XG4gICAgICAgICAgcmVzdWx0Q2xhc3Nlcy5wdXNoKHByZWZpeCArIGNsYXNzTmFtZXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgcmVzdWx0Q2xhc3Nlcy5wdXNoKHByZWZpeCArIGl0ZW0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHRDbGFzc2VzO1xufVxuZnVuY3Rpb24gYWRkQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZXMsXG4gICAgcGFyYW1zLFxuICAgIHJ0bCxcbiAgICBlbCxcbiAgICBkZXZpY2VcbiAgfSA9IHN3aXBlcjtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIGNvbnN0IHN1ZmZpeGVzID0gcHJlcGFyZUNsYXNzZXMoWydpbml0aWFsaXplZCcsIHBhcmFtcy5kaXJlY3Rpb24sIHtcbiAgICAnZnJlZS1tb2RlJzogc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZFxuICB9LCB7XG4gICAgJ2F1dG9oZWlnaHQnOiBwYXJhbXMuYXV0b0hlaWdodFxuICB9LCB7XG4gICAgJ3J0bCc6IHJ0bFxuICB9LCB7XG4gICAgJ2dyaWQnOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMVxuICB9LCB7XG4gICAgJ2dyaWQtY29sdW1uJzogcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDEgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbidcbiAgfSwge1xuICAgICdhbmRyb2lkJzogZGV2aWNlLmFuZHJvaWRcbiAgfSwge1xuICAgICdpb3MnOiBkZXZpY2UuaW9zXG4gIH0sIHtcbiAgICAnY3NzLW1vZGUnOiBwYXJhbXMuY3NzTW9kZVxuICB9LCB7XG4gICAgJ2NlbnRlcmVkJzogcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzXG4gIH0sIHtcbiAgICAnd2F0Y2gtcHJvZ3Jlc3MnOiBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzc1xuICB9XSwgcGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpO1xuICBjbGFzc05hbWVzLnB1c2goLi4uc3VmZml4ZXMpO1xuICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzTmFtZXMpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGVsLFxuICAgIGNsYXNzTmFtZXNcbiAgfSA9IHN3aXBlcjtcbiAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWVzKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59XG5cbnZhciBjbGFzc2VzID0ge1xuICBhZGRDbGFzc2VzLFxuICByZW1vdmVDbGFzc2VzXG59O1xuXG5mdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgaXNMb2NrZWQ6IHdhc0xvY2tlZCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIHNsaWRlc09mZnNldEJlZm9yZVxuICB9ID0gcGFyYW1zO1xuICBpZiAoc2xpZGVzT2Zmc2V0QmVmb3JlKSB7XG4gICAgY29uc3QgbGFzdFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgbGFzdFNsaWRlUmlnaHRFZGdlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzbGlkZXNPZmZzZXRCZWZvcmUgKiAyO1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zaXplID4gbGFzdFNsaWRlUmlnaHRFZGdlO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggPT09IDE7XG4gIH1cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cbiAgaWYgKHdhc0xvY2tlZCAmJiB3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICB9XG4gIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcbiAgfVxufVxudmFyIGNoZWNrT3ZlcmZsb3ckMSA9IHtcbiAgY2hlY2tPdmVyZmxvd1xufTtcblxudmFyIGRlZmF1bHRzID0ge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgb25lV2F5TW92ZW1lbnQ6IGZhbHNlLFxuICB0b3VjaEV2ZW50c1RhcmdldDogJ3dyYXBwZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXG4gIG5lc3RlZDogZmFsc2UsXG4gIGNyZWF0ZUVsZW1lbnRzOiBmYWxzZSxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgZm9jdXNhYmxlRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gIC8vIE92ZXJyaWRlc1xuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsLFxuICAvL1xuICBwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb246IGZhbHNlLFxuICAvLyBzc3JcbiAgdXNlckFnZW50OiBudWxsLFxuICB1cmw6IG51bGwsXG4gIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS5cbiAgZWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsXG4gIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcblxuICAvLyBCcmVha3BvaW50c1xuICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuICBicmVha3BvaW50c0Jhc2U6ICd3aW5kb3cnLFxuICAvLyBTbGlkZXMgZ3JpZFxuICBzcGFjZUJldHdlZW46IDAsXG4gIHNsaWRlc1BlclZpZXc6IDEsXG4gIHNsaWRlc1Blckdyb3VwOiAxLFxuICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gIHNsaWRlc1Blckdyb3VwQXV0bzogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXNCb3VuZHM6IGZhbHNlLFxuICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsXG4gIC8vIGluIHB4XG4gIHNsaWRlc09mZnNldEFmdGVyOiAwLFxuICAvLyBpbiBweFxuICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxuICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuICAvLyBEaXNhYmxlIHN3aXBlciBhbmQgaGlkZSBuYXZpZ2F0aW9uIHdoZW4gY29udGFpbmVyIG5vdCBvdmVyZmxvd1xuICB3YXRjaE92ZXJmbG93OiB0cnVlLFxuICAvLyBSb3VuZCBsZW5ndGhcbiAgcm91bmRMZW5ndGhzOiBmYWxzZSxcbiAgLy8gVG91Y2hlc1xuICB0b3VjaFJhdGlvOiAxLFxuICB0b3VjaEFuZ2xlOiA0NSxcbiAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgc2hvcnRTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICBsb25nU3dpcGVzTXM6IDMwMCxcbiAgZm9sbG93RmluZ2VyOiB0cnVlLFxuICBhbGxvd1RvdWNoTW92ZTogdHJ1ZSxcbiAgdGhyZXNob2xkOiA1LFxuICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246IGZhbHNlLFxuICB0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6IHRydWUsXG4gIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG4gIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuICAvLyBSZXNpc3RhbmNlXG4gIHJlc2lzdGFuY2U6IHRydWUsXG4gIHJlc2lzdGFuY2VSYXRpbzogMC44NSxcbiAgLy8gUHJvZ3Jlc3NcbiAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gIC8vIEN1cnNvclxuICBncmFiQ3Vyc29yOiBmYWxzZSxcbiAgLy8gQ2xpY2tzXG4gIHByZXZlbnRDbGlja3M6IHRydWUsXG4gIHByZXZlbnRDbGlja3NQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BlZFNsaWRlczogbnVsbCxcbiAgbG9vcFByZXZlbnRzU2xpZGluZzogdHJ1ZSxcbiAgLy8gcmV3aW5kXG4gIHJld2luZDogZmFsc2UsXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gIG1heEJhY2tmYWNlSGlkZGVuU2xpZGVzOiAxMCxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci0nLFxuICAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICBsYXp5UHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICBsYXp5UHJlbG9hZFByZXZOZXh0OiAwLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaikge1xuICAgIGlmIChvYmogPT09IHZvaWQgMCkge1xuICAgICAgb2JqID0ge307XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG9iailbMF07XG4gICAgY29uc3QgbW9kdWxlUGFyYW1zID0gb2JqW21vZHVsZVBhcmFtTmFtZV07XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChtb2R1bGVQYXJhbU5hbWUgPT09ICduYXZpZ2F0aW9uJyAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5wcmV2RWwgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLm5leHRFbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmIChbJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZWwpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmF1dG8gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gIH07XG59XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuY29uc3QgcHJvdG90eXBlcyA9IHtcbiAgZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlLFxuICB0cmFuc2xhdGUsXG4gIHRyYW5zaXRpb24sXG4gIHNsaWRlLFxuICBsb29wLFxuICBncmFiQ3Vyc29yLFxuICBldmVudHM6IGV2ZW50cyQxLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICBjbGFzc2VzXG59O1xuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuY2xhc3MgU3dpcGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChwYXJhbXMuZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5mb3JFYWNoKGNvbnRhaW5lckVsID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcbiAgICBpZiAocGFyYW1zLm1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShwYXJhbXMubW9kdWxlcykpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzLnB1c2goLi4ucGFyYW1zLm1vZHVsZXMpO1xuICAgIH1cbiAgICBjb25zdCBhbGxNb2R1bGVzUGFyYW1zID0ge307XG4gICAgc3dpcGVyLm1vZHVsZXMuZm9yRWFjaChtb2QgPT4ge1xuICAgICAgbW9kKHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBzd2lwZXIsXG4gICAgICAgIGV4dGVuZFBhcmFtczogbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcyksXG4gICAgICAgIG9uOiBzd2lwZXIub24uYmluZChzd2lwZXIpLFxuICAgICAgICBvbmNlOiBzd2lwZXIub25jZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9mZjogc3dpcGVyLm9mZi5iaW5kKHN3aXBlciksXG4gICAgICAgIGVtaXQ6IHN3aXBlci5lbWl0LmJpbmQoc3dpcGVyKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgIGVsLFxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIGNzc092ZXJmbG93QWRqdXN0bWVudCgpIHtcbiAgICAgICAgLy8gUmV0dXJucyAwIHVubGVzcyBgdHJhbnNsYXRlYCBpcyA+IDIqKjIzXG4gICAgICAgIC8vIFNob3VsZCBiZSBzdWJ0cmFjdGVkIGZyb20gY3NzIHZhbHVlcyB0byBwcmV2ZW50IG92ZXJmbG93XG4gICAgICAgIHJldHVybiBNYXRoLnRydW5jKHRoaXMudHJhbnNsYXRlIC8gMiAqKiAyMykgKiAyICoqIDIzO1xuICAgICAgfSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBzd2lwZXIucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLFxuICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgbGFzdENsaWNrVGltZTogMCxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgZXZDYWNoZTogW11cbiAgICAgIH0sXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAvLyBUb3VjaGVzXG4gICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMFxuICAgICAgfSxcbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc3dpcGVyJyk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZ2V0U2xpZGVJbmRleChzbGlkZUVsKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzRWwsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IGVsZW1lbnRJbmRleChzbGlkZXNbMF0pO1xuICAgIHJldHVybiBlbGVtZW50SW5kZXgoc2xpZGVFbCkgLSBmaXJzdFNsaWRlSW5kZXg7XG4gIH1cbiAgZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmdldFNsaWRlSW5kZXgodGhpcy5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBpbmRleClbMF0pO1xuICB9XG4gIHJlY2FsY1NsaWRlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzd2lwZXIuc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH1cbiAgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgY29uc3QgbWluID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IG1heCA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBlbWl0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGNscyA9IHN3aXBlci5lbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMDtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX2NvbnRhaW5lckNsYXNzZXMnLCBjbHMuam9pbignICcpKTtcbiAgfVxuICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiAnJztcbiAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cbiAgc2xpZGVzUGVyVmlld0R5bmFtaWModmlldywgZXhhY3QpIHtcbiAgICBpZiAodmlldyA9PT0gdm9pZCAwKSB7XG4gICAgICB2aWV3ID0gJ2N1cnJlbnQnO1xuICAgIH1cbiAgICBpZiAoZXhhY3QgPT09IHZvaWQgMCkge1xuICAgICAgZXhhY3QgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnbnVtYmVyJykgcmV0dXJuIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGxldCBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdID8gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemUgOiAwO1xuICAgICAgbGV0IGJyZWFrTG9vcDtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHZpZXcgPT09ICdjdXJyZW50Jykge1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVJblZpZXcgPSBleGFjdCA/IHNsaWRlc0dyaWRbaV0gKyBzbGlkZXNTaXplc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUgOiBzbGlkZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplO1xuICAgICAgICAgIGlmIChzbGlkZUluVmlldykge1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwcmV2aW91c1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gLSBzbGlkZXNHcmlkW2ldIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3B2O1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBzbmFwR3JpZCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgLy8gQnJlYWtwb2ludHNcbiAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cbiAgICBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXS5mb3JFYWNoKGltYWdlRWwgPT4ge1xuICAgICAgaWYgKGltYWdlRWwuY29tcGxldGUpIHtcbiAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgKiAtMSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgbGV0IHRyYW5zbGF0ZWQ7XG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlcyA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMgOiBzd2lwZXIuc2xpZGVzO1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgfVxuICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlKSB7XG4gICAgaWYgKG5lZWRVcGRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuICAgIGlmICghbmV3RGlyZWN0aW9uKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0RpcmVjdGlvbiA9IGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT09IGN1cnJlbnREaXJlY3Rpb24gfHwgbmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH1cbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtjdXJyZW50RGlyZWN0aW9ufWApO1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke25ld0RpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9IG5ld0RpcmVjdGlvbjtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBpZiAobmV3RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUud2lkdGggPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ2NoYW5nZURpcmVjdGlvbicpO1xuICAgIGlmIChuZWVkVXBkYXRlKSBzd2lwZXIudXBkYXRlKCk7XG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ3J0bCcgfHwgIXN3aXBlci5ydGwgJiYgZGlyZWN0aW9uID09PSAnbHRyJykgcmV0dXJuO1xuICAgIHN3aXBlci5ydGwgPSBkaXJlY3Rpb24gPT09ICdydGwnO1xuICAgIHN3aXBlci5ydGxUcmFuc2xhdGUgPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHN3aXBlci5ydGw7XG4gICAgaWYgKHN3aXBlci5ydGwpIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAncnRsJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApO1xuICAgICAgc3dpcGVyLmVsLmRpciA9ICdsdHInO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgbW91bnQoZWxlbWVudCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5tb3VudGVkKSByZXR1cm4gdHJ1ZTtcblxuICAgIC8vIEZpbmQgZWxcbiAgICBsZXQgZWwgPSBlbGVtZW50IHx8IHN3aXBlci5wYXJhbXMuZWw7XG4gICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgfVxuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuaG9zdCAmJiBlbC5wYXJlbnROb2RlLmhvc3Qubm9kZU5hbWUgPT09ICdTV0lQRVItQ09OVEFJTkVSJykge1xuICAgICAgc3dpcGVyLmlzRWxlbWVudCA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGdldFdyYXBwZXJTZWxlY3RvciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBgLiR7KHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzIHx8ICcnKS50cmltKCkuc3BsaXQoJyAnKS5qb2luKCcuJyl9YDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFdyYXBwZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoZWwgJiYgZWwuc2hhZG93Um9vdCAmJiBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVzID0gZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGdldFdyYXBwZXJTZWxlY3RvcigpKTtcbiAgICAgICAgLy8gQ2hpbGRyZW4gbmVlZHMgdG8gcmV0dXJuIHNsb3QgaXRlbXNcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oZWwsIGdldFdyYXBwZXJTZWxlY3RvcigpKVswXTtcbiAgICB9O1xuICAgIC8vIEZpbmQgV3JhcHBlclxuICAgIGxldCB3cmFwcGVyRWwgPSBnZXRXcmFwcGVyKCk7XG4gICAgaWYgKCF3cmFwcGVyRWwgJiYgc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgICAgd3JhcHBlckVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MpO1xuICAgICAgZWwuYXBwZW5kKHdyYXBwZXJFbCk7XG4gICAgICBlbGVtZW50Q2hpbGRyZW4oZWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgd3JhcHBlckVsLmFwcGVuZChzbGlkZUVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNFbDogc3dpcGVyLmlzRWxlbWVudCAmJiAhZWwucGFyZW50Tm9kZS5ob3N0LnNsaWRlU2xvdHMgPyBlbC5wYXJlbnROb2RlLmhvc3QgOiB3cmFwcGVyRWwsXG4gICAgICBob3N0RWw6IHN3aXBlci5pc0VsZW1lbnQgPyBlbC5wYXJlbnROb2RlLmhvc3QgOiBlbCxcbiAgICAgIG1vdW50ZWQ6IHRydWUsXG4gICAgICAvLyBSVExcbiAgICAgIHJ0bDogZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICB3cm9uZ1JUTDogZWxlbWVudFN0eWxlKHdyYXBwZXJFbCwgJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94J1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGluaXQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7XG4gICAgY29uc3QgbW91bnRlZCA9IHN3aXBlci5tb3VudChlbCk7XG4gICAgaWYgKG1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gc3dpcGVyO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7XG5cbiAgICAvLyBTZXQgYnJlYWtwb2ludFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cblxuICAgIC8vIEFkZCBDbGFzc2VzXG4gICAgc3dpcGVyLmFkZENsYXNzZXMoKTtcblxuICAgIC8vIFVwZGF0ZSBzaXplXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgR3JhYiBDdXJzb3JcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIC8vIFNsaWRlIFRvIEluaXRpYWwgU2xpZGVcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGxvb3BcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEF0dGFjaCBldmVudHNcbiAgICBzd2lwZXIuYXR0YWNoRXZlbnRzKCk7XG4gICAgY29uc3QgbGF6eUVsZW1lbnRzID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV07XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGxhenlFbGVtZW50cy5wdXNoKC4uLnN3aXBlci5ob3N0RWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJykpO1xuICAgIH1cbiAgICBsYXp5RWxlbWVudHMuZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBlID0+IHtcbiAgICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGUudGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG5cbiAgICAvLyBFbWl0XG4gICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgICBzd2lwZXIuZW1pdCgnYWZ0ZXJJbml0Jyk7XG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBkZXN0cm95KGRlbGV0ZUluc3RhbmNlLCBjbGVhblN0eWxlcykge1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWxldGVJbnN0YW5jZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjbGVhblN0eWxlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBjbGVhblN0eWxlcyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIC8vIERldGFjaCBldmVudHNcbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICAvLyBEZXN0cm95IGxvb3BcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8vIENsZWFudXAgc3R5bGVzXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgd3JhcHBlckVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLCBwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcywgcGFyYW1zLnNsaWRlTmV4dENsYXNzLCBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTtcblxuICAgIC8vIERldGFjaCBlbWl0dGVyIGV2ZW50c1xuICAgIE9iamVjdC5rZXlzKHN3aXBlci5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICBzd2lwZXIuZWwuc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuICAgIHN3aXBlci5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHN0YXRpYyBleHRlbmREZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgIGV4dGVuZChleHRlbmRlZERlZmF1bHRzLCBuZXdEZWZhdWx0cyk7XG4gIH1cbiAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgIHJldHVybiBleHRlbmRlZERlZmF1bHRzO1xuICB9XG4gIHN0YXRpYyBnZXQgZGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRzO1xuICB9XG4gIHN0YXRpYyBpbnN0YWxsTW9kdWxlKG1vZCkge1xuICAgIGlmICghU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXykgU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXyA9IFtdO1xuICAgIGNvbnN0IG1vZHVsZXMgPSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fO1xuICAgIGlmICh0eXBlb2YgbW9kID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZXMuaW5kZXhPZihtb2QpIDwgMCkge1xuICAgICAgbW9kdWxlcy5wdXNoKG1vZCk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyB1c2UobW9kdWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2gobSA9PiBTd2lwZXIuaW5zdGFsbE1vZHVsZShtKSk7XG4gICAgICByZXR1cm4gU3dpcGVyO1xuICAgIH1cbiAgICBTd2lwZXIuaW5zdGFsbE1vZHVsZShtb2R1bGUpO1xuICAgIHJldHVybiBTd2lwZXI7XG4gIH1cbn1cbk9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2gocHJvdG90eXBlR3JvdXAgPT4ge1xuICBPYmplY3Qua2V5cyhwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXSkuZm9yRWFjaChwcm90b01ldGhvZCA9PiB7XG4gICAgU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0gPSBwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXVtwcm90b01ldGhvZF07XG4gIH0pO1xufSk7XG5Td2lwZXIudXNlKFtSZXNpemUsIE9ic2VydmVyXSk7XG5cbmV4cG9ydCB7IFN3aXBlciBhcyBTLCBkZWZhdWx0cyBhcyBkIH07XG4iLCJpbXBvcnQgeyBlIGFzIGVsZW1lbnRDaGlsZHJlbiwgYyBhcyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmVsLCBgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2JywgY2hlY2tQcm9wc1trZXldKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IHsgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBhcyBjIH07XG4iLCJmdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gJyc7XG4gIH1cbiAgcmV0dXJuIGAuJHtjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjohK1xcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn1cblxuZXhwb3J0IHsgY2xhc3Nlc1RvU2VsZWN0b3IgYXMgYyB9O1xuIiwiaW1wb3J0IFN3aXBlciBmcm9tIFwic3dpcGVyXCI7XHJcbmltcG9ydCB7IE5hdmlnYXRpb24sIFBhZ2luYXRpb24gfSBmcm9tIFwic3dpcGVyL21vZHVsZXNcIjtcclxuaW1wb3J0IFwic3dpcGVyL2Nzc1wiO1xyXG5pbXBvcnQgXCJzd2lwZXIvY3NzL25hdmlnYXRpb25cIjtcclxuaW1wb3J0IFwic3dpcGVyL2Nzcy9wYWdpbmF0aW9uXCI7XHJcbi8vINCY0YHQv9C+0LvRjNC30YPQtdGC0YHRjyDQsdC40LHQu9C40L7RgtC10LrQsCBTd2lwZXJcclxuZXhwb3J0IGNvbnN0IHN3aXBlciA9IG5ldyBTd2lwZXIoXCIuc3dpcGVyXCIsIHtcclxuICByb3VuZExlbmd0aHM6IHRydWUsXHJcbiAgbW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxyXG5cclxuICBsb29wOiB0cnVlLCAvLyDQn9C+0LLRgtC+0YDQtdC90LjQtSDRgdC70LDQudC00L7QsiDQt9Cw0L3QvtCz0L5cclxuICBuYXZpZ2F0aW9uOiB7XHJcbiAgICAvLyDQodGC0YDQtdC70LrQuCDQtNC70Y8g0L/RgNC+0LrRgNGD0YLQutC4XHJcbiAgICBuZXh0RWw6IFwiLmJ0LWFycm93X3R5cGVfbGVmdFwiLFxyXG4gICAgcHJldkVsOiBcIi5idC1hcnJvd190eXBlX3JpZ2h0XCIsXHJcbiAgfSxcclxuXHJcbiAgc2xpZGVzUGVyVmlldzogMSxcclxuICBzcGFjZUJldHdlZW46IDQwLFxyXG5cclxuICBhdXRvSGVpZ2h0OiB0cnVlLFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgc3dpcGVyO1xyXG4iLCJpbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzJztcblxuZnVuY3Rpb24gTmF2aWdhdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICAgIG5hdmlnYXRpb25EaXNhYmxlZENsYXNzOiAnc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQnXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLm5hdmlnYXRpb24gPSB7XG4gICAgbmV4dEVsOiBudWxsLFxuICAgIHByZXZFbDogbnVsbFxuICB9O1xuICBjb25zdCBtYWtlRWxlbWVudHNBcnJheSA9IGVsID0+IChBcnJheS5pc0FycmF5KGVsKSA/IGVsIDogW2VsXSkuZmlsdGVyKGUgPT4gISFlKTtcbiAgZnVuY3Rpb24gZ2V0RWwoZWwpIHtcbiAgICBsZXQgcmVzO1xuICAgIGlmIChlbCAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHJlcyA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIGlmIChyZXMpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmIChlbCkge1xuICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJlcyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsKV07XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHJlcy5sZW5ndGggPiAxICYmIHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKGVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWwgJiYgIXJlcykgcmV0dXJuIGVsO1xuICAgIC8vIGlmIChBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA9PT0gMSkgcmVzID0gcmVzWzBdO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlRWwoZWwsIGRpc2FibGVkKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHN1YkVsKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtkaXNhYmxlZCA/ICdhZGQnIDogJ3JlbW92ZSddKC4uLnBhcmFtcy5kaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICBpZiAoc3ViRWwudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHN1YkVsLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICB0b2dnbGVFbChwcmV2RWwsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUVsKG5leHRFbCwgZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0b2dnbGVFbChwcmV2RWwsIHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICAgIHRvZ2dsZUVsKG5leHRFbCwgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gIH1cbiAgZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25QcmV2Jyk7XG4gIH1cbiAgZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25OZXh0Jyk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5uYXZpZ2F0aW9uLCBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24sIHtcbiAgICAgIG5leHRFbDogJ3N3aXBlci1idXR0b24tbmV4dCcsXG4gICAgICBwcmV2RWw6ICdzd2lwZXItYnV0dG9uLXByZXYnXG4gICAgfSk7XG4gICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuICAgIGxldCBuZXh0RWwgPSBnZXRFbChwYXJhbXMubmV4dEVsKTtcbiAgICBsZXQgcHJldkVsID0gZ2V0RWwocGFyYW1zLnByZXZFbCk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSk7XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGluaXRCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQgJiYgZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCguLi5wYXJhbXMubG9ja0NsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgIH07XG4gICAgbmV4dEVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ25leHQnKSk7XG4gICAgcHJldkVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCBkZXN0cm95QnV0dG9uID0gKGVsLCBkaXIpID0+IHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3RvRWRnZSBmcm9tRWRnZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmxvY2tDbGFzcykpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrICYmICFwcmV2RWwuaW5jbHVkZXModGFyZ2V0RWwpICYmICFuZXh0RWwuaW5jbHVkZXModGFyZ2V0RWwpKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgKHN3aXBlci5wYWdpbmF0aW9uLmVsID09PSB0YXJnZXRFbCB8fCBzd2lwZXIucGFnaW5hdGlvbi5lbC5jb250YWlucyh0YXJnZXRFbCkpKSByZXR1cm47XG4gICAgICBsZXQgaXNIaWRkZW47XG4gICAgICBpZiAobmV4dEVsLmxlbmd0aCkge1xuICAgICAgICBpc0hpZGRlbiA9IG5leHRFbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldkVsLmxlbmd0aCkge1xuICAgICAgICBpc0hpZGRlbiA9IHByZXZFbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uU2hvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgIH1cbiAgICAgIFsuLi5uZXh0RWwsIC4uLnByZXZFbF0uZmlsdGVyKGVsID0+ICEhZWwpLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnRvZ2dsZShzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIGluaXQoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZCguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgZGVzdHJveSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn1cblxuZXhwb3J0IHsgTmF2aWdhdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBjIGFzIGNsYXNzZXNUb1NlbGVjdG9yIH0gZnJvbSAnLi4vc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IubWpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMnO1xuaW1wb3J0IHsgZiBhcyBlbGVtZW50T3V0ZXJTaXplLCBnIGFzIGVsZW1lbnRJbmRleCwgYSBhcyBlbGVtZW50UGFyZW50cyB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBQYWdpbmF0aW9uKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHBmeCA9ICdzd2lwZXItcGFnaW5hdGlvbic7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGU6IGZhbHNlLFxuICAgICAgdHlwZTogJ2J1bGxldHMnLFxuICAgICAgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgZHluYW1pY0J1bGxldHM6IGZhbHNlLFxuICAgICAgZHluYW1pY01haW5CdWxsZXRzOiAxLFxuICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBudW1iZXIgPT4gbnVtYmVyLFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGJ1bGxldENsYXNzOiBgJHtwZnh9LWJ1bGxldGAsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogYCR7cGZ4fS1idWxsZXQtYWN0aXZlYCxcbiAgICAgIG1vZGlmaWVyQ2xhc3M6IGAke3BmeH0tYCxcbiAgICAgIGN1cnJlbnRDbGFzczogYCR7cGZ4fS1jdXJyZW50YCxcbiAgICAgIHRvdGFsQ2xhc3M6IGAke3BmeH0tdG90YWxgLFxuICAgICAgaGlkZGVuQ2xhc3M6IGAke3BmeH0taGlkZGVuYCxcbiAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiBgJHtwZnh9LXByb2dyZXNzYmFyLWZpbGxgLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiBgJHtwZnh9LXByb2dyZXNzYmFyLW9wcG9zaXRlYCxcbiAgICAgIGNsaWNrYWJsZUNsYXNzOiBgJHtwZnh9LWNsaWNrYWJsZWAsXG4gICAgICBsb2NrQ2xhc3M6IGAke3BmeH0tbG9ja2AsXG4gICAgICBob3Jpem9udGFsQ2xhc3M6IGAke3BmeH0taG9yaXpvbnRhbGAsXG4gICAgICB2ZXJ0aWNhbENsYXNzOiBgJHtwZnh9LXZlcnRpY2FsYCxcbiAgICAgIHBhZ2luYXRpb25EaXNhYmxlZENsYXNzOiBgJHtwZnh9LWRpc2FibGVkYFxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5wYWdpbmF0aW9uID0ge1xuICAgIGVsOiBudWxsLFxuICAgIGJ1bGxldHM6IFtdXG4gIH07XG4gIGxldCBidWxsZXRTaXplO1xuICBsZXQgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgY29uc3QgbWFrZUVsZW1lbnRzQXJyYXkgPSBlbCA9PiAoQXJyYXkuaXNBcnJheShlbCkgPyBlbCA6IFtlbF0pLmZpbHRlcihlID0+ICEhZSk7XG4gIGZ1bmN0aW9uIGlzUGFnaW5hdGlvbkRpc2FibGVkKCkge1xuICAgIHJldHVybiAhc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCBBcnJheS5pc0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKSAmJiBzd2lwZXIucGFnaW5hdGlvbi5lbC5sZW5ndGggPT09IDA7XG4gIH1cbiAgZnVuY3Rpb24gc2V0U2lkZUJ1bGxldHMoYnVsbGV0RWwsIHBvc2l0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3NcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghYnVsbGV0RWwpIHJldHVybjtcbiAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufWApO1xuICAgICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5hZGQoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259LSR7cG9zaXRpb259YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uQnVsbGV0Q2xpY2soZSkge1xuICAgIGNvbnN0IGJ1bGxldEVsID0gZS50YXJnZXQuY2xvc2VzdChjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKTtcbiAgICBpZiAoIWJ1bGxldEVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBpbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXRFbCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIucmVhbEluZGV4ID09PSBpbmRleCkgcmV0dXJuO1xuICAgICAgY29uc3QgcmVhbEluZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgIGNvbnN0IG5ld1NsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCk7XG4gICAgICBjb25zdCBjdXJyZW50U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKHN3aXBlci5yZWFsSW5kZXgpO1xuICAgICAgY29uc3QgbG9vcEZpeCA9IGRpciA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4QmVmb3JlTG9vcEZpeCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgIGRpcmVjdGlvbjogZGlyLFxuICAgICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IG5ld1NsaWRlSW5kZXgsXG4gICAgICAgICAgc2xpZGVUbzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGluZGV4QWZ0ZXJGaXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIGlmIChpbmRleEJlZm9yZUxvb3BGaXggPT09IGluZGV4QWZ0ZXJGaXgpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUb0xvb3AocmVhbEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpZiAobmV3U2xpZGVJbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcykge1xuICAgICAgICBsb29wRml4KG5ld1NsaWRlSW5kZXggPiBjdXJyZW50U2xpZGVJbmRleCA/ICduZXh0JyA6ICdwcmV2Jyk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwocGFyc2VGbG9hdChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gICAgICAgIGlmIChuZXdTbGlkZUluZGV4IDwgTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikpIHtcbiAgICAgICAgICBsb29wRml4KCdwcmV2Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgY29uc3QgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAvLyBDdXJyZW50L1RvdGFsXG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgbGV0IHByZXZpb3VzSW5kZXg7XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgY29uc3QgdG90YWwgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNSZWFsSW5kZXggfHwgMDtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSA/IE1hdGguZmxvb3Ioc3dpcGVyLnJlYWxJbmRleCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnJlYWxJbmRleDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzU25hcEluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXggfHwgMDtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB9XG4gICAgLy8gVHlwZXNcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICBsZXQgZmlyc3RJbmRleDtcbiAgICAgIGxldCBsYXN0SW5kZXg7XG4gICAgICBsZXQgbWlkSW5kZXg7XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGJ1bGxldFNpemUgPSBlbGVtZW50T3V0ZXJTaXplKGJ1bGxldHNbMF0sIHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICAgIHN1YkVsLnN0eWxlW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gPSBgJHtidWxsZXRTaXplICogKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KX1weGA7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgcHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ICs9IGN1cnJlbnQgLSAocHJldmlvdXNJbmRleCB8fCAwKTtcbiAgICAgICAgICBpZiAoZHluYW1pY0J1bGxldEluZGV4ID4gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpIHtcbiAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZHluYW1pY0J1bGxldEluZGV4IDwgMCkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RJbmRleCA9IE1hdGgubWF4KGN1cnJlbnQgLSBkeW5hbWljQnVsbGV0SW5kZXgsIDApO1xuICAgICAgICBsYXN0SW5kZXggPSBmaXJzdEluZGV4ICsgKE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpO1xuICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICB9XG4gICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0RWwgPT4ge1xuICAgICAgICBjb25zdCBjbGFzc2VzVG9SZW1vdmUgPSBbLi4uWycnLCAnLW5leHQnLCAnLW5leHQtbmV4dCcsICctcHJldicsICctcHJldi1wcmV2JywgJy1tYWluJ10ubWFwKHN1ZmZpeCA9PiBgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9JHtzdWZmaXh9YCldLm1hcChzID0+IHR5cGVvZiBzID09PSAnc3RyaW5nJyAmJiBzLmluY2x1ZGVzKCcgJykgPyBzLnNwbGl0KCcgJykgOiBzKS5mbGF0KCk7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3Nlc1RvUmVtb3ZlKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYnVsbGV0cy5mb3JFYWNoKGJ1bGxldCA9PiB7XG4gICAgICAgICAgY29uc3QgYnVsbGV0SW5kZXggPSBlbGVtZW50SW5kZXgoYnVsbGV0KTtcbiAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGJ1bGxldC5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCAnYnVsbGV0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBmaXJzdEluZGV4ICYmIGJ1bGxldEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICBidWxsZXQuY2xhc3NMaXN0LmFkZCguLi5gJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGJ1bGxldCwgJ3ByZXYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGJ1bGxldCwgJ25leHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYnVsbGV0ID0gYnVsbGV0c1tjdXJyZW50XTtcbiAgICAgICAgaWYgKGJ1bGxldCkge1xuICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICAgIGJ1bGxldHMuZm9yRWFjaCgoYnVsbGV0RWwsIGJ1bGxldEluZGV4KSA9PiB7XG4gICAgICAgICAgICBidWxsZXRFbC5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCBidWxsZXRJbmRleCA9PT0gY3VycmVudCA/ICdidWxsZXQtYWN0aXZlJyA6ICdidWxsZXQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgY29uc3QgZmlyc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzW2ZpcnN0SW5kZXhdO1xuICAgICAgICAgIGNvbnN0IGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzW2xhc3RJbmRleF07XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRzW2ldKSB7XG4gICAgICAgICAgICAgIGJ1bGxldHNbaV0uY2xhc3NMaXN0LmFkZCguLi5gJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhmaXJzdERpc3BsYXllZEJ1bGxldCwgJ3ByZXYnKTtcbiAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhsYXN0RGlzcGxheWVkQnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGNvbnN0IGR5bmFtaWNCdWxsZXRzTGVuZ3RoID0gTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KTtcbiAgICAgICAgY29uc3QgYnVsbGV0c09mZnNldCA9IChidWxsZXRTaXplICogZHluYW1pY0J1bGxldHNMZW5ndGggLSBidWxsZXRTaXplKSAvIDIgLSBtaWRJbmRleCAqIGJ1bGxldFNpemU7XG4gICAgICAgIGNvbnN0IG9mZnNldFByb3AgPSBydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBidWxsZXQuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnXSA9IGAke2J1bGxldHNPZmZzZXR9cHhgO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWwuZm9yRWFjaCgoc3ViRWwsIHN1YkVsSW5kZXgpID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgICBzdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5jdXJyZW50Q2xhc3MpKS5mb3JFYWNoKGZyYWN0aW9uRWwgPT4ge1xuICAgICAgICAgIGZyYWN0aW9uRWwudGV4dENvbnRlbnQgPSBwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnRvdGFsQ2xhc3MpKS5mb3JFYWNoKHRvdGFsRWwgPT4ge1xuICAgICAgICAgIHRvdGFsRWwudGV4dENvbnRlbnQgPSBwYXJhbXMuZm9ybWF0RnJhY3Rpb25Ub3RhbCh0b3RhbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICAgIGxldCBwcm9ncmVzc2JhckRpcmVjdGlvbjtcbiAgICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2FsZSA9IChjdXJyZW50ICsgMSkgLyB0b3RhbDtcbiAgICAgICAgbGV0IHNjYWxlWCA9IDE7XG4gICAgICAgIGxldCBzY2FsZVkgPSAxO1xuICAgICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIHNjYWxlWCA9IHNjYWxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKSkuZm9yRWFjaChwcm9ncmVzc0VsID0+IHtcbiAgICAgICAgICBwcm9ncmVzc0VsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKCR7c2NhbGVYfSkgc2NhbGVZKCR7c2NhbGVZfSlgO1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7c3dpcGVyLnBhcmFtcy5zcGVlZH1tc2A7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnY3VzdG9tJyAmJiBwYXJhbXMucmVuZGVyQ3VzdG9tKSB7XG4gICAgICAgIHN1YkVsLmlubmVySFRNTCA9IHBhcmFtcy5yZW5kZXJDdXN0b20oc3dpcGVyLCBjdXJyZW50ICsgMSwgdG90YWwpO1xuICAgICAgICBpZiAoc3ViRWxJbmRleCA9PT0gMCkgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN1YkVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgICBlbWl0KCdwYWdpbmF0aW9uVXBkYXRlJywgc3ViRWwpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciBDb250YWluZXJcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBsZXQgcGFnaW5hdGlvbkhUTUwgPSAnJztcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgbGV0IG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgbnVtYmVyT2ZCdWxsZXRzID4gc2xpZGVzTGVuZ3RoKSB7XG4gICAgICAgIG51bWJlck9mQnVsbGV0cyA9IHNsaWRlc0xlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBwYXJhbXMucmVuZGVyQnVsbGV0LmNhbGwoc3dpcGVyLCBpLCBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IGA8JHtwYXJhbXMuYnVsbGV0RWxlbWVudH0gJHtzd2lwZXIuaXNFbGVtZW50ID8gJ3BhcnQ9XCJidWxsZXRcIicgOiAnJ30gY2xhc3M9XCIke3BhcmFtcy5idWxsZXRDbGFzc31cIj48LyR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9PmA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLmN1cnJlbnRDbGFzc31cIj48L3NwYW4+YCArICcgLyAnICsgYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMudG90YWxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9IFtdO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgICBzdWJFbC5pbm5lckhUTUwgPSBwYWdpbmF0aW9uSFRNTCB8fCAnJztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucHVzaCguLi5zdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgZWxbMF0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMucGFnaW5hdGlvbiwgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLCB7XG4gICAgICBlbDogJ3N3aXBlci1wYWdpbmF0aW9uJ1xuICAgIH0pO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgIGxldCBlbDtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgZWwgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICBlbCA9IHBhcmFtcy5lbDtcbiAgICB9XG4gICAgaWYgKCFlbCB8fCBlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPiAxKSB7XG4gICAgICBlbCA9IFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpXTtcbiAgICAgIC8vIGNoZWNrIGlmIGl0IGJlbG9uZ3MgdG8gYW5vdGhlciBuZXN0ZWQgU3dpcGVyXG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBlbCA9IGVsLmZpbHRlcihzdWJFbCA9PiB7XG4gICAgICAgICAgaWYgKGVsZW1lbnRQYXJlbnRzKHN1YkVsLCAnLnN3aXBlcicpWzBdICE9PSBzd2lwZXIuZWwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSlbMF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPT09IDEpIGVsID0gZWxbMF07XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgZWxcbiAgICB9KTtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZCguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgIH1cbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMubW9kaWZpZXJDbGFzc30ke3BhcmFtcy50eXBlfS1keW5hbWljYCk7XG4gICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgIHN1YkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdWxsZXRDbGljayk7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uKHBhcmFtcy5jbGlja2FibGVDbGFzcyB8fCAnJykuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgc3ViRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzKSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoJyAnKSkpO1xuICB9XG4gIG9uKCdjaGFuZ2VEaXJlY3Rpb24nLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFnaW5hdGlvbiB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaG9yaXpvbnRhbENsYXNzLCBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgfSk7XG4gIH0pO1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgcmVuZGVyKCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignYWN0aXZlSW5kZXhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NuYXBJbmRleENoYW5nZScsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdzbmFwR3JpZExlbmd0aENoYW5nZScsICgpID0+IHtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZScgOiAnYWRkJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgY29uc3QgZWwgPSBtYWtlRWxlbWVudHNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgZWwgJiYgZWwubGVuZ3RoID4gMCAmJiAhdGFyZ2V0RWwuY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiAoc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpKSByZXR1cm47XG4gICAgICBjb25zdCBpc0hpZGRlbiA9IGVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25TaG93Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCdwYWdpbmF0aW9uSGlkZScpO1xuICAgICAgfVxuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QudG9nZ2xlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGVuYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBpbml0KCk7XG4gICAgcmVuZGVyKCk7XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpKTtcbiAgICB9XG4gICAgZGVzdHJveSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgcmVuZGVyLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59XG5cbmV4cG9ydCB7IFBhZ2luYXRpb24gYXMgZGVmYXVsdCB9O1xuIiwiZXhwb3J0IGNsYXNzIFBvcHVwIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5faGFuZGxlRXNjQ2xvc2VCaW5kZWQgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBvcGVuKCkge1xuICAgICAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKCdwb3B1cF9vcGVuZWQnKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlQmluZGVkKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX29wZW5lZCcpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjQ2xvc2VCaW5kZWQpO1xuICAgIH1cbiAgICBfaGFuZGxlRXNjQ2xvc2UoZXZ0KSB7IC8v0JzQtdGC0L7QtCDQv9C+0LfQstC+0LvRj9GO0YnQuNC5INC30LDQutGA0YvQstCw0YLRjCDQv9C+0L/QsNC/0Ysg0L/QviBFc2NcbiAgICAgICAgaWYgKGV2dC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7IC8v0JzQtdGC0L7QtCDQv9C+0LfQstC+0LvRj9GO0YnQuNC5INC30LDQutGA0YvQstCw0YLRjCDQv9C+0L/QsNC/0Ysg0L/QviDQutC70LjQutGDINC90LAg0LrRgNC10YHRgtC40Log0Lgg0L7QstC10YDQu9C10LlcbiAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9vcGVuZWQnKSB8fCAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BvcHVwX19jbG9zZScpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCJpbXBvcnQgXCIuL2NvbXBvbmVudHMvc3dpcGVyL3N3aXBlclwiO1xyXG5pbXBvcnQgXCIuL3N0eWxlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IFwiLi9jb21wb25lbnRzL2FjY29yZGlvbi9hY2NvcmRpb24uanNcIjtcclxuaW1wb3J0IHsgUG9wdXBXaXRoRm9ybSB9IGZyb20gXCIuL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5jb25zdCBidXJnZXJCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlYWRlcl9fYnVyZ2VyLWJ0blwiKTtcclxuY29uc3QgZm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX3R5cGVfZmVlZGJhY2tcIik7XHJcbmNvbnN0IGJ1cmdlckJ0bjIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1cmdlci1wb3B1cC1idG5cIik7XHJcbmNvbnN0IHBvcHVwQnVyZ2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5idXJnZXItcG9wdXBcIik7XHJcbmNvbnN0IGZlZWRiYWNrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJfX2ZlZWRiYWNrLWJ0blwiKTtcclxuY29uc3QgcG9wdXBGZWVkYmFja0Zvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShcIi5wb3B1cF90eXBlX2ZlZWRiYWNrXCIpO1xyXG5wb3B1cEZlZWRiYWNrRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5mZWVkYmFja0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHBvcHVwRmVlZGJhY2tGb3JtLm9wZW4oKTtcclxufSk7XHJcbmJ1cmdlckJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHBvcHVwQnVyZ2VyLmNsYXNzTGlzdC50b2dnbGUoXCJvcGVuLWJ1cmdlclwiKTtcclxufSk7XHJcbmJ1cmdlckJ0bjIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBmb3Jtcy5jbGFzc0xpc3QudG9nZ2xlKFwicG9wdXBfb3BlbmVkXCIpO1xyXG59KTtcclxuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgLyoqIEBtb2R1bGUg0J7RgtCy0LXRh9Cw0LXRgiDQt9CwINC+0YLQutGA0YvRgtC40LUg0L/QvtC/0LDQv9C+0LIg0YTQvtGA0LwqL1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XG4gICAgdGhpcy5fZm9ybUVsZW1lbnQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLmZvcm1cIik7XG4gICAgdGhpcy5fYnRuU2F2ZSA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9fYm90dG9tLXN1Ym1pdFwiKTtcbiAgICBcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5fZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGFsZXJ0KFwi0KHQv9Cw0YHQuNCx0L4g0LfQsCDQvtCx0YDQsNGJ0LXQvdC40LUhXCIpO1xuICAgIH0pO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgLy/Qt9Cw0LrRgNGL0LLQsNC10YIg0Lgg0L7RgtGH0LjRidCw0LXRgiDQuNC90L/Rg9GC0YtcbiAgICBzdXBlci5jbG9zZSgpO1xuICAgIHRoaXMuX2Zvcm1FbGVtZW50LnJlc2V0KCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJkZXRhaWxzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbmd0aCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhY2NvcmRpb24iLCJoYW5kbGVBcnJvd3NUb2dnbGUiLCJldmVudCIsInRhcmdldCIsIm9wZW4iLCJ0YWdOYW1lIiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwicGFyZW50Tm9kZSIsInF1ZXJ5U2VsZWN0b3IiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm9iaiIsImNvbnN0cnVjdG9yIiwiT2JqZWN0IiwiZXh0ZW5kIiwic3JjIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzc3JEb2N1bWVudCIsImJvZHkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJub2RlTmFtZSIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJocmVmIiwib3JpZ2luIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsInNlYXJjaCIsImRvYyIsInNzcldpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJnbyIsImJhY2siLCJDdXN0b21FdmVudCIsInRoaXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIkltYWdlIiwiRGF0ZSIsInNjcmVlbiIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJtYXRjaE1lZGlhIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwid2luIiwid2luZG93IiwiZGVsYXkiLCJub3ciLCJvIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJ0byIsImFyZ3VtZW50cyIsIm5vRXh0ZW5kIiwibmV4dFNvdXJjZSIsIm5vZGUiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwia2V5c0FycmF5IiwiZmlsdGVyIiwiaW5kZXhPZiIsIm5leHRJbmRleCIsImxlbiIsIm5leHRLZXkiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsIl9fc3dpcGVyX18iLCJlbCIsInZhck5hbWUiLCJ2YXJWYWx1ZSIsInNldFByb3BlcnR5IiwiYW5pbWF0ZUNTU01vZGVTY3JvbGwiLCJfcmVmIiwic3dpcGVyIiwidGFyZ2V0UG9zaXRpb24iLCJzaWRlIiwic3RhcnRQb3NpdGlvbiIsInRyYW5zbGF0ZSIsInRpbWUiLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInBhcmFtcyIsInNwZWVkIiwid3JhcHBlckVsIiwic2Nyb2xsU25hcFR5cGUiLCJjc3NNb2RlRnJhbWVJRCIsImRpciIsImlzT3V0T2ZCb3VuZCIsImN1cnJlbnQiLCJhbmltYXRlIiwiZ2V0VGltZSIsInByb2dyZXNzIiwiTWF0aCIsIm1heCIsIm1pbiIsImVhc2VQcm9ncmVzcyIsImNvcyIsIlBJIiwiY3VycmVudFBvc2l0aW9uIiwic2Nyb2xsVG8iLCJvdmVyZmxvdyIsImVsZW1lbnQiLCJzZWxlY3RvciIsIm1hdGNoZXMiLCJ0YWciLCJjbGFzc2VzIiwiYWRkIiwiQXJyYXkiLCJpc0FycmF5IiwiZWxlbWVudFN0eWxlIiwicHJvcCIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwicGFyZW50cyIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJwdXNoIiwiZWxlbWVudE91dGVyU2l6ZSIsInNpemUiLCJpbmNsdWRlTWFyZ2lucyIsInBhcnNlRmxvYXQiLCJvZmZzZXRXaWR0aCIsInN1cHBvcnQiLCJkZXZpY2VDYWNoZWQiLCJicm93c2VyIiwiZ2V0U3VwcG9ydCIsInNtb290aFNjcm9sbCIsImRvY3VtZW50RWxlbWVudCIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsImNhbGNTdXBwb3J0IiwiZXZlbnRzRW1pdHRlciIsIm9uIiwiZXZlbnRzIiwiaGFuZGxlciIsInByaW9yaXR5Iiwic2VsZiIsImV2ZW50c0xpc3RlbmVycyIsImRlc3Ryb3llZCIsIm1ldGhvZCIsInNwbGl0Iiwib25jZSIsIm9uY2VIYW5kbGVyIiwib2ZmIiwiX19lbWl0dGVyUHJveHkiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJhcHBseSIsIm9uQW55IiwiZXZlbnRzQW55TGlzdGVuZXJzIiwib2ZmQW55IiwiaW5kZXgiLCJzcGxpY2UiLCJldmVudEhhbmRsZXIiLCJlbWl0IiwiZGF0YSIsImNvbnRleHQiLCJfbGVuMiIsIl9rZXkyIiwidW5zaGlmdCIsInByb2Nlc3NMYXp5UHJlbG9hZGVyIiwiaW1hZ2VFbCIsInNsaWRlRWwiLCJjbG9zZXN0IiwiaXNFbGVtZW50Iiwic2xpZGVDbGFzcyIsImxhenlFbCIsImxhenlQcmVsb2FkZXJDbGFzcyIsInNoYWRvd1Jvb3QiLCJyZW1vdmUiLCJ1bmxhenkiLCJzbGlkZXMiLCJwcmVsb2FkIiwiYW1vdW50IiwibGF6eVByZWxvYWRQcmV2TmV4dCIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsImNlaWwiLCJhY3RpdmVJbmRleCIsImdyaWQiLCJyb3dzIiwiYWN0aXZlQ29sdW1uIiwicHJlbG9hZENvbHVtbnMiLCJmcm9tIiwibWFwIiwiXyIsImluY2x1ZGVzIiwiY29sdW1uIiwic2xpZGVJbmRleExhc3RJblZpZXciLCJyZXdpbmQiLCJsb29wIiwicmVhbEluZGV4IiwidXBkYXRlIiwidXBkYXRlU2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwicGFyc2VJbnQiLCJOdW1iZXIiLCJpc05hTiIsImFzc2lnbiIsInVwZGF0ZVNsaWRlcyIsImdldERpcmVjdGlvbkxhYmVsIiwicHJvcGVydHkiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibGFiZWwiLCJzbGlkZXNFbCIsInN3aXBlclNpemUiLCJydGxUcmFuc2xhdGUiLCJydGwiLCJ3cm9uZ1JUTCIsImlzVmlydHVhbCIsInZpcnR1YWwiLCJlbmFibGVkIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXNMZW5ndGgiLCJzbmFwR3JpZCIsInNsaWRlc0dyaWQiLCJzbGlkZXNTaXplc0dyaWQiLCJvZmZzZXRCZWZvcmUiLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInNsaWRlc09mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNwYWNlQmV0d2VlbiIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwicmVwbGFjZSIsInZpcnR1YWxTaXplIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luVG9wIiwiY2VudGVyZWRTbGlkZXMiLCJjc3NNb2RlIiwiZ3JpZEVuYWJsZWQiLCJzbGlkZVNpemUiLCJpbml0U2xpZGVzIiwic2hvdWxkUmVzZXRTbGlkZVNpemUiLCJicmVha3BvaW50cyIsInNsaWRlIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJmbG9vciIsInN3aXBlclNsaWRlU2l6ZSIsImFicyIsInNsaWRlc1Blckdyb3VwIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwiZWZmZWN0Iiwic2V0V3JhcHBlclNpemUiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsImdyb3VwcyIsInNsaWRlc0JlZm9yZSIsInNsaWRlc0FmdGVyIiwiZ3JvdXBTaXplIiwic2xpZGVJbmRleCIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJhbGxTbGlkZXNPZmZzZXQiLCJzbmFwSW5kZXgiLCJhZGRUb1NuYXBHcmlkIiwiYWRkVG9TbGlkZXNHcmlkIiwidiIsIndhdGNoT3ZlcmZsb3ciLCJjaGVja092ZXJmbG93Iiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsInVwZGF0ZVNsaWRlc09mZnNldCIsImJhY2tGYWNlSGlkZGVuQ2xhc3MiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwiaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQiLCJjb250YWlucyIsIm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzIiwidXBkYXRlQXV0b0hlaWdodCIsImFjdGl2ZVNsaWRlcyIsIm5ld0hlaWdodCIsInNldFRyYW5zaXRpb24iLCJnZXRTbGlkZUJ5SW5kZXgiLCJnZXRTbGlkZUluZGV4QnlEYXRhIiwidmlzaWJsZVNsaWRlcyIsIm9mZnNldEhlaWdodCIsIm1pbnVzT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInN3aXBlclNsaWRlT2Zmc2V0IiwiY3NzT3ZlcmZsb3dBZGp1c3RtZW50IiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJvZmZzZXRDZW50ZXIiLCJzbGlkZVZpc2libGVDbGFzcyIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVPZmZzZXQiLCJzbGlkZVByb2dyZXNzIiwibWluVHJhbnNsYXRlIiwib3JpZ2luYWxTbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwib3JpZ2luYWxQcm9ncmVzcyIsInVwZGF0ZVByb2dyZXNzIiwibXVsdGlwbGllciIsInRyYW5zbGF0ZXNEaWZmIiwibWF4VHJhbnNsYXRlIiwiaXNCZWdpbm5pbmciLCJpc0VuZCIsInByb2dyZXNzTG9vcCIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsImlzQmVnaW5uaW5nUm91bmRlZCIsImlzRW5kUm91bmRlZCIsImZpcnN0U2xpZGVJbmRleCIsImxhc3RTbGlkZUluZGV4IiwiZmlyc3RTbGlkZVRyYW5zbGF0ZSIsImxhc3RTbGlkZVRyYW5zbGF0ZSIsInRyYW5zbGF0ZU1heCIsInRyYW5zbGF0ZUFicyIsImF1dG9IZWlnaHQiLCJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwiZ2V0RmlsdGVyZWRTbGlkZSIsImFjdGl2ZVNsaWRlIiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJuZXh0U2xpZGUiLCJuZXh0RWxzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dCIsImVsZW1lbnROZXh0QWxsIiwicHJldlNsaWRlIiwicHJldkVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2IiwiZWxlbWVudFByZXZBbGwiLCJlbWl0U2xpZGVzQ2xhc3NlcyIsInVwZGF0ZUFjdGl2ZUluZGV4IiwibmV3QWN0aXZlSW5kZXgiLCJwcmV2aW91c0luZGV4IiwicHJldmlvdXNSZWFsSW5kZXgiLCJwcmV2aW91c1NuYXBJbmRleCIsImdldFZpcnR1YWxSZWFsSW5kZXgiLCJhSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4IiwiZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZSIsInNraXAiLCJnZXRBdHRyaWJ1dGUiLCJpbml0aWFsaXplZCIsInJ1bkNhbGxiYWNrc09uSW5pdCIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsInBhdGgiLCJwYXRoRWwiLCJzbGlkZUZvdW5kIiwiY2xpY2tlZFNsaWRlIiwiY2xpY2tlZEluZGV4Iiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsInRyYW5zaXRpb25FbWl0IiwicnVuQ2FsbGJhY2tzIiwiZGlyZWN0aW9uIiwic3RlcCIsInNsaWRlVG8iLCJpbnRlcm5hbCIsImluaXRpYWwiLCJhbmltYXRpbmciLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZEdyaWQiLCJub3JtYWxpemVkR3JpZE5leHQiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2Iiwic2V0VHJhbnNsYXRlIiwidHJhbnNpdGlvblN0YXJ0IiwidHJhbnNpdGlvbkVuZCIsImlzSCIsInQiLCJfaW1tZWRpYXRlVmlydHVhbCIsIl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQiLCJpbml0aWFsU2xpZGUiLCJiZWhhdmlvciIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwiZSIsInNsaWRlVG9Mb29wIiwibmV3SW5kZXgiLCJzbGlkZU5leHQiLCJwZXJHcm91cCIsInNsaWRlc1Blckdyb3VwQXV0byIsImluY3JlbWVudCIsImxvb3BQcmV2ZW50c1NsaWRpbmciLCJsb29wRml4IiwiX2NsaWVudExlZnQiLCJjbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4IiwicHJldkluZGV4IiwibGFzdEluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwidGhyZXNob2xkIiwiY3VycmVudFNuYXAiLCJzbGlkZVRvSW5kZXgiLCJzbGlkZVNlbGVjdG9yIiwibG9vcGVkU2xpZGVzIiwiZ2V0U2xpZGVJbmRleCIsIm9uVG91Y2hTdGFydCIsInRvdWNoRXZlbnRzRGF0YSIsImV2Q2FjaGUiLCJ0b3VjaGVzIiwic2ltdWxhdGVUb3VjaCIsInBvaW50ZXJUeXBlIiwib3JpZ2luYWxFdmVudCIsInRhcmdldEVsIiwidG91Y2hFdmVudHNUYXJnZXQiLCJ3aGljaCIsImJ1dHRvbiIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsIm5vU3dpcGluZ0NsYXNzIiwiZXZlbnRQYXRoIiwiY29tcG9zZWRQYXRoIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJpc1RhcmdldFNoYWRvdyIsIm5vU3dpcGluZyIsImJhc2UiLCJfX2Nsb3Nlc3RGcm9tIiwiYXNzaWduZWRTbG90IiwiZm91bmQiLCJnZXRSb290Tm9kZSIsImNsb3Nlc3RFbGVtZW50IiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImN1cnJlbnRYIiwicGFnZVgiLCJjdXJyZW50WSIsInBhZ2VZIiwic3RhcnRYIiwic3RhcnRZIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiaU9TRWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaU9TRWRnZVN3aXBlVGhyZXNob2xkIiwiaW5uZXJXaWR0aCIsInByZXZlbnREZWZhdWx0IiwiYWxsb3dUb3VjaENhbGxiYWNrcyIsImlzU2Nyb2xsaW5nIiwic3RhcnRNb3ZpbmciLCJ0b3VjaFN0YXJ0VGltZSIsInN3aXBlRGlyZWN0aW9uIiwiYWxsb3dUaHJlc2hvbGRNb3ZlIiwiZm9jdXNhYmxlRWxlbWVudHMiLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsImFsbG93VG91Y2hNb3ZlIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImZyZWVNb2RlIiwib25Ub3VjaE1vdmUiLCJwb2ludGVySW5kZXgiLCJmaW5kSW5kZXgiLCJjYWNoZWRFdiIsInBvaW50ZXJJZCIsInRhcmdldFRvdWNoIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJwcmV2WCIsInByZXZZIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInRhcmdldFRvdWNoZXMiLCJkaWZmWCIsImRpZmZZIiwic3FydCIsInRvdWNoQW5nbGUiLCJhdGFuMiIsInpvb20iLCJjYW5jZWxhYmxlIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwibmVzdGVkIiwic3RvcFByb3BhZ2F0aW9uIiwiZGlmZiIsInRvdWNoZXNEaWZmIiwicHJldmlvdXNYIiwicHJldmlvdXNZIiwib25lV2F5TW92ZW1lbnQiLCJ0b3VjaFJhdGlvIiwicHJldlRvdWNoZXNEaXJlY3Rpb24iLCJ0b3VjaGVzRGlyZWN0aW9uIiwiaXNMb29wIiwiYWxsb3dMb29wRml4Iiwic3RhcnRUcmFuc2xhdGUiLCJnZXRUcmFuc2xhdGUiLCJldnQiLCJidWJibGVzIiwiZGlzcGF0Y2hFdmVudCIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJncmFiQ3Vyc29yIiwic2V0R3JhYkN1cnNvciIsImxvb3BGaXhlZCIsImN1cnJlbnRUcmFuc2xhdGUiLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwicmVzaXN0YW5jZVJhdGlvIiwiYWN0aXZlU2xpZGVJbmRleCIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJvblRvdWNoRW5kIiwidHlwZSIsImlzU2FmYXJpIiwiaXNXZWJWaWV3IiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJwYXRoVHJlZSIsImxhc3RDbGlja1RpbWUiLCJjdXJyZW50UG9zIiwic3RvcEluZGV4IiwicmV3aW5kRmlyc3RJbmRleCIsInJld2luZExhc3RJbmRleCIsInJhdGlvIiwibG9uZ1N3aXBlc01zIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsIm9uUmVzaXplIiwic2V0QnJlYWtwb2ludCIsImlzVmlydHVhbExvb3AiLCJhdXRvcGxheSIsInJ1bm5pbmciLCJwYXVzZWQiLCJyZXNpemVUaW1lb3V0IiwicmVzdW1lIiwib25DbGljayIsInByZXZlbnRDbGlja3MiLCJwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJvblNjcm9sbCIsIm5ld1Byb2dyZXNzIiwicHJldmlvdXNUcmFuc2xhdGUiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib25Mb2FkIiwiZHVtbXlFdmVudEF0dGFjaGVkIiwiZHVtbXlFdmVudExpc3RlbmVyIiwiZGV2aWNlIiwiY2FwdHVyZSIsImRvbU1ldGhvZCIsInN3aXBlck1ldGhvZCIsInBhc3NpdmUiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsImlvcyIsImFuZHJvaWQiLCJpc0dyaWRFbmFibGVkIiwiZGVmYXVsdHMiLCJpbml0IiwicmVzaXplT2JzZXJ2ZXIiLCJjcmVhdGVFbGVtZW50cyIsInVybCIsInZpcnR1YWxUcmFuc2xhdGUiLCJicmVha3BvaW50c0Jhc2UiLCJ1bmlxdWVOYXZFbGVtZW50cyIsInBhc3NpdmVMaXN0ZW5lcnMiLCJ3cmFwcGVyQ2xhc3MiLCJfZW1pdENsYXNzZXMiLCJtb2R1bGVFeHRlbmRQYXJhbXMiLCJhbGxNb2R1bGVzUGFyYW1zIiwibW9kdWxlUGFyYW1OYW1lIiwibW9kdWxlUGFyYW1zIiwiYXV0byIsInByb3RvdHlwZXMiLCJheGlzIiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwidHJhbnNmb3JtTWF0cml4IiwiY3VyU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJXZWJLaXRDU1NNYXRyaXgiLCJhIiwiam9pbiIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwibTQxIiwibTQyIiwiYnlDb250cm9sbGVyIiwieCIsInkiLCJ0cmFuc2xhdGVUbyIsInRyYW5zbGF0ZUJvdW5kcyIsIm5ld1RyYW5zbGF0ZSIsIm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJsb29wQ3JlYXRlIiwic2xpZGVSZWFsSW5kZXgiLCJfdGVtcCIsImJ5TW91c2V3aGVlbCIsInByZXBlbmRTbGlkZXNJbmRleGVzIiwiYXBwZW5kU2xpZGVzSW5kZXhlcyIsImlzTmV4dCIsImlzUHJldiIsInNsaWRlc1ByZXBlbmRlZCIsInNsaWRlc0FwcGVuZGVkIiwic3dpcGVyTG9vcE1vdmVET00iLCJwcmVwZW5kIiwiYXBwZW5kIiwicmVjYWxjU2xpZGVzIiwiY3VycmVudFNsaWRlVHJhbnNsYXRlIiwiY29udHJvbGxlciIsImNvbnRyb2wiLCJsb29wUGFyYW1zIiwiYyIsImxvb3BEZXN0cm95IiwibmV3U2xpZGVzT3JkZXIiLCJzd2lwZXJTbGlkZUluZGV4IiwibW92aW5nIiwiaXNMb2NrZWQiLCJfX3ByZXZlbnRPYnNlcnZlcl9fIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwiYXR0YWNoRXZlbnRzIiwiYmluZCIsImRldGFjaEV2ZW50cyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50UGFyYW1zIiwib3JpZ2luYWxQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJ3YXNFbmFibGVkIiwiZW1pdENvbnRhaW5lckNsYXNzZXMiLCJmaWxsIiwid2FzTW9kdWxlRW5hYmxlZCIsImlzTW9kdWxlRW5hYmxlZCIsImRpc2FibGUiLCJlbmFibGUiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJ3YXNMb29wIiwiY2hhbmdlRGlyZWN0aW9uIiwiaXNFbmFibGVkIiwiaGFzTG9vcCIsImNvbnRhaW5lckVsIiwiY3VycmVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInZhbHVlIiwic29ydCIsImIiLCJ3YXNMb2NrZWQiLCJsYXN0U2xpZGVSaWdodEVkZ2UiLCJhZGRDbGFzc2VzIiwiY2xhc3NOYW1lcyIsInN1ZmZpeGVzIiwiZW50cmllcyIsInByZWZpeCIsInJlc3VsdENsYXNzZXMiLCJpdGVtIiwicHJlcGFyZUNsYXNzZXMiLCJyZW1vdmVDbGFzc2VzIiwiZXh0ZW5kZWREZWZhdWx0cyIsIlN3aXBlciIsInN3aXBlcnMiLCJuZXdQYXJhbXMiLCJvdmVycmlkZXMiLCJwbGF0Zm9ybSIsInVhIiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJtYXRjaCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwib3MiLCJjYWxjRGV2aWNlIiwibmVlZFBlcnNwZWN0aXZlRml4IiwidG9Mb3dlckNhc2UiLCJTdHJpbmciLCJtYWpvciIsIm1pbm9yIiwibnVtIiwidGVzdCIsImNhbGNCcm93c2VyIiwibW9kdWxlcyIsIl9fbW9kdWxlc19fIiwibW9kIiwiZXh0ZW5kUGFyYW1zIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwiZXZlbnROYW1lIiwidmVsb2NpdHkiLCJ0cnVuYyIsImNsaWNrVGltZW91dCIsInZlbG9jaXRpZXMiLCJpbWFnZXNUb0xvYWQiLCJpbWFnZXNMb2FkZWQiLCJzZXRQcm9ncmVzcyIsImNscyIsImNsYXNzTmFtZSIsImdldFNsaWRlQ2xhc3NlcyIsInVwZGF0ZXMiLCJ2aWV3IiwiZXhhY3QiLCJzcHYiLCJicmVha0xvb3AiLCJ0cmFuc2xhdGVWYWx1ZSIsInRyYW5zbGF0ZWQiLCJjb21wbGV0ZSIsIm5ld0RpcmVjdGlvbiIsIm5lZWRVcGRhdGUiLCJjdXJyZW50RGlyZWN0aW9uIiwiY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24iLCJtb3VudCIsIm1vdW50ZWQiLCJnZXRXcmFwcGVyU2VsZWN0b3IiLCJ0cmltIiwic2xpZGVTbG90cyIsImhvc3RFbCIsImxhenlFbGVtZW50cyIsImRlc3Ryb3kiLCJkZWxldGVJbnN0YW5jZSIsImNsZWFuU3R5bGVzIiwib2JqZWN0IiwiZGVsZXRlUHJvcHMiLCJleHRlbmREZWZhdWx0cyIsIm5ld0RlZmF1bHRzIiwiaW5zdGFsbE1vZHVsZSIsInVzZSIsIm0iLCJjaGVja1Byb3BzIiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsIm9ic2VydmVyIiwiYW5pbWF0aW9uRnJhbWUiLCJyZXNpemVIYW5kbGVyIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJuZXdXaWR0aCIsIl9yZWYyIiwiY29udGVudEJveFNpemUiLCJjb250ZW50UmVjdCIsImlubGluZVNpemUiLCJibG9ja1NpemUiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwib2JzZXJ2ZXJzIiwiYXR0YWNoIiwib3B0aW9ucyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZXJVcGRhdGUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVQYXJlbnRzIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCJjb250YWluZXJQYXJlbnRzIiwiZGlzY29ubmVjdCIsImhpZGVPbkNsaWNrIiwiZGlzYWJsZWRDbGFzcyIsImhpZGRlbkNsYXNzIiwibG9ja0NsYXNzIiwibmF2aWdhdGlvbkRpc2FibGVkQ2xhc3MiLCJtYWtlRWxlbWVudHNBcnJheSIsImdldEVsIiwicmVzIiwidG9nZ2xlRWwiLCJkaXNhYmxlZCIsInN1YkVsIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsImluaXRCdXR0b24iLCJkZXN0cm95QnV0dG9uIiwiX3MiLCJwYWdpbmF0aW9uIiwiY2xpY2thYmxlIiwiaXNIaWRkZW4iLCJwZngiLCJidWxsZXRTaXplIiwiYnVsbGV0RWxlbWVudCIsInJlbmRlckJ1bGxldCIsInJlbmRlclByb2dyZXNzYmFyIiwicmVuZGVyRnJhY3Rpb24iLCJyZW5kZXJDdXN0b20iLCJwcm9ncmVzc2Jhck9wcG9zaXRlIiwiZHluYW1pY0J1bGxldHMiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJudW1iZXIiLCJmb3JtYXRGcmFjdGlvblRvdGFsIiwiYnVsbGV0Q2xhc3MiLCJidWxsZXRBY3RpdmVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJjdXJyZW50Q2xhc3MiLCJ0b3RhbENsYXNzIiwicHJvZ3Jlc3NiYXJGaWxsQ2xhc3MiLCJwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MiLCJjbGlja2FibGVDbGFzcyIsImhvcml6b250YWxDbGFzcyIsInZlcnRpY2FsQ2xhc3MiLCJwYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyIsImJ1bGxldHMiLCJkeW5hbWljQnVsbGV0SW5kZXgiLCJpc1BhZ2luYXRpb25EaXNhYmxlZCIsInNldFNpZGVCdWxsZXRzIiwiYnVsbGV0RWwiLCJwb3NpdGlvbiIsIm9uQnVsbGV0Q2xpY2siLCJuZXdTbGlkZUluZGV4IiwiY3VycmVudFNsaWRlSW5kZXgiLCJpbmRleEJlZm9yZUxvb3BGaXgiLCJ0b3RhbCIsImZpcnN0SW5kZXgiLCJtaWRJbmRleCIsImNsYXNzZXNUb1JlbW92ZSIsInN1ZmZpeCIsInMiLCJmbGF0IiwiYnVsbGV0IiwiYnVsbGV0SW5kZXgiLCJmaXJzdERpc3BsYXllZEJ1bGxldCIsImxhc3REaXNwbGF5ZWRCdWxsZXQiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJvZmZzZXRQcm9wIiwic3ViRWxJbmRleCIsImZyYWN0aW9uRWwiLCJ0ZXh0Q29udGVudCIsInRvdGFsRWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwicHJvZ3Jlc3NFbCIsImlubmVySFRNTCIsInJlbmRlciIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwIiwiX2hhbmRsZUVzY0Nsb3NlQmluZGVkIiwiX2hhbmRsZUVzY0Nsb3NlIiwiY2xvc2UiLCJzZXRFdmVudExpc3RlbmVycyIsImJ1cmdlckJ0biIsImZvcm1zIiwiYnVyZ2VyQnRuMiIsInBvcHVwQnVyZ2VyIiwiZmVlZGJhY2tCdXR0b24iLCJwb3B1cEZlZWRiYWNrRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX2Zvcm1FbGVtZW50IiwiX2J0blNhdmUiLCJhbGVydCIsInJlc2V0Il0sInNvdXJjZVJvb3QiOiIifQ==